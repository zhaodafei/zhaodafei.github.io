[{"title":"ubuntu16 php7 extension imagick","date":"2018-04-20T02:07:11.699Z","path":"2018/04/20/ubuntu/php_extension_imagick/","text":"Extension 之 imagick1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859温馨提示: 在安装过程中出现错误，一般是由于缺少编译工具包导致，可根据提示参照第一步安装相应的工具包即可1、安装 ImageMagickwget http://www.imagemagick.org/download/ImageMagick.tar.gz解压到指定目录【我这里是 /data/server/other_component/】tar -zxvf ImageMagick.tar.gz -C /data/server/other_component/cd ImageMagick-7.0.7-28/./configure --prefix=/data/server/other_component/ImageMagick-7.0.7-28 make &amp;&amp; make installexport PKG_CONFIG_PATH=/data/server/other_component/ImageMagick-7.0.7-28/lib/pkgconfig/ #设置环境变量 【重启电脑执行下一步】**********************2、安装 imagickwget http://pecl.php.net/get/imagick-3.4.3.tgz解压到指定目录【我这里是 /data/server/other_component/】tar -zxvf imagick-3.4.3.tgz -C /data/server/other_component/cd imagick-3.4.3//data/server/php7/bin/phpize #用phpize生成configure配置文件，[找到你PHP安装位置中的phpsize]./configure \\--with-php-config=/data/server/php7/bin/php-config \\--with-imagick=/data/server/other_component/ImageMagick-7.0.7-28 make &amp; make install安装完成后提示如下，表示安装成功：root@www:/data/server/other_component/phpredis-4.0.0# make installInstalling shared extensions: /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/root@www:/data/server/other_component/phpredis-4.0.0# 安装完成后配置【找到 php.ini 的位置添加扩展】：vi /etc/php/7.0/cli/php.inivi /data/server/php7/lib/php.ini 这两个里面都要写上一以下内容：extension=imagick.so拷贝扩展，否则 在 【cli PHP -m】 模式中看不到扩展：cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/imagick.so /usr/lib/php/20151012/重启php-fpm查找PHP服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm查看扩展php -m | grep imagick提示如下root@www:/data/server/other_component/ImageMagick-7.0.7-28# php -m | grep redisimagickroot@www:/data/server/other_component/ImageMagick-7.0.7-28# PHP扩展imagick下载网址 PHP扩展下载网址","tags":[]},{"title":"ubuntu16 php7 extension redis","date":"2018-04-20T01:06:28.885Z","path":"2018/04/20/ubuntu/php_extension_redis/","text":"Extension 之 redis123456789101112131415161718192021222324252627282930313233343536373839404142wget https://github.com/nicolasff/phpredis/archive/4.0.0.tar.gzwget http://pecl.php.net/get/redis-4.0.0.tgz解压到指定目录【我这里是 /data/server/other_component/】tar -zxvf 4.0.0.tar.gz -C /data/server/other_component/cd phpredis-4.0.0//data/server/php7/bin/phpize #用phpize生成configure配置文件，[找到你PHP安装位置中的phpsize]./configure --with-php-config=/data/server/php7/bin/php-config #配置makemake install安装完成后提示如下，表示安装成功：root@www:/data/server/other_component/phpredis-4.0.0# make installInstalling shared extensions: /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/root@www:/data/server/other_component/phpredis-4.0.0# 安装完成后配置【找到 php.ini 的位置添加扩展】：vi /etc/php/7.0/cli/php.inivi /data/server/php7/lib/php.ini 这两个里面都要写上一以下内容：extension=redis.so拷贝扩展，否则 在 【cli PHP -m】 模式中看不到扩展：cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/opcache.a /usr/lib/php/20151012/cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/opcache.so /usr/lib/php/20151012/cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/redis.so /usr/lib/php/20151012/重启php-fpm查找PHP服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm查看扩展php -m | grep redis提示如下root@www:/data/server/other_component/phpredis-4.0.0# php -m | grep redisredisroot@www:/data/server/other_component/phpredis-4.0.0# 历史版本 历史版本2 PHP扩展下载网址","tags":[]},{"title":"linux-DDU 编辑文件  -vim","date":"2018-04-19T05:38:39.682Z","path":"2018/04/19/ubuntu/linux_DDU_vim/","text":"跳转到指定行123:5 回车:10 回车:15 回车","tags":[]},{"title":"centos PHP7","date":"2018-04-18T09:57:15.508Z","path":"2018/04/18/centos/php/","text":"centos PHP7 安装安装依赖1yum -y install libxml2 libxml2-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel 编译1234567891011./configure --prefix=/data/server/php7 \\--with-gd \\--with-freetype-dir \\--enable-gd-native-ttf \\--enable-mysqlnd \\--with-pdo-mysql=mysqlnd \\--with-openssl \\--with-mcrypt \\--enable-mbstring \\--enable-zip \\--enable-fpm 预处理ok后，make 编译123make &amp;&amp; make install最后用 make test 测试一下【这个过程时间比较长】 安装完毕12查看 php 版本/data/server/php7/bin/php -v 配置PHP12345cp /data/server/php7/php.ini-development /data/server/php7/lib/php.inicp /data/server/php7/etc/php-fpm.conf.default /data/server/php7/etc/php-fpm.confcp /data/server/php7/etc/php-fpm.d/www.conf.default /data/server/php7/etc/php-fpm.d/www.conf官方这里拷贝文件有点不一样，注意一下 添加 PHP 启动用户12345678910111213groupadd wwwuseradd -r -g www -s /bin/false www设置 PHP 启动用户cd /data/server/php7/etc/php-fpm.dvi www.conf 修改23、24行，内容如下： user = 启动fpm的用户名 group = 启动fpm的用户所在组 user = www group = www修改完启动 PHP-fpm php 启动命令1/data/server/php7/sbin/php-fpm 配置虚拟主机测试一下在 /data/www/ 目录下创建 index.php 内容如下： 123&lt;?phpecho phpinfo();?&gt; 在 nginx 中配置虚拟主机 12345678910111213141516server &#123; listen 80; server_name 127.0.0.1 192.168.1.230; client_max_body_size 10m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0.1_access.log; #error_log /data/server/tengine/logs/127.0.0.1_error.log; root /data/www/; # index index.html; index index.php; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125;&#125;","tags":[]},{"title":"ubuntu mysql others","date":"2018-04-18T05:16:40.763Z","path":"2018/04/18/ubuntu/linux_ubuntu_mysql_others/","text":"mysql 5.6 其他查看 MySQL 配置;1234windows下是my.inilinux下是my.cnflinux 中 locate my.cnf 就出来了（没有的话先updatedb） MySQL 忘记密码123451、查找 my.cnf 配置文件位置，在文件最后添加 skip-grant-tables 保存退出，修改完密码记得删掉2、修改密码，命令MySQL&gt; UPDATE mysql.user SET Password=PASSWORD('你的密码') where USER='root';MySQL&gt; flush privileges; MySQL&gt; exit; 确定 MySQL 中文件位置123456789101112131415161、locate mysql.server 找到后启动 mysql ./mysql.server start2、 ps -aux | grep mysql 看到信息如下（我自己的）：root 19312 0.0 0.0 113256 1596 pts/2 S 14:09 0:00 /bin/sh /usr/bin/mysqld_safe #数据库登录运行路径--datadir=/var/lib/mysql #数据库文件的存放路径--pid-file=/var/lib/mysql/iZ2ze8dugwavcbouiggqoeZ.pidmysql 19413 0.1 5.8 1236108 465644 pts/2 Sl 14:09 0:01 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql #数据库文件的存放路径--plugin-dir=/usr/lib64/mysql/plugin --user=mysql --log-error=/var/lib/mysql/iZ2ze8dugwavcbouiggqoeZ.err #错误日志--pid-file=/var/lib/mysql/iZ2ze8dugwavcbouiggqoeZ.pid 创建行用户并授权给指定数据库权限【以下命令在服务器 MySQL 中运行】1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253541、登录MySQLmysql -u root -p2、创建新用户CREATE USER '用户名'@'ip地址' IDENTIFIED BY '密码'; % 代表所有ip都能访问localhost 代表本机才能访问123.123.123.123 代表指定ip才能访问3、验证账号是否创建成功SELECT host, user, password FROM mysql.user WHERE user='用户';4、给新建用户授权指定数据库GRANT &lt;privileges&gt; ON &lt;database&gt;.&lt;table&gt; TO 'myuser'@'localhost';命令中 &lt;privileges&gt; 代表着用逗号分隔权限列表&lt;database&gt;.&lt;table&gt; 代表数据库.表demo：GRANT ALL ON &lt;database&gt;.&lt;table&gt; TO 'myuser'@'localhost';GRANT CREATE,INSERT ON &lt;database&gt;.&lt;table&gt; TO 'myuser'@'localhost';以下是一些可用权限&lt;privileges&gt;：ALL: 所有可用的权限CREATE: 创建库、表和索引LOCK_TABLES: 锁定表ALTER: 修改表DELETE: 删除表INSERT: 插入表或列SELECT: 检索表或列的数据CREATE_VIEW: 创建视图SHOW_DATABASES: 列出数据库DROP: 删除库、表和视图5、验证给用户的权限SHOW GRANTS FOR '用户名'@'ip地址';6、移除权限REVOKE &lt;privileges&gt; ON &lt;database&gt;.&lt;table&gt; FROM '用户名'@'ip地址';demo：CREATE DATABASE afei_db;CREATE USER 'afei'@'%' IDENTIFIED BY '123456';SELECT host, user, password FROM mysql.user WHERE user='afei';grant all privileges on afei_db.* to 'afei'@'%'; #没有指定密码授权SHOW GRANTS FOR 'afei'@'%';flush privileges; #刷新扩展命令grant all privileges on afei.* to afei@l% identified by '123456'; #指定命令授权drop user 'afei'@'%'; #删除用户 linux 查看 MySQL 版本1、在help中查找 mysql –help |grep Distrib2、在help中查找 mysql –help |grep Distrib","tags":[]},{"title":"computer install ubuntu16","date":"2018-04-17T07:09:50.973Z","path":"2018/04/17/ubuntu/ubuntu_install/","text":"电脑安装ubuntu系统下载： ubuntu下载1wget https://www.ubuntu.com/download/desktop 安装好 UltraISO 软碟通 ，安装完软件后，打开软件，点击文件打开，找到刚才下载的 ubuntu 的 ISO 文件，点击开开，完成 ISO 文件的加载。接着插入 u 盘，点击 UltraISO 启动选项，然后找到写入硬盘选项，点击它进入将要操作的界面，最后点击写入; install 代码分为行内代码和代码块 行内代码使用&lt;p&gt;这里使用代码块&lt;/p&gt; 这里没有代码块 代码语法高亮 1echo \"dddddd\"; 12var abc = \"123\";alert(abc); 我是a里面的内容","tags":[]},{"title":"ubuntu16 Redmine","date":"2018-04-13T03:54:09.902Z","path":"2018/04/13/ubuntu/Redmine/","text":"Rvm+Ruby+Rails 【具体细节效果以后版本修改……】rvm是用于管理多个ruby版本的一个管理器 123456789101112131415161718192021sudo apt-get update sudo apt-get upgradegpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3curl -sSL https://get.rvm.io | bash -s stable//如果上面的连接失败，可以尝试:curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable 载入 Rvm 环境[ 根据提示操作 ] source /etc/profile.d/rvm.sh检查Rvm是否安装成功 rvm -v用 RVM 安装 Ruby 环境(同时把RubyGems也安装） rvm requirements rvm install 2.5.1 #可以到 Ruby(https://www.ruby-lang.org/en/downloads/)官网查看最新版本号，时间比较长RVM装好后，可以执行以下命令将刚才安装的Ruby版本，设置系统ruby默认版本 rvm use 2.5.1 --default 由于某些原因，调整gem安装目录至国内镜像，有且仅有一个就好！ 1234567891011121314151617181920212223242526272829303132333435检查下Ruby和RubyGems的版本 ruby -v gem -vgem update --system gem -v 换源 gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org gem sources -l //查看在用的gem源 显示如下：root@ubuntu:/data/server# gem sources -l*** CURRENT SOURCES ***https://rubygems.org/https://gems.ruby-china.org/root@ubuntu:/data/server# 安装bundlers gem install bundler安装Rails gem install rails 5.2.0 # 可以到rails官网查看最新版本号 或者使用： gem install rails #自己默认选择最新版查看版本 rails -v 最后检查一下所有版本 rvm -v ruby -v rails -v bundler -v适当升级gem update --system Redmine1234wget http://www.redmine.org/releases/redmine-3.4.5.tar.gztar -zxvf redmine-3.4.5.tar.gz -C /data/servermv redmine-3.4.5 redminecd redmine 设置数据库连接Redmine 需要 nginx 和 MySQL 自行安装这里不再安装 12cp config/database.yml.example config/database.yml vim config/database.yml 安装依赖包12345678910#查看缺少依赖包，安装完依赖后执行一次这个命令,直到到出现 Bundle complete!bundle install --without development test 我的值缺少依赖包如下：apt-get install libmysqlclient-dev不在缺少依赖，显示如下：Bundle complete! 31 Gemfile dependencies, 55 gems now installed.Gems in the groups development and test were not installed.Use `bundle info [gemname]` to see where a bundled gem is installed. Session 存储秘钥1rake generate_secret_token 生成redmine的数据库表结构和初始化数据12RAILS_ENV=production rake db:migrate //生成表结构RAILS_ENV=production rake redmine:load_default_data //初始化数据 创建上传文件的目录，设置文件夹的权限1234567useradd redminepasswd redmine //设置redmine账户的密码这里先不做mkdir -p tmp tmp/pdf public/plugin_assets/chown -R redmine:redmine files log tmp public/plugin_assetschmod -R 755 files log tmp public/plugin_assets/ 测试12ruby bin/rails server webrick -e productionruby bin/rails server webrick -e production -b 0.0.0.0 -p3000 #允许远程访问 其他默认账户 admin/admin 初次登录需要修改密码， 关机重启后，需要再次运行 source /etc/profile.d/rvm.sh 载入环境 网站： https://www.phusionpassenger.com/library/install/standalone/install/oss/tarball/ https://www.phusionpassenger.com/library/install/standalone/install/oss/tarball/ 下载地址： https://www.phusionpassenger.com/latest_stable_tarball https://www.phusionpassenger.com/latest_stable_tarball 12wget https://www.phusionpassenger.com/latest_stable_tarballtar -xzvf passenger-X.X.X.tar.gz -C /somewhere-permanent rootroot 内容start 代码分为行内代码和代码块 行内代码使用&lt;p&gt;这里使用代码块&lt;/p&gt; 这里没有代码块 代码语法高亮 1echo \"dddddd\"; 12var abc = \"123\";alert(abc); 我是a里面的内容","tags":[]},{"title":"这里是title","date":"2018-04-11T07:57:10.336Z","path":"2018/04/11/hexo/Markdown语法/","text":"这里是标题内容start代码分为行内代码和代码块 行内代码使用&lt;p&gt;这里使用代码块&lt;/p&gt; 这里没有代码块 代码语法高亮 1echo \"dddddd\"; 12var abc = \"123\";alert(abc); 我是a里面的内容","tags":[]},{"title":"linux ubuntu mysql5.6.39","date":"2018-04-08T02:48:50.322Z","path":"2018/04/08/ubuntu/linux_ubuntu_mysql_02/","text":"mysql5.6.39编译环境1sudo apt install make cmake gcc g++ perl bison libaio-dev libncurses5 libncurses5-dev libnuma-dev 下载12345678安装版本5.6.39wget https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.39.tar.gzwget https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.39.tar.gz【解压到你指定的目录，我这里选择 /data/server/ 】tar zxvf mysql-5.6.39.tar.gz -C /data/server/mv mysql-5.6.39 mysqlcd mysql 编译安装12345678910111213141516171819202122232425262728293031323334353637383940414243cmake \\-DCMAKE_INSTALL_PREFIX=/data/server/mysql \\-DMYSQL_DATADIR=/data/server/mysql/data \\-DSYSCONFDIR=/data/server/mysql/etc \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DWITH_MEMORY_STORAGE_ENGINE=1 \\-DWITH_READLINE=1 \\-DMYSQL_UNIX_ADDR=/data/server/mysql/mysql.sock \\-DMYSQL_TCP_PORT=3306 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_PARTITION_STORAGE_ENGINE=1 \\-DEXTRA_CHARSETS=all \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_cimake &amp;&amp; make install注意事项：重新编译时，需要清除旧的对象文件和缓存信息# make clean# rm -f CMakeCache.txt# rm -rf /data/server/etc/my.cnf编译参数： https://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html编译参数： https://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.htmlcmake \\-DCMAKE_INSTALL_PREFIX=/data/server/mysql \\ 安装路径-DMYSQL_DATADIR=/data/server/mysql/data \\ 文件存放路径-DSYSCONFDIR=/etc \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DWITH_MEMORY_STORAGE_ENGINE=1 \\-DWITH_READLINE=1 \\-DMYSQL_UNIX_ADDR=/tmp/mysql/mysql.sock \\-DMYSQL_TCP_PORT=3306 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_PARTITION_STORAGE_ENGINE=1 \\-DEXTRA_CHARSETS=all \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_ci 创建 mysql 组跟用户1234567检查系统中是否已经存在 mysql 用户，如果没有则创建cat /etc/passwd | grep mysqlcat /etc/group | grep mysql创建 mysql 用户sudo groupadd mysqlsudo useradd -r -g mysql -s /bin/false mysql 更改 mysql 目录权限123cd /data/server/mysqlsudo chown -R mysql .sudo chgrp -R mysql . 初始化数据库123456789101112131415161718192021222324252627282930313233343536chmod +x mysql_install_db 或者 chmod +x scripts/mysql_install_db./scripts/mysql_install_db --basedir=/data/server/mysql --datadir=/data/server/mysql/data --user=mysql初始化后提示：To start mysqld at boot time you have to copysupport-files/mysql.server to the right place for your systemPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !To do so, start the server, then issue the following commands: /data/server/mysql/bin/mysqladmin -u root password 'new-password' /data/server/mysql/bin/mysqladmin -u root -h ubuntu password 'new-password'Alternatively you can run: /data/server/mysql/bin/mysql_secure_installationwhich will also give you the option of removing the testdatabases and anonymous user created by default. This isstrongly recommended for production servers.See the manual for more instructions.You can start the MySQL daemon with: cd . ; /data/server/mysql/bin/mysqld_safe &amp;You can test the MySQL daemon with mysql-test-run.pl cd mysql-test ; perl mysql-test-run.plPlease report any problems at http://bugs.mysql.com/The latest information about MySQL is available on the web at http://www.mysql.comSupport MySQL by buying support/licenses at http://shop.mysql.comNew default config file was created as /data/server/mysql/my.cnf andwill be used by default by the server when you start it.You may edit this file to change server settings 启动数据库12345678chmod +x mysql.server 或者 chmod +x support-files/mysql.server ./support-files/mysql.server start 初始化密码，我这里设置密码： 123456 做测试，实际中设置你认为安全的密码 /data/server/mysql/bin/mysqladmin -u root password '123456' 登录MySQL bin/mysql -u root -p 创建新用户，并允许远程连接123456789101112131415命令: GRANT ALL PRIVILEGES ON *.* TO 'username'@'host' IDENTIFIED BY 'new_password' WITH GRANT OPTION; . 点代表所有表username 代表你创建的用户名host 代表你指定在那台机器可以登录，本地登录就是 localhost ，允许所有远程登录就是 % ；new_password 代表该用户的登录密码，密码可以为空，如果是空则改用户可以不需要密码登录demo:新增超级权限并允许远程访问：GRANT ALL PRIVILEGES ON *.* TO 'afei2'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; FLUSH PRIVILEGES;查看创建的新用户信息：SELECT `Host`,`User`,`Password`,authentication_string,password_expired FROM `user`; MySQL 命令123456support-files/mysql.server startsupport-files/mysql.server stop/data/server/mysql/bin/mysql -u root -pmysql -h 你登录的ip -u username -P 3306 -p 【远程登录】demo： mysql -h 192.168.1.230 -u afei2 -p 查看 mysql 默认读取 my.cnf 的目录如果没有设置使用指定目录的my.cnf，mysql启动时会读取安装目录根目录及默认目录下的my.cnf文件。查看mysql启动时读取配置文件的默认目录 1234567891011121314151617181920212223242526mysql --help|grep 'my.cnf'输出：root@ubuntu:/data/server/mysql/bin# mysql --help|grep 'my.cnf'/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf order of preference, my.cnf, $MYSQL_TCP_PORT,root@ubuntu:/data/server/mysql/bin# //////////////////或者/////////////////./bin/mysqld --verbose --help |grep -A 1 'Default options'输出：root@ubuntu:/data/server/mysql# ./bin/mysqld --verbose --help |grep -A 1 'Default options'2018-04-08 01:55:32 0 [Note] --secure-file-priv is set to NULL. Operations related to importing and exporting data are disabled2018-04-08 01:55:32 0 [Note] ./bin/mysqld (mysqld 5.6.39) starting as process 34387 ...2018-04-08 01:55:32 34387 [Note] Plugin 'FEDERATED' is disabled.Default options are read from the following files in the given order: /etc/my.cnf /etc/mysql/my.cnf /data/server/mysql/etc/my.cnf ~/.my.cnf 2018-04-08 01:55:32 34387 [Note] Binlog end2018-04-08 01:55:32 34387 [Note] Shutting down plugin 'CSV'2018-04-08 01:55:32 34387 [Note] Shutting down plugin 'MyISAM'root@ubuntu:/data/server/mysql# /etc/my.cnf, /etc/mysql/my.cnf, /usr/local/etc/my.cnf, ~/.my.cnf 这些就是mysql默认会搜寻my.cnf的目录，顺序排前的优先 查看错误日志位置1234567891011121314151617修改 my.cnf 文件指定错误日志位置log_error=/data/mysql.log错误日志默认存放位置为数据目录下，你也可以用下面命令查看:SHOW GLOBAL VARIABLES LIKE '%log_error%';mysql&gt; SHOW GLOBAL VARIABLES LIKE '%log_error%';+---------------------+-----------------+| Variable_name | Value |+---------------------+-----------------+| binlog_error_action | IGNORE_ERROR || log_error | /data/mysql.log |+---------------------+-----------------+2 rows in set (0.00 sec)mysql&gt; mysql官方预编译配置参数","tags":[]},{"title":"BlueLake 主题配置","date":"2018-03-26T09:14:29.039Z","path":"2018/03/26/hexo/hexo-BlueLake/","text":"添加本地搜索安装插件hexo-generator-json-content来创建JSON数据文件 1npm install hexo-generator-json-content@2.2.0 --save 在根配置 _config.yml 添加配置 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 在主题 _config.yml 中添加 1local_search: true #安装好 BlueLake主题后，会有这个配置 我是a里面的内容","tags":[]},{"title":"linux ubuntu16 swoole","date":"2018-03-21T15:18:58.852Z","path":"2018/03/21/ubuntu/linux_ubuntu_swoole/","text":"swoolephp7 中安装swoole1.9.1 1234567891011121314151617181920212223242526272829303132333435363738394041安装依赖apt-get install libpcre3 libpcre3-dev *********************************************cd /data/server/wget https://github.com/swoole/swoole-src/archive/v1.9.1-stable.tar.gztar zxvf v1.9.1-stable.tar.gz -C /data/server/cd swoole-src-1.9.1-stable/data/server/php7/bin/phpize【 这一步很少出问题： 我的报错如下：错误一： root@ubuntu:/data/server/swoole-src-1.9.1-stable# /data/server/php7/bin/phpize Configuring for: PHP Api Version: 20151012 Zend Module Api No: 20151012 Zend Extension Api No: 320151012 Cannot find autoconf. Please check your autoconf installation and the $PHP_AUTOCONF environment variable. Then, rerun this script.错误二: Cannot find config.m4. Make sure that you run '/data/server/php7/bin/phpize' in the top level source directory of the module解决方法：sudo apt-get install m4sudo apt-get install autoconf 】./configure --with-php-config=/data/server/php7/bin/php-configmakemake install最后安装成功后显示：root@ubuntu:/data/server/swoole-src-1.9.1-stable# make installInstalling shared extensions: /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/root@ubuntu:/data/server/swoole-src-1.9.1-stable# 配置php支持swoolevi /data/server/php7/lib/php.ini #######编辑配置文件，在最后一行添加以下内容(查找php.ini最好的方法就是phpinfo) 12345vi /etc/php/7.0/cli/php.inivi /data/server/php7/lib/php.ini 这两个里面都要写上一以下内容：extension=swoole.so 重启php-fpm1234查找PHP服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm 先用 php -m 看一下,没有 swoole ，扩展，检索一下 locate php.ini ,发现在 /etc/php/7.0/cli/php.ini 这里还有一个，这里也加上 extension=swoole.so ，在看看有没有，如果还是没有， php -ini|grep ‘extesion_dir’ 看一下，发现如下错误： 12345678root@ubuntu:/home/afei# php -ini|grep 'extesion_dir'PHP Warning: PHP Startup: Unable to load dynamic library '/usr/lib/php/20151012/swoole.so' - /usr/lib/php/20151012/swoole.so: cannot open shared object file: No such file or directory in Unknown on line 0root@ubuntu:/home/afei# cd /usr/lib/php/20151012root@ubuntu:/usr/lib/php/20151012# ls -l解决办法， 拷贝一份过去： cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/swoole.so /usr/lib/php/20151012/ 在phpinfo页面可以看到关于swoole的选项，说明安装成功 swoole官方文档","tags":[]},{"title":"linux ubuntu15 tengine","date":"2018-03-17T03:42:21.995Z","path":"2018/03/17/ubuntu/linux_ubuntu_tengine/","text":"Tengine 官网安装相当简略，这里详细安装一次（ubuntu15 安装 tengine） 安装必要的编译环境Tengine 安装需要使用源代码自行编译，所以安装前需要安装必要的编译工具 123sudo apt-get updatesudo apt-get install g++apt-get install libgd-dev 安装所需要的组件【pcre、openssl、zlib】，组件安装的时候注意路径PCRE1234567wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz解压到你指定的目录tar -zxvf pcre-8.38.tar.gz -C /data/server/tengine_componentmv pcre-8.38 pcrecd pcre/./configure --prefix=/data/server/tengine_component/pcremake &amp;&amp; make install OpenSSL1234567wget http://www.openssl.org/source/openssl-1.0.2.tar.gz解压到你指定的目录tar -zxvf openssl-1.0.2.tar.gz -C /data/server/tengine_componentmv openssl-1.0.2 opensslcd openssl/./config --prefix=/data/server/tengine_component/opensslmake &amp;&amp; make install 这个执行时间稍微长一点 Zlib1234567wget http://zlib.net/zlib-1.2.11.tar.gz解压到你指定的目录tar -zxvf zlib-1.2.11.tar.gz -C /data/server/tengine_componentmv zlib-1.2.11 zlibcd zlib/./configure --prefix=/data/server/tengine_component/zlibmake &amp;&amp; make install 下载12345678910111213141516171819202122###有空试试这个不添加应该也是可以的，安装完有2个报错，不用理会，手动创建 logs 目录，修改权限；###groupadd wwwuseradd -s /sbin/nologin -g www www///////////////////////////////////////////////////////////wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz解压到你指定的目录tar -zxvf tengine-2.1.2.tar.gz -C /data/server/mv tengine-2.1.2 tenginecd tengine./configure --prefix=/data/server/tengine \\--with-pcre=/data/server/tengine_component/pcre \\--with-openssl=/data/server/tengine_component/openssl \\--with-http_gzip_static_module \\--with-http_realip_module \\--with-http_stub_status_module \\--with-http_concat_module \\--with-zlib=/data/server/tengine_component/zlibmake &amp;&amp; make install 注意配置的时候 –with-pcre 、–with-openssl、–with-zlib的路径为源文件的路径 检测是否可用123/data/server/tengine/sbin/nginx -t没有logs目录，那就创建一个logs目录： mkdir logs 启动关闭命令1234567/data/server/tengine/sbin/nginx -t/data/server/tengine/sbin/nginx -s start/data/server/tengine/sbin/nginx -s stop/data/server/tengine/sbin/nginx -s reloadpid出错时，可以使用这个：/data/server/tengine/sbin/nginx -c /data/server/tengine/conf/nginx.conf 扩展：有时候，我们有好多域名，为了方便我们修改一下 nginx.conf ,修改内容如下，主要是最后一句 include servers/*;然后在nginx.conf 当前位置创建 servers 目录；【修改之前记得把原来的备份 cp nginx.conf nginx.conf_backups 】 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;# load modules compiled as Dynamic Shared Object (DSO)##dso &#123;# load ngx_http_fastcgi_module.so;# load ngx_http_rewrite_module.so;#&#125;http &#123; include mime.types; default_type application/octet-stream; charset utf-8;# server_tokens off;# server_names_hash_bucket_size 128; # client_header_buffer_size 32k; # large_client_header_buffers 4 32k; # client_max_body_size 20m; # client_body_buffer_size 128k; client_header_timeout 30m; client_body_timeout 30m; # client_body_temp_path /dev/shm/client_body_temp_path 1 2; send_timeout 30m; #sendfile on; # tcp_nopush on; # tcp_nodelay on; keepalive_timeout 60; # fastcgi_connect_timeout 300; # fastcgi_send_timeout 300; # fastcgi_read_timeout 300; # fastcgi_buffer_size 256k; # fastcgi_buffers 4 256k; # fastcgi_busy_buffers_size 512k; # fastcgi_temp_file_write_size 512k; # fastcgi_temp_path /dev/shm/factcgi_temp_path 1 2; # fastcgi_cache_path /dev/shm/fastcgi_cache levels=1:2 keys_zone=PHPCACHE:1024m inactive=15m; # fastcgi_cache_key \"$scheme$request_method$host$request_uri\"; # fastcgi_cache_use_stale error timeout invalid_header http_500; # fastcgi_intercept_errors on; #开启后支持4XX 和 5XX 错误自定义 gzip on; gzip_vary on; gzip_min_length 10k; gzip_buffers 4 16k; gzip_http_version 1.0; gzip_comp_level 2; gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript; gzip_disable \"MSIE [1-6]\\.\"; include servers/*;&#125; demo 测试，在新建的 servers 目录下创建 文件 127.0.0.1 12345678910111213141516171819202122232425262728server &#123; listen 80; server_name 127.0.0.1; client_max_body_size 0m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0._access.log; #error_log /data/server/tengine/logs/127.0.0._error.log; root /data/www/; index index.html;&#125;或者：server &#123; listen 80; server_name 127.0.0.1 192.168.1.232; client_max_body_size 0m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0._access.log; #error_log /data/server/tengine/logs/127.0.0._error.log; root /data/www/; index index.html index.php; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125; &#125; Tengine 官网安装","tags":[]},{"title":"linux ubuntu15 mysql5.7","date":"2018-03-17T03:42:21.995Z","path":"2018/03/17/ubuntu/linux_ubuntu_mysql/","text":"mysql 5.7安装在终端执行 以下命令123sudo apt-get install mysql-serversudo apt install mysql-clientsudo apt install libmysqlclient-dev 安装完用以下命测试,出现图中说明 OK 1sudo netstat -tap | grep mysql 进入 mysql1mysql -uroot -p 然后回车输入密码 设置 mysql 运行远程访问1sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf 1、注释掉 bind-address = 127.0.0.1 保存退出【在43行】2、grant all on . to root@’%’ identified by ‘你的密码’ with grant option;3、flush privileges;4、exit; 退出 mysql服务5、重启服务： service mysql restart 卸载mysql123456sudo apt-get remove mysql-serversudo apt-get autoremove mysql-serversudo apt-get remove mysql-common //这个很重要清理残留数据；dpkg -l |grep ^rc|awk '&#123;print $2&#125;' |sudo xargs dpkg -P mysql 手动安装编译环境1sudo apt install make cmake gcc g++ perl bison libaio-dev libncurses5 libncurses5-dev libnuma-dev 下载【注意版本】1234567安装版本 5.7.21；如果是虚拟机建议内容 4G ;wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.21.tar.gz【解压到你指定的目录，我这里选择 /data/server/ 】tar zxvf mysql-boost-5.7.21.tar.gz -C /data/server/mv mysql-5.7.21 mysqlcd mysql 编译安装12345678910111213141516171819202122cmake . -DBUILD_CONFIG=mysql_release \\-DCPACK_MONOLITHIC_INSTALL=ON \\-DCMAKE_INSTALL_PREFIX=/data/server/mysql \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_ci \\-DMYSQL_UNIX_ADDR=/data/server/mysql/mysql.sock \\-DMYSQL_TCP_PORT=3306 \\-DMYSQLX_UNIX_ADDR=/data/server/mysql/mysqlx.sock \\-DMYSQL_DATADIR=/data/server/mysql/data \\-DSYSCONFDIR=/data/server/mysql/etc \\-DWITH_BOOST=/data/server/mysql/boost/boost_1_59_0make &amp;&amp; make install注意这一项：这个是你 boost 下载好的目录，我的这个版本的 MySQL 解压后对应的目录中有这个-DWITH_BOOST=/data/server/mysql/boost/boost_1_59_0make 的过程比较耗时；耐心等待，make install 就很快啦官方预编译配置参数：https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#cmake-general-optionshttps://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#cmake-general-options 这个过程时间比较长………… 初始化设置 mysql创建 MySQL 组跟用户12sudo groupadd mysqlsudo useradd -r -g mysql -s /bin/false mysql 更改 mysql 目录权限123cd /data/server/mysqlsudo chown -R mysql .sudo chgrp -R mysql . 初始化 mysql ， 生成 root 用户临时密码，12345678sudo bin/mysqld --initialize --user=mysql通过mysqld初始化data目录时，如果使用--initialize选项，则会为'root'@'localhost'用户创建一个随机密码。该密码会打印在控制台，如下所示行中末尾就是临时密码：2018-03-29T01:10:08.161779Z 1 [Note] A temporary password is generated for root@localhost: xJB.L-TJ)2wB*****************初始化一个空密码，使用initialize-insecure ****************sudo bin/mysqld --initialize-insecure --user=mysql 启动 mysql12345678910111213141516support-files/mysql.server startbin/mysql -u root -palter user 'root'@'localhost' identified by 'new_password';修改完重启mysql 或者 刷新support-files/mysql.server stop 或者flush privileges;*************************************************************我这里设置密码： 123456 做测试，实际中设置你认为安全的密码方法1：alter user 'root'@'localhost' identified by '123456';方法2：update user set authentication_string=password('123456') where user='root';方法3：set password=password('123456');这里如果不重新设置密码，系统会一直提示：mysql&gt; show databases;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 设为系统服务123456cp /data/server/mysql/support-files/mysql.server /etc/init.d/mysqldsystemctl daemon-reload [重新加载 service 文件]systemctl start mysqldsystemctl stop mysqldsystemctl restart mysqld 创建新用户，并允许远程连接123456789101112命令: GRANT ALL PRIVILEGES ON *.* TO 'username'@'host' IDENTIFIED BY 'new_password' WITH GRANT OPTION; . 点代表所有表username 代表你创建的用户名host 代表你指定在那台机器可以登录，本地登录就是 localhost ，允许所有远程登录就是 % ；new_password 代表该用户的登录密码，密码可以为空，如果是空则改用户可以不需要密码登录demo:新增超级权限并允许远程访问：GRANT ALL PRIVILEGES ON *.* TO 'afei2'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; FLUSH PRIVILEGES; MySQL 命令123456support-files/mysql.server startsupport-files/mysql.server stop/data/server/mysql/bin/mysql -u root -pmysql -h 你登录的ip -u username -P 3306 -p 【远程登录】demo： mysql -h 192.168.1.230 -u afei2 -p mysql官方下载地址 mysql官方下载地址 mysql官方预编译配置参数 mysql官方手册","tags":[]},{"title":"linux ubuntu16 php7.0.28","date":"2018-03-17T03:41:47.255Z","path":"2018/03/17/ubuntu/linux_ubuntu_php/","text":"源码编译安装php7.0 依赖安装，安装依赖123456789101112131415161718192021222324252627282930313233343536apt-get install libxml2 libxml2-devapt-get install opensslapt-get install libssl-devapt-get install curlapt-get install libcurl4-gnutls-devapt-get install libxslt-devapt-get install libpng-devapt-get install libfreetype6-dev// RetHat CentOS or Fedora 使用下面安装命令yum install curl curl-devel****************一般使用的依赖都是以下这些***************************安装相关依赖库sudo apt-get updatesudo apt-get install libxml2-dev#安装gccsudo apt-get install build-essentialsudo apt-get install openssl sudo apt-get install libssl-dev sudo apt-get install makesudo apt-get install curlsudo apt-get install libcurl4-gnutls-devsudo apt-get install libjpeg-devsudo apt-get install libpng-devsudo apt-get install libmcrypt-devsudo apt-get install libreadline6 libreadline6-devapt-get -y install libfreetype6-dev sudo apt-get install libxslt1-dev 下载 PHP 源码1234567wget http://cn2.php.net/get/php-7.0.28.tar.gz/from/this/mirrormv mirror php-7.0.28.tar.gz解压到你指定的目录，我这里选择 /data/server/ 目录tar -zxvf php-7.0.28.tar.gz -C /data/server/mv php-7.0.28 php7cd php7/ 查看安装帮助，执行配置脚本进行编译预处理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# ./configure --help# ./configure --prefix=/data/server/php7 \\ --with-curl \\ --with-freetype-dir \\ --with-gd \\ --with-gettext \\ --with-iconv-dir \\ --with-kerberos \\ --with-libdir=lib64 \\ --with-libxml-dir \\ --with-mysqli \\ --with-openssl \\ --with-pcre-regex \\ --with-pdo-mysql \\ --with-pdo-sqlite \\ --with-pear \\ --with-png-dir \\ --with-xmlrpc \\ --with-xsl \\ --with-zlib \\ --enable-fpm \\ --enable-bcmath \\ --enable-libxml \\ --enable-inline-optimization \\ --enable-gd-native-ttf \\ --enable-mbregex \\ --enable-mbstring \\ --enable-opcache \\ --enable-pcntl \\ --enable-shmop \\ --enable-soap \\ --enable-sockets \\ --enable-sysvsem \\ --enable-xml \\ --enable-zip********************新的编译*****************./configure --prefix=/data/server/php7 \\--with-gd \\--with-freetype-dir \\--enable-gd-native-ttf \\--enable-mysqlnd \\--with-pdo-mysql=mysqlnd \\--with-openssl \\--with-mcrypt \\--enable-mbstring \\--enable-zip \\--enable-fpm 我的错误 Configure Command ‘./configure’ ‘–prefix=/data/server/php7’ ‘–with-gd’ ‘–with-freetype-dir’ ‘–enable-gd-native-ttf’ ‘–enable-mysqlnd’ ‘–with-pdo-mysql=mysqlnd’ ‘–with-openssl’ ‘–with-mcrypt’ ‘–enable-mbstring’ ‘–enable-zip’ ‘–enable-fpm’ Server API FPM/FastCGI Virtual Directory Support disabled Configuration File (php.ini) Path /data/server/php7/lib Loaded Configuration File (none) 【正常情况这里不应该没有值的，还是之前的编译有问题，请仔细查看 正常应该是这个值 /data/server/php7/lib/php.ini】 Scan this dir for additional .ini files (none) Additional .ini files parsed (none) 之前安装过依赖这里就可以不用装，然后会提示部分依赖没有安装，安装依赖 123456789101112131415161718192021222324252627282930313233343536apt-get install libxml2 libxml2-devapt-get install opensslapt-get install libssl-devapt-get install curlapt-get install libcurl4-gnutls-devapt-get install libxslt-devapt-get install libpng-devapt-get install libfreetype6-dev// RetHat CentOS or Fedora 使用下面安装命令yum install curl curl-devel****************一般使用的依赖都是以下这些***************************安装相关依赖库sudo apt-get updatesudo apt-get install libxml2-dev#安装gccsudo apt-get install build-essentialsudo apt-get install openssl sudo apt-get install libssl-dev sudo apt-get install makesudo apt-get install curlsudo apt-get install libcurl4-gnutls-devsudo apt-get install libjpeg-devsudo apt-get install libpng-devsudo apt-get install libmcrypt-devsudo apt-get install libreadline6 libreadline6-devapt-get -y install libfreetype6-dev sudo apt-get install libxslt1-dev 预处理ok后，make 编译123make &amp;&amp; make install最后用 make test 测试一下【这个过程时间比较长】 安装完毕12查看 php 版本/data/server/php7/bin/php -v 配置PHP123456cp /data/server/php7/php.ini-development /data/server/php7/lib/php.inicp /data/server/php7/etc/php-fpm.conf.default /data/server/php7/etc/php-fpm.confcp /data/server/php7/etc/php-fpm.d/www.conf.default /data/server/php7/etc/php-fpm.d/www.conf官方这里拷贝文件有点不一样，注意一下 添加 PHP 启动用户1234567891011121314PHP 安装默认使用 www 用户，这里根据自己情况添加用户groupadd managersuseradd -r -g managers -s /bin/false managers设置 PHP 启动用户cd /data/server/php7/etc/php-fpm.dvi www.conf 修改23、24行，内容如下： user = 启动fpm的用户名 group = 启动fpm的用户所在组 user = managers group = managers修改完启动 PHP-fpm php 启动命令1/data/server/php7/sbin/php-fpm 配置虚拟主机测试一下在 /data/www/ 目录下创建 index.php 内容如下： 123&lt;?phpecho phpinfo();?&gt; 在 nginx 中配置虚拟主机 12345678910111213141516server &#123; listen 80; server_name 127.0.0.1 192.168.1.230; client_max_body_size 10m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0.1_access.log; #error_log /data/server/tengine/logs/127.0.0.1_error.log; root /data/www/; # index index.html; index index.php; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125;&#125; 扩展： 使用 php -m 查看扩展,提示如下： 12345678root@ubuntu:/data/server/php7/bin# php -mThe program 'php' can be found in the following packages: * php7.0-cli * hhvmTry: apt install &lt;selected package&gt;root@ubuntu:/data/server/php7/bin# apt install php7.0-cli安装： apt install php7.0-cli PHP命令 123456php --ini查询 PHP 服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm PHP官网下载地址 PHP官方安装文档","tags":[]},{"title":"win server 2008 部署php","date":"2018-03-15T03:57:07.089Z","path":"2018/03/15/win/win_server_2008_IIS/","text":"配置IIS （安装好 PHPstudy 后测试php）在计算机右击,选择管理，出现服务器管理界面；或者打开“开始”菜单→“服务器管理”，出现服务器管理界面 添加角色，下一步，选择 web 服务器（IIS）,下一步 选择 CGI,一直下一步 安装好IIS后，需要测试一下，在浏览器中输入 localhost ，如果出现 IIS7 欢迎界面说明正常； 配置一个新网站，打开 IIS 管理器（“开始”→“所有程序”→“管理工具”→“internet 信息服务（IIS）管理器”）；备注：使用 PHPstudy 打开 IIS 管理器，需要提前安装好 PHPstudy； 添加好后，在 IIS 管理器中，在刚才添加的网站 “网站名称” 上右键，点击 “编辑权限” ，进入后点击“安全”选项卡，再点击其中的“编辑” 。打开“编辑”窗口后点击“添加”按钮。添加一个“用户”到权限用户列表中，然后为其勾选除了“完全控制”之外的权限。然后点击“确定” “应用”。 结束后，在刚才选择的物理路径下创建 index.html ,然后用记事本打开，输入 ”hello world“ 测试； 如果是做 PHP 开发，安装好 PHPstudy 后，可出在刚才选择的物理路径下创建 index.php ,然后用记事本打开，输入 如下做测试 123&lt;?phpecho phpinfo();?&gt;","tags":[]},{"title":"linux ubuntu lnmp环境","date":"2018-03-13T03:46:22.702Z","path":"2018/03/13/ubuntu/linux_ubuntu_lnmp/","text":"LNMP环境搭建使用命令下载 nginx 安装包 nginx官网 nginx官网 nginx官网","tags":[]},{"title":"linux ubuntu shipyard","date":"2018-03-09T07:17:50.419Z","path":"2018/03/09/ubuntu/linux_ubuntu_shipyard/","text":"Shipyard简介待完善。。。。。。。 Shipyard 是一个基于 Web 的 Docker 管理工具，支持多 host，可以把多个 Docker host 上的 containers 统一管理；可以查看 images，甚至 build images；并提供 RESTful API 等 安装 shipyard1docker run --rm -v /var/run/docker.sock:/var/run/docker.sock shipyard/deploy start Shipyard官网最近官网不能访问","tags":[]},{"title":"linux DDU scp","date":"2018-03-08T06:12:17.060Z","path":"2018/03/08/ubuntu/linux_DDU_scp/","text":"scp 简介scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用 命令格式scp [参数] [原路径] [目标路径] 命令参数-1 强制scp命令使用协议ssh1-2 强制scp命令使用协议ssh2-4 强制scp命令只使用IPv4寻址-6 强制scp命令只使用IPv6寻址-B 使用批处理模式（传输过程中不询问传输口令或短语）-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）-p 保留原文件的修改时间，访问时间和访问权限。-q 不显示传输进度条。-r 递归复制整个目录。-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。-l limit 限定用户所能使用的带宽，以Kbit/s为单位。-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，-P port 注意是大写的P, port是指定数据传输用到的端口号-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项 使用实例使用scp前提：两台服务器必须都安装 ssh 从本地服务器复制到远程服务器复制文件1234567891011注意目标文件的权限:scp local_file remote_username@remote_ip:remote_folder或者scp local_file remote_username@remote_ip:remote_file或者scp local_file remote_ip:remote_folder或者scp local_file remote_ip:remote_filedemo：scp test2_01.test dafei@192.168.1.113:/data/www/test/ 第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名第3,4个没有指定用户名，命令执行后需要输入用户名和密码（默认使用root），第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名 复制目录1234567-r参数不要遗漏：【否则报错： not a regular file】scp -r local_folder remote_username@remote_ip:remote_folder或者scp -r local_folder remote_ip:remote_folder demo:scp -r test2 dafei@192.168.1.113:/data/www/test/ 第1个指定了用户名，命令执行后需要输入用户密码；第2个没有指定用户名，命令执行后需要输入用户名和密码(默认使用root)； 从远程服务器复制到本地服务器从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了 从远程拷贝文件到本地目录 123scp root@remote_ip:remote_file local_folderdemo：scp dafei@192.168.1.87:/data/www/test2/test2_01.test /data/www/test/ 从远处复制目录到本地123scp -r root@remote_ip:remote_folder local_folderdemo:scp -r dafei@192.168.1.87:/data/www/test2 /data/www/test/","tags":[]},{"title":"linux ubuntu tomact","date":"2018-03-01T03:10:38.581Z","path":"2018/03/01/ubuntu/linux_ubuntu_tomact/","text":"官网下载 Tomact 包上传到服务器12然后解压：sudo tar -zxvf apache-tomcat-9.0.5.tar.gz 在 /data/server 目录创建 tomcat 目录；然后将文件夹 apache-tomcat-9.0.5 移动到 /data/server/tomcat 下： 12mkdir tomcatsudo mv apache-tomcat-9.0.5 /data/server/tomcat/ 进入/data/server/tomcat/apache-tomcat-9.0.5/bin，编辑 startup.sh12345678910在最后一行加入下信息;#set java environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 ## 这里要注意要换成自己解压的 jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:%&#123;JAVA_HOME&#125;/lib:%&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH#tomcatexport TOMCAT_HOME=/data/server/tomcat/apache-tomcat-9.0.5 ## 这里要注意要换成自己解压的 tomcat 目录 启动1sudo ./startup.sh 关闭 tomcat ，需要在 shutdown.sh 对应的位置添加信息12345678910在最后一行加入下信息;#set java environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 ## 这里要注意要换成自己解压的 jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:%&#123;JAVA_HOME&#125;/lib:%&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH#tomcatexport TOMCAT_HOME=/data/server/tomcat/apache-tomcat-9.0.5 ## 这里要注意要换成自己解压的 tomcat 目录 停止1sudo ./shutdown.sh 加入开机启动：把catalina.sh文件复制到/etc/init.d123456789101112131415161718sudo cp -p /data/server/tomcat/apache-tomcat-9.0.5/bin/catalina.sh /etc/init.d/tomcat 编辑tomcat文件： sudo vim /etc/init.d/tomcat 在开头写如下内容：【提醒：这里一定要注意书写格式，不能有空格，有#的注释部分也要写全，不要遗漏】### BEGIN INIT INFO # Provides: tomcat # Required-Start: $local_fs $network # Required-Stop: $local_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: tomcat service # Description: tomcat service daemon ### END INIT INFO CATALINA_HOME=/data/server/tomcat/apache-tomcat-9.0.5 JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 添加自启动服务1update-rc.d tomcat defaults 测试，关机重启访问 localhost:8080 或者 192.168.1.113:8080 tomact 命令1234service tomcat &#123;start|stop|restart&#125;service tomcat stopservice tomcat startservice tomcat restart","tags":[]},{"title":"linux Ubuntu jdk","date":"2018-02-28T06:05:48.360Z","path":"2018/02/28/ubuntu/linux_ubuntu_jdk/","text":"Ubuntu 安装 jdk 2 种方式1、 通过 ppa 源方式安装 jdk82、通过官网下载安装包安装 jdk8 检测linux多少位： getconf LONG_BIT 我的系统是64位 使用 ppa 源方式安装添加ppa12sudo add-apt-repository ppa:webupd8team/javasudo apt-get update 安装oracle-java-installer1sudo apt-get install oracle-java8-installer 接下来会出现连个界面，选择ok、yes 即可 查看java版本1java -version 卸载jdk1sudo apt-get remove openjdk* 直接下载 jdk 压缩包方式安装官网下载 jdkjdk1.8 官网地址 选择相应的系统 .tar.gz 包，然后用ssh上传到服务器【提醒：不要在服务器直接下载，否则解压会出错】 解压缩，放到指定目录1sudo tar -zxvf jdk-8u161-linux-x64.tar.gz -C /usr/lib/jvm 修改环境变量1sudo vim ~/.bashrc 文件的末尾追加下面内容 12345#set oracle jdk environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jre export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 设置系统默认 jdk 版本12345678sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_161/bin/java 300 sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_161/bin/javac 300 sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_161/bin/jar 300 sudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_161/bin/javah 300 sudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_161/bin/javap 300 然后执行sudo update-alternatives --config java 测试 jdk1java -version","tags":[]},{"title":"linux Ubuntu nginx","date":"2018-02-26T07:13:09.109Z","path":"2018/02/26/ubuntu/linux_ubuntu_nginx/","text":"安装nginx123456789sudo apt-get install nginx启动 ngnnx: sudo service nginx start扩展centos nginx 重启service nginx restart/etc/init.d/nginx stop/etc/init.d/nginx start 查看nginx配置文件目录123ps -aux | grep nginx 【返回结果包含安装目录】nginx -t 【返回结果包含配置文件目录】cat /etc/nginx/nginx.conf 编译安装安装必要的编译环境Tengine 安装需要使用源代码自行编译，所以安装前需要安装必要的编译工具 1234567sudo apt-get install build-essentialsudo apt-get install libtoolsudo apt-get install g++centos 平台编译环境命令：yum -y install gcc automake autoconf libtool makeyum install gcc gcc-c++ 安装所需要的组件【pcre、openssl、zlib】，组件安装的时候注意路径PCRE1234567wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz解压到你指定的目录tar -zxvf pcre-8.38.tar.gz -C /data/server/nginx_componentmv pcre-8.38 pcrecd pcre/./configure --prefix=/data/server/nginx_component/pcremake &amp;&amp; make install OpenSSL1234567wget http://www.openssl.org/source/openssl-1.0.2.tar.gz解压到你指定的目录tar -zxvf openssl-1.0.2.tar.gz -C /data/server/nginx_componentmv openssl-1.0.2 opensslcd openssl/./config --prefix=/data/server/nginx_component/opensslmake &amp;&amp; make install Zlib1234567wget http://zlib.net/zlib-1.2.11.tar.gz解压到你指定的目录tar -zxvf zlib-1.2.11.tar.gz -C /data/server/nginx_componentmv zlib-1.2.11 zlibcd zlib/./configure --prefix=/data/server/nginx_component/zlibmake &amp;&amp; make install 下载nginx安装包，我选择的是 1.4.212345678910111213141516171819202122232425262728wget http://nginx.org/download/nginx-1.4.2.tar.gz解压到 /data/server/nginx 目录（可以根据实际情况选择目录）：tar -zxvf nginx-1.4.2.tar.gz -C /data/server/mv nginx-1.4.2 nginxcd nginx##注意路径 ./configure --sbin-path=/data/server/nginx \\--conf-path=/data/server/nginx/nginx.conf \\--pid-path=/data/server/nginx/nginx.pid \\--with-http_ssl_module \\--with-pcre=/data/server/nginx_component/pcre \\--with-zlib=/data/server/nginx_component/zlib \\--with-openssl=/data/server/nginx_component/openssl make &amp; make install 安装完的提示：.........test -f '/data/server/nginx/nginx.conf' || cp conf/nginx.conf '/data/server/nginx/nginx.conf'cp conf/nginx.conf '/data/server/nginx/nginx.conf.default'test -d '/data/server/nginx' || mkdir -p '/data/server/nginx'test -d '/usr/local/nginx/logs' || mkdir -p '/usr/local/nginx/logs'test -d '/usr/local/nginx/html' || cp -R html '/usr/local/nginx'test -d '/usr/local/nginx/logs' || mkdir -p '/usr/local/nginx/logs'make[1]: Leaving directory '/data/server/nginx'[1]+ Exit 2 注意配置的时候 –with-pcre 、–with-openssl、–with-zlib的路径为源文件的路径 检测是否可用12/data/server/nginx/nginx -t./nginx -t 报错：12345678安装完会有异常,没有 pid 文件，那就创建一个 pid 文件root@ubuntu:/data/server/nginx# /data/server/nginx/nginx -s reloadnginx: [error] open() \"/data/server/nginx/nginx.pid\" failed (2: No such file or directory)root@ubuntu:/data/server/nginx# touch nginx.pidroot@ubuntu:/data/server/nginx# /data/server/nginx/nginx -s reloadnginx: [error] invalid PID number \"\" in \"/data/server/nginx/nginx.pid\"root@ubuntu:/data/server/nginx# /data/server/nginx/nginx -c /data/server/nginx/conf/nginx.confroot@ubuntu:/data/server/nginx# /data/server/nginx/nginx -s reload 命令1234567/data/server/nginx/nginx -t 【检查配置】/data/server/nginx/nginx 【启动命令】/data/server/nginx/nginx -s stop 【停止命令】/data/server/nginx/nginx -s reload 【重启命令：】pid出错时，可以使用这个：/data/server/nginx/nginx -c /data/server/nginx/conf/nginx.conf nginx 官网 nginx 官网下载 nginx 官网linux安装","tags":[]},{"title":"linux ubuntu jenkins","date":"2018-02-17T03:06:40.377Z","path":"2018/02/17/ubuntu/linux_ubuntu_jenkins/","text":"下载war 包第一种安装方式：前提：系统中必须安装好jdk，我的 jdk 是1.8 将下载好的war包放到linux中；切换到 jenkins.war 存放目录，输入命令： java -jar jenkins.war 然后在浏览器中输入localhost:8080,就可以打开Jenkins 这种方式安装好后命令窗口会一直保持打开状态，不太实用； 第二种安装方式，在 tomcat 中启动 不管用那种方法，安装后登录时空白，现在没有时间弄了，有知道的请留言 安装12345678wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'sudo apt-get updatesudo apt-get install jenkins如果是升级，直接使用一下命令sudo apt-get updatesudo apt-get install jenkins 卸载12345678910//服务sudo apt-get remove jenkins//安装包，注意这里如果不是ubuntu那就yumsudo apt-get remove --auto-remove jenkins//配置和数据sudo apt-get purge jenkinssudo apt-get purge --auto-remove jenkins","tags":[]},{"title":"linux Ubuntu git","date":"2018-02-13T09:19:02.210Z","path":"2018/02/13/ubuntu/linux_ubuntu_git/","text":"前言：本地: windows7 ip: 192.168.1.105服务器Ubuntu ： Ubuntu 15.10 ip: 192.168.1.113 【cat /etc/issue】 Ubuntu中git安装123git --version 【检测当前环境是否安装git】sudo apt-get install git 【安装git】 新增用户12新增用户(用户名为git_dafei),用于运行git服务，回车后输入密码adduser git_dafei 初始git仓库，12345我在 /home/git_dafei/code ( mkdir -p /home/git_dafei/code 注意创建这个目录后的所有者，权限)这个目录下，使用 git init 这个--bare 选项为它设置一个空的存储库，一般服务器上的 Git 仓库是以 .git 结尾的空仓库git init --bare test.git 开始本地(windows)操作 本地生成公钥,位置 C:\\Users\\Administrator\\.ssh 或者 ~/.ssh1ssh-keygen -t rsa ls ~/.ssh/ 将win用户的公钥(即 id_rsa.pub )添加到服务器上1234 scp ~/.ssh/id_rsa.pub git_dafei@192.168.1.113:/home/git_dafei/ [扩展:使用ssh端口 ] scp -P 22 ~/.ssh/id_rsa.pub git_dafei@192.168.1.113:/home/git_dafei/ 将本地用户的公钥添加到认证文件中1234cd /home/git_dafeimkdir .sshtouch authorized_keys 【在 .ssh中创建 】cat id_rsa.pub &gt;&gt; .ssh/authorized_keys [如果没有 authorized_keys 请创建 touch authorized_keys 修改文件所有者为 git_dafei 用户123456789101112131415161718chown -R git_dafei:git_dafei /home/git_dafeichmod 755 /home/git_dafei/ # 1. 用户git_dafei目录755权限chmod 700 /home/git_dafei/.ssh # 2. .ssh目录700权限chmod 600 /home/git_dafei/.ssh/authorized_keys # 3. authorized_keys 600权限 ////////////////////效果//////////////////////////drwxr-xr-x 2 git_dafei git_dafei 4096 Feb 14 19:39 .ssh 【修改前权限】chmod 700 /home/git_dafei/.sshdrwx------ 2 git_dafei git_dafei 4096 Feb 14 19:39 .ssh 【修改后权限】【修改前权限】：-rw-r--r-- 1 git_dafei git_dafei 401 Feb 14 19:40 /home/git_dafei/.ssh/authorized_keys chmod 600 /home/git_dafei/.ssh/authorized_keys【修改后权限】-rw------- 1 git_dafei git_dafei 401 Feb 14 19:40 /home/git_dafei/.ssh/authorized_keys 修改ssh配置文件12修改ssh配置文件/etc/ssh/sshd_config，取消这行(33行) AuthorizedKeysFile %h/.ssh/authorized_keys 前面的注释修改完重启ssh: service ssh restart 安全123为例安全，禁止 git_dafei 用户 shell登录，需要修改 /etc/passwd将 git_dafei:x:1002:1002:,,,:/home/git_dafei:/bin/bash改为 git_dafei:x:1002:1002:,,,:/home/git_dafei:/usr/bin/git-shell 在win中clone刚才创建的test.git12345克隆的用户有错git clone git_dafei@192.168.1.113:/home/git_dafei/code/test.gitgit clone 上面设置的用户名@服务器ip:/home/git_dafei/code/test.gitgit clone ssh://git_dafei@192.168.1.113:22 /home/git_dafei/code/test.git [指定ssh端口克隆] Ubuntu git官方文档git官方文档","tags":[]},{"title":"linux ubuntu15 redis安装","date":"2018-02-12T09:04:26.148Z","path":"2018/02/12/ubuntu/linux_ubuntu_redis/","text":"redis2种安装方式 安装redis1234sudo apt-get install redis-server 启动redisredis-server 检查redis 进程1ps -aux|grep redis 终端输入：redis-cli 测试redis是否成功 redis 设置密码123456789reids默认是不需要密码的，设置密码sudo vi /etc/redis/redis.conf 在397行： 取消 注释 # requirepass foobared 设置新密码： requirepass redis_pwd_123456 让 reids 远程登录 注释bind，在69行 # bind 127.0.0.1 修改后重启redis1sudo /etc/init.d/redis-server restart 记得使用密码登录奥！！！ 卸载redis1sudo apt-get purge --auto-remove redis-server 2、编译安装下载1234wget http://download.redis.io/releases/redis-4.0.8.tar.gztar -xzvf redis-4.0.8.tar.gz -C /data/server/cd redis-4.0.8/make 启动redismake完后 redis-4.0.8目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下，下面启动redis服务. 12cd src/./redis-server redis设置密码123456789reids默认是不需要密码的，设置密码vi redis.conf 在500行： 取消 注释 # requirepass foobared 设置新密码： requirepass redis_pwd_123456让 reids 远程登录 注释bind，在69行 # bind 127.0.0.1 修改后启动redis1src/redis-server ./redis.conf 【指定配置文件启动】 设置 reids 后台启动12345678910111213141516171819vi redis.conf 在136行把 daemonize no 改成 daemonize yes修改完重启redis：src/redis-server ./redis.conf 【指定配置文件启动】/data/server/redis-4.0.8/src/redis-server ./redis.conf 【指定配置文件启动】/data/server/redis-4.0.8/src/redis-server /data/server/redis-4.0.8/redis.conf 【指定配置文件启动】后台启动后关闭命令：./redis-cli -h 127.0.0.1 -a redis_pwd_123456 -p 6379 shutdown/data/server/redis-4.0.8/src/redis-cli -h 127.0.0.1 -a redis_pwd_123456 -p 6379 shutdown指定密码登录：/data/server/redis-4.0.8/src/redis-cli -a redis_pwd_123456./redis-cli -a redis_pwd_123456测试数据：set key1 \"hello world\"get key1 redis官网下载地址 redis官网安装","tags":[]},{"title":"linux Ubuntu ssh","date":"2018-02-12T06:25:27.548Z","path":"2018/02/12/ubuntu/linux_ubuntu_ssh/","text":"安装客户端1sudo apt install openssh-client 安装服务端1sudo apt install openssh-server 配置1查看手册 man sshd_config 在编辑配置文件之前，您应该生成一个原始文件的拷贝并对其写保护，以便您可以参考原始文件并在必要时重用它。拷贝 /etc/ssh/sshd_config 文件并对其写保护可以通过在终端提示符后运行下列命令 12sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.originalsudo chmod a-w /etc/ssh/sshd_config.original 要设置您 OpenSSH 在 TCP 2222 端口而不是缺省的 TCP 20 端口监听，可以如下使用改变 Port 语句： Port 2222 要让 sshd 允许基于公钥登录证书，可以简单添加或修改该行语句： PubkeyAuthentication yes If the line is already present, then ensure it is not commented out. 要使您的 OpenSSH 服务器显示 /etc/issue.net 文件的内容以作为预登录 Banner，只需简单地将下行添加或修改： Banner /etc/issue.net 在 /etc/ssh/sshd_config 文件中。 在修改 /etc/ssh/sshd_config 文件之后，保存该文件并重启 sshd 服务器应用程序以使之生效。可以在终端提示符后使用下列命令： 1sudo systemctl restart sshd.service SSH服务器命令1234567停止服务：sudo /etc/init.d/ssh stop启动服务：sudo /etc/init.d/ssh start重启服务：sudo /etc/init.d/ssh restart登录： ssh 用户名@远程ip demo： ssh dafei@192.168.1.82 ssh -p 22 dafei@192.168.1.82 [指定端口登录]断开连接：exit; 如果细心，可能发现远程登录不能用root登录，解决办法： 修改 /etc/ssh/sshd_config 配置文件 1234526 # Authentication:27 LoginGraceTime 12028 # PermitRootLogin prohibit-password 【找到这一行注释掉】29 PermitRootLogin yes 【改为yes】30 StrictModes yes 其他证书登录、无密码登录这里不在写，有需要的自己网上找资料；这个也是修改 sshd_config 文件 扩展： Ubuntu ssh","tags":[]},{"title":"Linux ubuntu docker","date":"2018-02-08T02:04:31.865Z","path":"2018/02/08/ubuntu/linux_ubuntu_docker/","text":"Linux ubuntu docker前提条件 Docker要求Ubuntu系统内核版本高于3.10，查看内核版本 1uname -r 系统版本没有问题，docker安装一直包这错。试一下docker命令，检查镜像信息 123docker images现在Ubuntu系统提示安装docker命令，我们执行apt-get install docker.io 查看docker版本123docker versionsudo docker run hello-world 【确认docker是否安装成功】 ———————–到这里docker已经安装完成———————— 安装docker-compose12345678910111213141516171819202122232425sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composecurl -L https://raw.githubusercontent.com/docker/compose/1.8.0/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose 【bash 补全命令】////////如果出现超时，加上2个参数： ///////////--connect-timeout 100000 -m 1000000-m为数据最大传输时间curl -L \"https://github.com/docker/compose/releases/download/1.9.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose --connect-timeout 100000 -m 1000000 ////////////////////////////////////////////docker-compose -version 【检测 docker-compose 版本】sudo rm /usr/local/bin/docker-compose 【卸载docker-compose】-----------------------------------------------docker-compose 命令docker-compose ps 查看容器运行状态docker-compose restart #重启所有容器docker-compose restart App1 #重启App1docker-compose stop #停止所有容器docker-compose rm #删除所有容器docker-compose stop App1 #停止App1docker-compose -f docker-compose.yml down 停止并删除容器、网络、镜像、数据卷 ———————–到这里docker-compose已经安装完成———————— Docker Compose 搭建 Rails温馨提示： 复制粘贴命令的时候注意别丢信息 创建项目目录12mkdir myappcd myapp 创建 Dockerfile文件，包含以下内容12345678FROM ruby:2.3.3RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejsRUN mkdir /myappWORKDIR /myappCOPY Gemfile /myapp/GemfileCOPY Gemfile.lock /myapp/Gemfile.lockRUN bundle installCOPY . /myapp 创建 Gemfile 文件，包含以下内容12source 'https://rubygems.org'gem 'rails', '5.0.0.1' 创建空的 Gemfile.lock 文件1touch Gemfile.lock 创建一个 docker-compose.yml ，包含以下内容温馨提示：docker-compose.yml 中 version: ‘3’ 改为 version: ‘2’ 12345678910111213version: '2'services: db: image: postgres web: build: . command: bundle exec rails s -p 3000 -b '0.0.0.0' volumes: - .:/myapp ports: - \"3000:3000\" depends_on: - db 接下来执行1docker-compose run web rails new . --force --database=postgresql 查看现在的目录： ls -l 修改权限，重建 Docker 镜像12sudo chown -R $USER:$USER .docker-compose build 修改 config/database.yml 文件如果担心修改错误，可以先备份原文件： cp database.yml database.yml_backup 123456789101112131415161718192021清空 database.yml 文件echo \" \"&gt;database.ymldatabase.yml 文件写入以下内容default: &amp;default adapter: postgresql encoding: unicode host: db username: postgres password: pool: 5development: &lt;&lt;: *default database: myapp_developmenttest: &lt;&lt;: *default database: myapp_test 启动应用1docker-compose up 创建数据库，在另一个终端中，执行1docker-compose run web rake db:create 用浏览器访问 http://localhost:3000 ，你会看到 Rails 的欢迎信息： If you are using Docker Machine, then docker-machine ip MACHINE_VM returns the Docker host IP address, to which you can append the port (&lt;Docker-Host-IP&gt;:3000). Compose and Rail 官方文档","tags":[]},{"title":"ubuntu系统","date":"2018-02-07T02:54:13.969Z","path":"2018/02/07/ubuntu/linux_ubuntu_centos/","text":"虚拟机安装完ubuntu后root没有密码12设置root密码sudo password 虚拟机安装完centos后重新设置root密码12设置root密码passwd 用户切换：1234567891011121314sudo su (切换到root用户)； su user（user是你自己安装时候的用户名；切换到普通用户）其他命令：修改文件权限： sudo chmod -R 777 文件名安装文件命令： sudo apt-get install 文件名 清空某个文件 echo \"\" &gt;log.log 动态查看内容 tail -f api_v1.log 修改文件权限 sudo chmod -R 777 文件名 安装好系统后，vi不能正常使用方向键和退格键ubuntu中vi在编辑状态下方向键不能用，还有回格键不能删除等我们平时习惯的一些键都不能使用。解决办法：可以安装vim full版本，在full版本下键盘正常，安装好后同样使用vi命令。 12345678910111213141516171819202122232425262728-----------（1）-----一般安装步骤------------------ sudo apt-get remove vim-common sudo apt-get install vim-----------（2）------直接安装vim 报错 packet 不存在、找不到 请换源，参考下面-----------进入/etc/apt/ cd /etc/apt对 sources.list文件进行备份 sudo cp sources.list sources.list.bak删除掉 sources.list 中的内容【命令 echo \"\"&gt;sources.list 】，选择阿里云源 deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse------------（3）换源结束-------------------------------apt-get update 先更新一下现在可以安装vim sudo apt-get install vim","tags":[]},{"title":"数据库账号管理","date":"2018-02-01T07:46:08.453Z","path":"2018/02/01/mysql_DDU_数据库账号/","text":"注意事项 分配数据库账号权限时，请按最小权限原则和业务角色创建账号，并合理分配只读和读写权限。必要时可以把数据库账号和数据库拆分成更小粒度，使每个数据库账号只能访问其业务之内的数据。如果不需要数据库写入操作，请分配只读权限 为保障数据库的安全，请将数据库账号的密码设置为强密码，并定期更换。","tags":[]},{"title":"linux-DDU 创建文件和目录的副本  -cp","date":"2018-01-29T07:31:05.919Z","path":"2018/01/29/ubuntu/linux_DDU_cp/","text":"不带任何参数,运行cpcp最基本命令，拷贝file_3.txt 从一个位置复制到另一个位置 12345ls -all 【递归展示目录本文中会多次用到】----------------------------cp file_3.txt /home/destination_file或者cp /home/soruce_file2/file_3.txt /home/destination_file 拷贝多个文件拷贝多个文件，我们只需将文件名字用空格隔开。或者使用*拷贝所有文件 12cp file_3.txt file_4.txt /home/destination_filecp * /home/destination_file 【拷贝所有文件，注意观察截图，aaa目录没有拷贝成功，稍后解决】 拷贝一个目录-r 或者 -R ，不论目录是否为空都会拷贝 1cp -r aaa/ /home/destination_file 【这就解决上次没有拷贝aaa目录】 创建文件硬链接，而不是拷贝他们拷贝文件意味着你必须使用一些存储空间来储存拷贝的文件。有时候出于某种原因，你可能想要创建“快捷方式”或者链接到文件，而不是拷贝它们。要做到这一点，我们可以使用-l选项。 1cp -l file_3.txt /home/destination_file 创建文件的软连接【符号链接、快捷方式…..】软连接（符号链接）用 -s实现 1cp -s file_3.txt file_44.txt 文件归档使用 -a 选项来归档文件。保留链接和文件属性，递归拷贝目录，相当于下面的d、p、r三个选项组合。 1cp -a * /home/destination_file/ 只拷贝文件属性只拷贝文件属性，不拷贝文件内容，使用 –attributes-only 选项 1cp --attributes-only file_3.txt /home/destination_file/ 显示正在做什么默认情况下，拷贝是不会显示拷贝时发生了什么，我们可以使用 -v选项 1cp -v * /home/destination_file/ 目标文件时间是最新更改，源文件时间老拷贝时，目标文件先存着和源文件同名文件，切目标文件时间是最新更改，使用 -u,不会覆盖最新文件 1cp -vu file_3.txt file_4.txt /home/destination_file/ 使用交互模式交互模式下会询问是否覆盖目标目录下的文件。使用 -i 选项 1cp -i file_3.txt file_4.txt /home/destination_file/ 创建备份文件目标文件中存在与源文件同名文件，使用 -b 选项，备份目标文件，拷贝新文件 1cp -bv * /home/destination_file/ 强制拷贝使用 -f 强制拷贝文件。如果目标文件不能打开，可以用 -f 尝试一下。 1cp -f * /home/destination_file/ 在拷贝之前先删除目标可以用，–remove-destination 选项 实现。这个选项与上面的-f选项形成对照。如果 cp 命令在目标目录下发现同名文件， cp 命令会先删除目标文件，然后再拷贝一份新的。 1cp --remove-destination -v * /home/destination_file/ 其他： 123一般情况下用这个命令 【参数avr】cd /home/www/Downloadscp -avr * /data/www/","tags":[]},{"title":"阿里云CDN上实现https","date":"2018-01-18T03:15:31.841Z","path":"2018/01/18/阿里云CDN上实现https/","text":"SSL证书管理对于静态资源的请求，由于存储在阿里OSS上，并在前端使用了阿里云CDN,因此将相关SSL证书的信息在阿里云CDN上配置一下就ok。 1客户端-------请求（js,img，css）------&gt;CDN----&gt;云存储OSS 从阿里云CA证书服务下载证书 下载解压后得到2个文件： xxx.pem xxx.key 在阿里云CDN管理控制台找到 HTTPS设置点击域名中的配置,然后找到HTTPS设置，修改配置 打开之前下载好的xxx.pem 和 xxx.key ,将里面的内容分别复制到证书对应位置,建议跳转类型设置为默认，保存之后用HTTPS访问你的静态资源，测试一下","tags":[]},{"title":"计算两点之间的距离","date":"2017-12-30T13:50:12.635Z","path":"2017/12/30/mysql_DDU_计算两点之间的距离/","text":"MySql查询执行流程图12345发送语句查询缓存查询优化执行查询返回结果 计算两点之间的距离一个典型的例子是计算以某个点为中心，一定半径内的所有点。典型的实际案例可能是查找某个附近所有可以出租的房子，或者社交网站中“匹配”附近的用户，等等。假设我们有如下表：123456789CREATE TABLE `locations` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(30) DEFAULT NULL, `lat` float NOT NULL, `lon` float NOT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1;INSERT INTO locations(name,lat,lon)VALUES(\"Charlottesville,Virginia\",38.03,-78.48),(\"Chicago,Illinois\",41.85,-87.65),(\"Mashington,DC\",38.89,-77.04) 这里经度和纬度的单位是“度”，通常我们假设地球是圆的，然后使用两点所在最大圆（半正矢）公式来计算两点之间的距离。现在有坐标latA和lonA、latB和lonB，那么点A和点B的距离计算公式如下： 1234AcOS(COS(latA)*COS(latB)*COS(lonA-lonB)+SIN(1atA)*SIN(LatB)) 计算出的结果是一个弧度，如果要将结果的单位转换成英里或者千米，则需要乘以地球的半径，也就是3959英里或者6371千米。假设我们需要找出所有距离Baron所居住的地方Charlottesville100英里以内的点，那么我们需要将经纬度带入上面的计算公式： 12345678910111213SELECT * FROM locations WHERE 3979*ACOS(COS(radians(lat))*COS(radians(38.03))*COS(radians(lon)-radians(-78.48))+SIN(radians(lat))*SIN(radians(38.03)))&lt;=100;+----+--------------------------+-------+--------+| id | name | lat | lon |+----+--------------------------+-------+--------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 || 3 | Mashington,DC | 38.89 | -77.04 |+----+--------------------------+-------+--------+ 这类查询不仅无法使用索引，而且还会非常消耗CPU时间，给服务器带来很大的压力，而且我们还得反复计算这个。那要怎样优化呢?这个设计中有几个地方可以微优化。第一，看看是否真的需要这么精确的计算。其实这种算法已经有很多不精确的地方了，如下所示：两个地方之间的直线距离可能是100英里，但实际上它们之间的行走距离很可能不是这个值。无论你们在哪两个地方，要到达彼此位置的行走距离多半都不是直线距离，路上可能需要绕很多的弯，比如说如果有一条河，需要绕远走到一个有桥的地方。所以，这里计算的绝对距离只是一个参考值。 如果我们根据邮政编码来确定某个人所在的地区，再根据这个地区的中心位置计算他和别人的距离，那么这本身就是一个估算。Baron 住在Charlottesville，不过不是在中心地区，他对华盛顿物理位置的中心也不感兴趣。所以，通常并不需要精确计算，很多应用如果这样计算，多半是认真过头了。这类似于有效数字的估算：计算结果的精度永远都不会比测量的值更高。（换句话说，“错进，错出”。） 如果不需要太高的精度，那么我们认为地球是圆的应该也没什么问题，其实准确的说应该是椭圆。根据毕达哥拉斯定理，做些三角函数变换，我们可以把上面的公式转换得更简单，只需要做些求和、乘积以及平方根运算，就可以得出一个点是否在另一个点多少英里之内。益习等等，为什么就到这为止？我们是否真需要计算一个圆周呢？为什么不直接使用一个正方形代替?边长为200英里的正方形，一个顶点到中心的距离大概是141英里，这和实际计算的100英里相差得并不是那么远。那我们根据正方形公式来计算弧度为0.0253（100英里）的中心到边长的距离： 12345678910SELECT * FROM locations WHERE lat BETWEEN 38.03 - DEGREES(0.0253) AND 38.03 + DEGREES(0.0253)AND lon BETWEEN -78.48 - DEGREES(0.0253) AND -78.48 + DEGREES(0.0253);+----+--------------------------+-------+--------+| id | name | lat | lon |+----+--------------------------+-------+--------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 || 3 | Mashington,DC | 38.89 | -77.04 |+----+--------------------------+-------+--------+ 现在我们看看如何使用索引来优化这个查询。简单地，我们可以增加索引（lat,lon)或者（lon,lat)。不过这样做效果并不会很好。正如我们所知，MySQL5.5和之前的版本，如果第一列是范围查询的话，就无法使用素引后面的列了。因为两个列都是范围的，所以这里只能使用索引的一个列（BETMEEN等效于一个大于和一个小于）。我们再次想起了通常使用的IN（）优化。我们先新增两个列，用来存储坐标的近似值FLOOR()，然后在查询中使用IN（）将所有点的整数值都放到列表中。下面是我们需要新增的列和索引： 12345678ALTER TABLE locations ADD lat_floor INT NOT NULL DEFAULT 0, ADD lon_floor INT NOT NULL DEFAULT 0, ADD KEY (lat_floor,lon_floor);-----------------------------------------UPDATE locationsSET lat_floor = FLOOR(lat),lon_floor=FLOOR(lon); 现在我们可以根据坐标的一定范围的近似值来搜索了，这个近似值包括最小值和最大值，地理上分别对应的是南北。下面的查询为我们只展示了如何查某个范围的所有点：数值需要在应用程序中计算而不是MySQL中： 12345678910SELECT FLOOR(38.03 - DEGREES(0.0253))AS lat_1b,CEILING( 38.03 + DEGREES(0.0253))AS lat_lub,FLOOR(-78.48 - DEGREES(0.0253))AS 1on_1b,CEILING(-78.48 + DEGREES(0.0253))AS 1on_ub;------------------------------------------------------+--------+---------+--------+--------+| lat_1b | lat_lub | 1on_1b | 1on_ub |+--------+---------+--------+--------+| 36 | 40 | -80 | -77 |+--------+---------+--------+--------+ 现在我们就可以生成IN（）列表中的整数了，也就是前面计算的地板和天花板数值之间的数字。下面是加上WHERE条件的完整查询：12345678910111213现在我们就可以生成IN（）列表中的整数了，也就是前面计算的地板和天花板数值之间的数字。下面是加上WHERE条件的完整查询：SELECT * FROM locationsWHERE lat BETWEEN 38.03-DEGREES(0.0253)AND 38.03 + DEGREES(0.0253)AND lon BETWEEN-78.48-DEGREES(0.0253)AND-78.48 +DEGREES(0.0253)AND lat_floor IN(36,37,38,39,40)AND lon_floor IN(-80,-79,-78,-77);+----+--------------------------+-------+--------+-----------+-----------+| id | name | lat | lon | lat_floor | lon_floor |+----+--------------------------+-------+--------+-----------+-----------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 | 38 | -79 || 3 | Mashington,DC | 38.89 | -77.04 | 38 | -78 |+----+--------------------------+-------+--------+-----------+-----------+ 使用近似值会让我们的计算结果有些偏差，所以我们还需要一些额外的条件剔除在正方形之外的点。这和前面使用CRC32做哈希索引类似：先建一个索引帮我们过滤出近似值，再使用精确条件匹配所有的记录并移除不满足条件的记录。事实上，到这时我们就无须根据正方形的近似来过滤数据了，我们可以使用最大圆公式或者毕达哥拉斯定理来计算： 123456789101112131415SELECT * FROM locationsWHERE lat_floor IN(36,37,38,39,40)AND lon_floor IN(-80,-79,-78,-77)AND 3979*ACOS(COS(radians(lat))*COS(radians(38.03))*COS(radians(lon)-radians(-78.48))+SIN(radians(lat))*SIN(radians(38.03)))&lt;=100;----------------------------------------------+----+--------------------------+-------+--------+-----------+-----------+| id | name | lat | lon | lat_floor | lon_floor |+----+--------------------------+-------+--------+-----------+-----------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 | 38 | -79 || 3 | Mashington,DC | 38.89 | -77.04 | 38 | -78 |+----+--------------------------+-------+--------+-----------+-----------+ 这时计算精度再次回到前面——使用一个精确的圆周——不过，现在的做法更快。只要能够高效地过滤掉大部分的点，例如使用近似整数和索引，之后再做精确数学计算的代价并不大。只是不要直接使用大圆周的算法，否则速度会很慢。 Sphinx有很多内置的地理信息搜索功能，比MySQL实现要好很多。如果正在考虑使用MyISAM的GIS函数，并使用上面的技巧来计算，那么你需要记住：这样做效果并不会很好，MyISAM本身也并不适合大数据量、高并发的应用，另外MyISAM本身还有一些弱点，如数据文件崩溃、表级锁等。 回顾一下上面的案例，我们采用了下面这些常用的优化策略：·尽量少做事，可能的话尽量不做事。这个案例中就不要对所有的点计算大圆周公式；先使用简单的方案过滤大多数数据，然后再到过滤出来的更小的集合上使用复杂的公式运算。 快速地完成事情。确保在你的设计中尽可能地让查询都用上合适的索引，使用近似计算（例如本案例中，认为地球是平的，使用一个正方形来近似圆周）来避免复杂的计算。 需要的时候，尽可能让应用程序完成一些计算。例如本案例中，在应用程序中计算所有的三角函数。","tags":[]},{"title":"linux-DDU 移动或重命名文件/目录 -mv","date":"2017-12-19T02:09:17.291Z","path":"2017/12/19/ubuntu/linux_DDU_mv/","text":"移动文件移动文件时需要注意的是文件的源地址和目标地址必须不同。这里有个例子，想要将file_1.txt文件从当前目录移动到其它目录，以/home/destination_file为例，语法应该如下： 1mv file_1.txt /home/destination_file/ 移动多个文件如果想一次移动多个文件，我们可以将他们放在一行并用空格分开。 123mv file_2.txt file_3.txt file_4.txt /home/destination_file/或者mv file_&#123;2,3,4&#125;.txt /home/destination_file/ 如果你的文件夹有规律可循那么你就可以使用通配符，比如，为了移除所有以.txt为扩展名的文件夹，我们可以使用下面的命令： 1mv *.txt /home/destination_file/ 移动目录不同于复制命令，用mv命令移动目录相当于直接。移动目录你可以使用不带选项的mv命令。 1mv /soruce_file/ /home/destination_file/ 重命名文件或目录我们也用mv命令来重命名文件或目录，不过目标位置必须相同才可以。然后文件名字必须不同。假定我们当前做所在目录为/home/soruce_file 123mv file_1.txt file_new1.txt如果是绝对路径，应该像下面这样：mv /home/soruce_file/file_2.txt /home/soruce_file/file_new2.txt 重命名目录12上一段的规则同样适用于目录。mv /home/soruce_file/ /home/soruce_file2/ 打印移动信息当你移动或重命名一大堆文件或目录时，你可能会想在不去目标位置去查看的情况下知道自己的命令是否成功地执行了。这就用到-v选项了。 1mv -v /home/soruce_file2/*.txt /home/destination_file/ 使用交互模式当你将文件移动到其他位置，而那个位置恰好有同样的文件，这时mv命令会覆盖掉原来的文件，对于mv的这一行为一般不会有什么提示。如果想产生一个关于覆盖文件的提示，我们可以使用-i选项。 1mv -i /home/soruce_file2/file_3.txt /home/destination_file/ 这个提示会让我们知道目标位置处file_3.txt的存在。如果我们按y键，那么那个文件将会被删除，否则不会 使用更新选项-i 选项会提示我们关于覆盖文件的提示，而 -u 则只在源文件比目标文件新时才执行更新，如果目标文件比源文件新，则不会执行。让我们看一看下面的例子： 1mv -uv /home/soruce_file2/*.txt /home/destination_file/ 不要覆盖任何已存在的文件如果-i选项询问我们是否覆盖文件，那么-n选项将不会允许我么覆盖任何已存在的文件， 1mv -vn /home/soruce_file2/file_new_time2.txt /home/destination_file/ 复制时创建备份默认情况下，移动文件将会覆盖已存在的目标文件。但是如果我们移动错了文件而目标文件已经被新的文件覆盖了，这时应该怎么办才好呢？-b选项可以办到，该选项会在新文件覆盖旧文件时将旧文件做备份。 1mv -bv /home/soruce_file2/file_new_time2.txt /home/destination_file/ 无条件覆盖已经存在的文件覆盖已经存在的文件或目录，使用-f选项。如果同时指定了 -f 选项和 -i 或 -n 选项，则 -f 选项会覆盖它们——即不进行任何提示而覆盖。所以在使用此参数的时候，你要保持头脑清醒，知道自己在做什么。 1mv -f /home/soruce_file2/file_new_time2.txt /home/destination_file/ 总结移动文件和目录命令是Linux系统的基本命令。通常你可以通过man mv 或者 mv –help显示mv的手册页以了解更多详细信息。","tags":[]},{"title":"YII2搭建后台并实现rbac权限控制","date":"2017-12-08T05:22:48.734Z","path":"2017/12/08/Yii2搭建后台并实现rbac权限控/","text":"安装Yii2参考官网安装文档yiiframeworkyiichina 配置数据库1234567891011创建数据库： create database yii2advanced default charset utf8;修改common/config/main-local.php数据库配置 'db' =&gt; [ 'class' =&gt; 'yii\\db\\Connection', 'dsn' =&gt; 'mysql:host=localhost;dbname=yii2advanced', 'username' =&gt; 'root', 'password' =&gt; 'root', 'charset' =&gt; 'utf8', ], 使用composer安装yii2-admin1234composer require mdmsoft/yii2-admin \"~2.0\"!!!温馨提示：建议安装 1.0 版本不安装 2.0 版本!!!composer require mdmsoft/yii2-admin \"~1.0\" 配置yii2-admin运行环境123456789101112131415161718192021222324权限控制在后台，所以在 backend/config/main.php 中配置以下内容：return [ 'modules' =&gt; [ 'admin' =&gt; [ 'class' =&gt; 'mdm\\admin\\Module', 'layout' =&gt; 'left-menu',//yii2-admin的导航菜单 ] ... ], ... 'components' =&gt; [ ... 'authManager' =&gt; [ 'class' =&gt; 'yii\\rbac\\DbManager', // 使用数据库管理配置文件 ] ], 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ 'site/*',//允许访问的节点，可自行添加 'admin/*',//允许所有人访问admin节点及其子节点 ] ],]; 创建数据表123456789101112131415161718php yii migrate --migrationPath=@mdm/admin/migrations执行sql：（自带的rbac） 修改配置文件console/config/main-local.phpreturn [ 'bootstrap' =&gt; ['gii'], 'modules' =&gt; [ 'gii' =&gt; 'yii\\gii\\Module', ], 'components' =&gt; [ \"authManager\" =&gt; [ \"class\" =&gt; 'yii\\rbac\\DbManager', \"defaultRoles\" =&gt; [\"guest\"], ], ],];cd到advance目录下面执行yii migrate --migrationPath=@yii/rbac/migrations 中文显示123456789101112131415161718192021222324在 common\\config\\main.php 中配置return [ 'language' =&gt; 'zh-CN', //中文显示 'aliases' =&gt; [ '@bower' =&gt; '@vendor/bower-asset', '@npm' =&gt; '@vendor/npm-asset', ], 'vendorPath' =&gt; dirname(dirname(__DIR__)) . '/vendor', 'components' =&gt; [ 'cache' =&gt; [ 'class' =&gt; 'yii\\caching\\FileCache', ], ],];现在可以查看后台：&lt;Your domain name&gt;/index.php?r=admin/user&lt;Your domain name&gt;/index.php?r=admin&lt;Your domain name&gt;/index.php?r=admin/route&lt;Your domain name&gt;/index.php?r=admin/permission&lt;Your domain name&gt;/index.php?r=admin/menu&lt;Your domain name&gt;/index.php?r=admin/role&lt;Your domain name&gt;/index.php?r=admin/assignment 配置授权demo12345678910111213141516以一个自定义的节点books为例，节点books下共有index 图书列表，view 查看图书，create创建图书，update 更新图书，delete 删除图书这个5个节点，，可以通过gii生成这些代码。配置目标：未登录用户仅能访问index节点一般用户能访问index，view，create三个节点管理员能访问所有节点---------------------------在 backend/config/main.php 中修改配置以下内容： 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 \"*\"//不配置这个是访问不到gii，使用完记得修改回来，否则权限会出问题 ] ], 添加可分配权限列表在路由列表中，添加book各个节点路由由表添加至右侧可分配路由列表中，如下: 在权限列表=》新增权限，填好后提交，然后填的路由规则即可，如下： 添加角色并分配权限 分配角色手动注册用户，我这里注册admin和test进行测试。其中admin为管理员，test为一般用户 ！！！测试权限之前12345678910！！！ 测试权限之前，把这里注释掉在 backend/config/main.php 中修改配置以下内容： 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 //\"*\"//把这个注释掉！！！ ] ], 开始测试12345678910111213141516171819201、以管理员身份登录时，可以进行所有操作。ok2、如果不登录，在访问book首页的时候会跳转到登录页面。预期结果是未登录时能访问book首页，就是说当前系统默认不认可我们配置给未登录用户的权限。有2中办法第一种 在 backend/config/main.php 中加一行指定默认规则的代码即可，如下：'authManager'=&gt; [ 'class' =&gt; 'yii\\rbac\\DbManager', 'defaultRoles' =&gt; ['未登录用户'],//添加此行代码，指定默认规则为 '未登录用户'],或者在 backend/config/main.php 修改为： 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 //\"*\"//不配置这个是访问不到gii，使用完记得修改回来，否则权限会出问题 \"book/index\",//未登录用户也可以访问图书列表 ] ], …… 安装yii2 AdminLTE后台主题123composer require dmstr/yii2-adminlte-asset \"^2.1\"安装过程中可能需要输入github的token 引入主题123456789101112131415161718192021方式一：(建议使用这种方式)复制整个vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app目录下的layouts目录和site目录到backend/views，覆盖原始文件。方式二：'components' =&gt; [ 'view' =&gt; [ 'theme' =&gt; [ 'pathMap' =&gt; [ '@app/views' =&gt; '@vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app' ], ], ],],现在可以查看后台：&lt;Your domain name&gt;/index.php?r=admin%2Fuser！！！如果访问权限相关的路径，如/admin/route/index并不是上面看到的样式，请将配置文件中的modules数组中配置的layouts的值删掉即可。如下： 'admin' =&gt; [ 'class' =&gt; 'mdm\\admin\\Module', //'layout' =&gt; 'left-menu',//yii2-admin的导航菜单 ] 配置数据库，登录123456789101112131415161718192021222324251、修改common/config/main-local.php数据库配置 'db' =&gt; [ 'class' =&gt; 'yii\\db\\Connection', 'dsn' =&gt; 'mysql:host=localhost;dbname=yii2advanced', 'username' =&gt; 'root', 'password' =&gt; 'root', 'charset' =&gt; 'utf8', ],2、注册后台账户，登录 3、在 common\\config\\main.php 中配置return [ 'language' =&gt; 'zh-CN', //中文显示 'aliases' =&gt; [ '@bower' =&gt; '@vendor/bower-asset', '@npm' =&gt; '@vendor/npm-asset', ], 'vendorPath' =&gt; dirname(dirname(__DIR__)) . '/vendor', 'components' =&gt; [ 'cache' =&gt; [ 'class' =&gt; 'yii\\caching\\FileCache', ], ],]; 配置简短路由123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051在 backend/config/main.php文件的compontents加上下面的配置\"urlManager\" =&gt; [ //用于表明urlManager是否启用URL美化功能，在Yii1.1中称为path格式URL， // Yii2.0中改称美化。 // 默认不启用。但实际使用中，特别是产品环境，一般都会启用。 \"enablePrettyUrl\" =&gt; true, // 是否启用严格解析，如启用严格解析，要求当前请求应至少匹配1个路由规则， // 否则认为是无效路由。 // 这个选项仅在 enablePrettyUrl 启用后才有效。 \"enableStrictParsing\" =&gt; false, // 是否在URL中显示入口脚本。是对美化功能的进一步补充。 \"showScriptName\" =&gt; false, // 指定续接在URL后面的一个后缀，如 .html 之类的。仅在 enablePrettyUrl 启用时有效。 \"suffix\" =&gt; \"\", \"rules\" =&gt; [ \"&lt;controller:\\w+&gt;/&lt;id:\\d+&gt;\"=&gt;\"&lt;controller&gt;/view\", \"&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;\"=&gt;\"&lt;controller&gt;/&lt;action&gt;\" ],],配置web serverApache作为服务器，在应用的目录 backend/web下面创建.htaccess文件并添加如下内容：Options +FollowSymLinksIndexIgnore */*RewriteEngine on# if a directory or a file exists, use it directlyRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-d# otherwise forward it to index.phpRewriteRule . index.phpnginx用户，修改server部分，如下：server &#123; listen 80; server_name yourdomain; root yourdirectory/backend/web; index index.php index.html; charset utf-8; location / &#123; index index.php; if (!-e $request_filename) &#123; rewrite ^(.*)$ /index.php/$1 last; break; &#125; &#125; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125;&#125; 启动更多分配路由我们先访问路由页面 /admin/route ，尽可能的把左侧的全部选中，然后移动到右侧，并记得给当前用户分配相关的可访问权限。 添加菜单1234567891011121314访问菜单列表 admin/menu 点击添加菜单admin/menu/create按钮。&gt; 如果这个时候你没有权限访问了，需要在配置文件（backend/config/main.php）的 as access数组暂时允许当前用户访问任意权限，并在我们添加完权限的时候去掉as access的设置，切记。 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 \"*\"//不配置这个是访问不到gii，使用完记得修改回来，否则权限会出问题 //\"book/index\",//未登录用户也可以访问图书列表 ] ], ？？？？？？？？？父级一直添加不上？？？先手动修改数据库？？？？最后解决这个问题？？？？ 添加界面如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364一、例如添加一级菜单\"权限管理\"，按照如下填写：名称：权限管理父级名称：不填路由：/admin/default/index排序：1数据：暂不填写二、添加一个二级菜单\"角色列表\"，如下：名称：角色列表父级名称：权限管理路由：/admin/role/index排序：2数据：暂不填写三、添加一个二级菜单\"权限列表\"，如下：名称：权限列表父级名称：权限管理路由：/admin/permission/index排序：3数据：暂不填写四、添加一个二级菜单\"路由列表\"，如下：名称：路由列表父级名称：权限管理路由：/admin/route/index排序：4数据：暂不填写五、添加一个二级菜单\"规则管理\"，如下：名称：规则管理父级名称：权限管理路由：/admin/rule/index排序：5数据：暂不填写六、添加一个二级菜单\"分配用户到角色\"，如下：名称：分配用户到角色父级名称：权限管理路由：/admin/assignment/index排序：6数据：暂不填写七、添加一个二级菜单\"菜单列表\"，如下：名称：菜单列表父级名称：权限管理路由：/admin/menu/index排序：7数据：暂不填写八、添加一个二级菜单\"用户列表\"，如下：名称：用户列表父级名称：权限管理路由：/admin/user/index排序：8数据：暂不填写九、添加一个二级菜单\"图书列表\"，如下：名称：图书列表父级名称：权限管理路由：/book/index排序：9数据：暂不填写具体如下 左侧菜单展示12345678910111213141516171819202122232425262728293031323334修改&lt;project&gt;/backend/views/layouts/left.php文件（保证这个文件是从&lt;project&gt;/vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app/views/layouts/left.php地方复制过来的，否则去修改源文件），添加如下代码：侧菜单上把权限的栏目加上,代码可直接复制，放置于 &lt;section class=\"sidebar\"&gt;&lt;/section&gt;标签内即可 //第一种显示方式 $callback = function($menu)&#123; return [ 'label' =&gt; $menu['name'], 'url' =&gt; [$menu['route']], 'icon' =&gt; $menu['data'], 'items' =&gt; $menu['children'] ]; &#125;; use mdm\\admin\\components\\MenuHelper; $items = MenuHelper::getAssignedMenu(Yii::$app-&gt;user-&gt;id, null, $callback, true); echo dmstr\\widgets\\Menu::widget([ 'options' =&gt; ['class' =&gt; 'sidebar-menu', 'data-widget'=&gt; 'tree'], 'items' =&gt; $items ]); //第二种显示方式 //use mdm\\admin\\components\\MenuHelper; use yii\\bootstrap\\Nav; echo Nav::widget( [ //\"encodeLabels\" =&gt; false, \"options\" =&gt; [\"class\" =&gt; \"sidebar-menu\", 'data-widget'=&gt; 'tree'], \"items\" =&gt; MenuHelper::getAssignedMenu(Yii::$app-&gt;user-&gt;id), ] ); 整合完毕后存在问题（原因是 yii2-admin 2.0版本）一、菜单小图标并控制菜单显示：我们在创建菜单的时候，没填写的”数据”一栏，我们填写 Font Awesome 从这里面选择图标，例如在品牌图标中 使用这个是 fa fa-android ；我们在 菜单“数据”一栏应该写 android，如图： 二、菜单列表中父级一直添加不上 ，父级名意图提示样式会跑到最左侧，路由意图样式会跑到最左侧（yii2-admin 版本1.0没有此问题） 解决办法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114一、解决父级添加不上：修改&lt;project&gt;/vendor/mdmsoft/yii2-admin/models/Menu.php中原来： public function rules() &#123; return [ [['name'], 'required'], [['parent_name'], 'in', 'range' =&gt; static::find()-&gt;select(['name'])-&gt;column(), 'message' =&gt; 'Menu \"&#123;value&#125;\" not found.'], [['parent', 'route', 'data', 'order'], 'default'], [['parent'], 'filterParent', 'when' =&gt; function() &#123; return !$this-&gt;isNewRecord; &#125;], [['order'], 'integer'], [['route'], 'in', 'range' =&gt; static::getSavedRoutes(), 'message' =&gt; 'Route \"&#123;value&#125;\" not found.'] ]; &#125; 修改后： public function rules() &#123; return [ [['name'], 'required'], [['parent_name'], 'in', 'range' =&gt; static::find()-&gt;select(['name'])-&gt;column(), 'message' =&gt; 'Menu \"&#123;value&#125;\" not found.'], [['parent', 'route', 'data', 'order'], 'default'], /*[['parent'], 'filterParent', 'when' =&gt; function() &#123; return !$this-&gt;isNewRecord; &#125;],*/ [['parent_name'], 'filterParent'],//修改此方法 [['order'], 'integer'], [['route'], 'in', 'range' =&gt; static::getSavedRoutes(), 'message' =&gt; 'Route \"&#123;value&#125;\" not found.'] ]; &#125; 原来： public function filterParent() &#123; $parent = $this-&gt;parent; $db = static::getDb(); $query = (new Query)-&gt;select(['parent']) -&gt;from(static::tableName()) -&gt;where('[[id]]=:id'); while ($parent) &#123; if ($this-&gt;id == $parent) &#123; $this-&gt;addError('parent_name', 'Loop detected.'); return; &#125; $parent = $query-&gt;params([':id' =&gt; $parent])-&gt;scalar($db); &#125; &#125; 修改后： public function filterParent() &#123; //修改此方法 $value = $this-&gt;parent_name; $parent = self::findOne(['name' =&gt; $value]); if ($parent) &#123; $id = $this-&gt;id; $parent_id = $parent-&gt;id; while ($parent) &#123; if ($parent-&gt;id == $id) &#123; $this-&gt;addError('parent_name', 'Loop detected.'); return; &#125; $parent = $parent-&gt;menuParent; &#125; $this-&gt;parent = $parent_id; &#125; &#125; 二、解决意图提示样式下载 yiisoft/yii2-juiphp composer.phar require --prefer-dist yiisoft/yii2-jui现在已经可以上试试效果，完全没有问题，如果不想用form中原来的书写方式可以按下面的办法；修改 &lt;project&gt;/vendor/mdmsoft/yii2-admin/views/menu/_form.php中parent_name和route表单：修改之前： &lt;?= $form-&gt;field($model, 'parent_name')-&gt;textInput(['id' =&gt; 'parent_name']) ?&gt; &lt;?= $form-&gt;field($model, 'route')-&gt;textInput(['id' =&gt; 'route']) ?&gt;修改之后： &lt;?= $form-&gt;field($model, 'parent_name')-&gt;widget('yii\\jui\\AutoComplete',[ 'options'=&gt;['class'=&gt;'form-control'], 'clientOptions'=&gt;[ 'source'=&gt; Menu::find()-&gt;select(['name'])-&gt;column() ] ]) ?&gt; &lt;?= $form-&gt;field($model, 'route')-&gt;widget('yii\\jui\\AutoComplete',[ 'options'=&gt;['class'=&gt;'form-control'], 'clientOptions'=&gt;[ 'source'=&gt; Menu::getSavedRoutes() ] ]) ?&gt;三、在 &lt;project&gt;/vendor/mdmsoft/yii2-admin/views/role/_form.php 同样会有样式问题，按照二的步骤修改即可 使用到的时候再改就可以。 修改后的： &lt;?= $form-&gt;field($model, 'ruleName')-&gt;widget('yii\\jui\\AutoComplete', [ 'options' =&gt; [ 'class' =&gt; 'form-control', ], 'clientOptions' =&gt; [ 'source' =&gt; array_keys(Yii::$app-&gt;authManager-&gt;getRules()), ] ]) ?&gt;","tags":[]},{"title":"hexo常用命令笔记","date":"2017-11-30T03:37:25.596Z","path":"2017/11/30/hexo/hexo常用命令笔记/","text":"hexo123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 简写12345hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器1234567hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动123456789hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate --watch #监视文件变动完成后部署两个命令的作用是相同的hexo generate --deployhexo deploy --generatehexo deploy -ghexo server -g 草稿1hexo publish [layout] &lt;title&gt; 模版123456789hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo new [layout] &lt;title&gt;hexo new photo \"My Gallery\"hexo new \"Hello World\" --lang tw 变量 描述 layout 布局 title 标题 date 建立 12345678910title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 暮色匆匆去，音消尘也无模版（Scaffold）hexo new photo \"My Gallery\" 设置文章摘要以上是文章摘要 以下是余下全文 写作12hexo new page &lt;title&gt;hexo new post &lt;title&gt; 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 推送到服务器上123hexo n #写文章hexo g #生成hexo d #部署 #可与hexo g合并为 hexo d -g 报错1.找不到git部署 1ERROR Deployer not found: git 解决方法 1npm install hexo-deployer-git --save 3.部署类型设置githexo 3.0 部署类型不再是github，_config.yml 中修改 123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@***.github.com:***/***.github.io.git branch: master xcodebuild 123xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instancenpm install bcrypt RSS不显示安装RSS插件 1npm install hexo-generator-feed --save 开启RSS功能编辑hexo/_config.yml，添加如下代码： 1rss: /atom.xml #rss地址 默认即可 开启评论1.我使用多说代替自带的评论，在多说 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 short_name 1 在根目录 _config.yml 添加一行 disqus_shortname: jslite 是在多说注册时产生的复制到 themes\\landscape\\layout\\_partial\\article.ejs2 把 1234567&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;&lt;section id=\"comments\"&gt;&lt;div id=\"disqus_thread\"&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=\"//disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/section&gt;&lt;% &#125; %&gt; 改为 1234567891011121314151617181920&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt; &lt;section id=\"comments\"&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=\"ds-thread\" data-thread-key=\"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;\" data-title=\"&lt;%= post.title %&gt;\" data-url=\"&lt;%= page.permalink %&gt;\"&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=\"text/javascript\"&gt; var duoshuoQuery = &#123;short_name:'&lt;%= config.disqus_shortname %&gt;'&#125;; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/section&gt;&lt;% &#125; %&gt; hexo-git-backup12345678910111213141516安装备份插件参考网址： https://github.com/coneycode/hexo-git-backupUpdateif you install with --save, you must remove firstly when you update it.$ npm remove hexo-git-backup$ npm install hexo-git-backup --save--------------------------------------安装主题参考网址： https://github.com/chaooo/hexo-theme-BlueLakegit clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake-------------------------------------生成、部署hexo ghexo dhexo bhexo server -p 5000 【本地查看】 hexo12","tags":[]},{"title":"Hello World","date":"2017-11-30T02:44:53.743Z","path":"2017/11/30/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]