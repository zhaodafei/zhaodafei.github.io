[{"title":"ubuntu -path 环境变量篇 -composer 测试","date":"2018-12-29T08:52:40.501Z","path":"2018/12/29/ubuntu/ubuntu_path环境变量_composer/","text":"源码编译完的包,很多时候在任何目录时访问不到的,这时候需要添加环境变量,或者通过链接的形式,链接到系统默认的PATH目录下的一个,这篇文章就是介绍一下这2中添加环境变量的方式; !!!修改系统环境变量后,要退出当前用户重新登录后才可以看到效果; demo背景,采用composer测试,前提编译安装完php 安装composer1curl -sS https://getcomposer.org/installer | /data/server/php7/bin/php 配置环境变量方法 0112345678#第一种方式,放到系统默认PATH环境变量目录下cp /test/composer.phar /usr/local/bin/composer 或者mv /test/composer.phar /usr/local/bin/composer###扩展,使用 echo $PATH 可以看到当前的环境变量内容,系统默认的环境变量包括:root@ubuntu:/test# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/gamesroot@ubuntu:/test# 配置环境变量方法 02 , 使用 PHP 来测试,系统 centos712345678PHP编译安装后的目录: /data/server/php/binvim /etc/profile#centos中配置PHP环境变量:修改 /etc/profile 配置环境变量PATH=$PATH:/data/server/php/binexport PATH然后执行source /etc/profile 或者 ./profile 使其生效; 执行完后可以通过 echo $PATH 命令查看环境变量 composer官方安装文档","tags":[]},{"title":"-算法02","date":"2018-12-23T10:46:17.797Z","path":"2018/12/23/面试/算法/算法_02/","text":"01). 输出 1 到 100 之间的素数(质数) 用一个数分别去除2到这个数之间的所有数,如果被整除就是素数 123456789101112131415// 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 //分析: 用一个数分别去除2到这个数之间的所有数,如果被整除就是素数for ($i = 1; $i &lt;= 100; $i++) &#123; $k = 0; //判断开始和结束的值是否也是素数 for ($j = 1; $j &lt;= $i; $j++) &#123; if ($i % $j == 0) &#123; $k++; &#125; &#125; if ($k == 2) &#123; echo $i; echo \"&amp;nbsp;&amp;nbsp;\"; &#125;&#125; 02). 打印出所有的 “水仙花数 “1234567891011121314// 打印出所有的 \"水仙花数 \"， 三位的水仙花数共有4个：153，370，371，407// 所谓 \"水仙花数 \"是指一个三位数，其各位数字立方和等于该数本身。// 例如：153是一个 \"水仙花数 \"，因为 1^3 + 5^3+ 3^3 = 153for ($i = 100; $i &lt; 1000; $i++) &#123; $hunderds = floor($i / 100); $tens = floor($i / 10) % 10; $ones = floor($i % 10); $temp = pow($hunderds, 3) + pow($tens, 3) + pow($ones, 3); if ($temp == $i) &#123; echo $i; echo \"&amp;nbsp;\"; &#125;&#125; 03). 正整数分解质因数12345678910111213141516171819// 将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。// 分析:// 对n进行分解质因数，应先找到一个最小的质数k，然后按下述步骤完成：// (1)如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。// (2)如果n&lt;&gt;k，但n能被k整除，则应打印出k的值，并用n除以k的商,作为新的正整数n,重复执行第一步。// (3)如果n不能被k整除，则用k+1作为k的值,重复执行第一步$n = 90;echo $n . '=';for ($i = 2; $i &lt; $n + 1; $i ++)&#123; while ($n % $i == 0 &amp;&amp; $n != $i) &#123; $n /= $i; echo $i . \"*\"; &#125; if ($n == $i) &#123; echo $i; break; &#125;&#125; 04). 三目条件嵌套12345678910// 利用条件运算符的嵌套来完成此题：// 学习成绩&gt; =90分的同学用A表示，// 60-89分之间的用B表示，// 60分以下的用C表示。$score = 89;$grade = $score &gt;= 90 ? 'A' : ($score &gt;= 60 &amp;&amp; $score &lt;= 89 ? 'B' : \"C\");echo $grade; 05). 输入两个正整数m和n，求其最大公约数和最小公倍数123456789101112131415161718192021222324252627282930313233343536// 题目：输入两个正整数m和n，求其最大公约数和最小公倍数// 在循环中，只要除数不等于0，用较大数除以较小的数，// 将小的一个数作为下一轮循环的大数，取得的余数作为下一轮循环的较小的数，// 如此循环直到较小的数的值为0，// 返回较大的数，此数即为最大公约数，最小公倍数为两数之积除以最大公约数。// 这种方法叫做: 辗除法function f($x, $y)&#123; if ($x &lt; $y) &#123; $temp = $x; $x = $y; $y = $temp; &#125; while ($y!=0) &#123; if ($x==$y)&#123; return $x; &#125;else&#123; $k = $x % $y; $x = $y; $y = $k; &#125;; &#125; return $x;&#125;$a = 21; $b = 24;$m = f($a, $b); //最大公约数$n = $a * $b / $m; //最小公倍数echo '最大公约数为: ' . $m.\"&amp;nbsp;&amp;nbsp;\";echo '最小公倍数为: ' . $n.\"&amp;nbsp;&amp;nbsp;\";//------------------------------------------------------------// 方法2, 使用php自带的函数,获取最小公约数$gcd = gmp_gcd(\"21\", \"24\");echo gmp_strval($gcd) . \"\\n\";","tags":[]},{"title":"--login 登录系统后常用命令","date":"2018-12-09T06:39:43.948Z","path":"2018/12/09/ubuntu/linux_ubuntu_df_du/","text":"介绍： 登录新系统后常用命令 uname 打印系统相关信息123456uname uname -a #显示全部信息uname -m #系统类型uname -nuname -runame -s free 查看内存1free -h #以K，M，G为单位，提高信息的可读性 df 显示磁盘分区上的可使用的磁盘空间1df -h #以K，M，G为单位，提高信息的可读性 du : 与地方不同的是,du命令是对文件和目录磁盘使用的空间查看 du 对文件和目录磁盘使用的空间查看12du -h #以K，M，G为单位，提高信息的可读性du -s #显示目录中文件总和 uptime 查看系统运行时间、用户数、负载12345uptimeroot@ubuntu:/home/fei/www# uptime 18:24:03 up 1:52, 1 user, load average: 0.39, 0.69, 0.37root@ubuntu:/home/fei/www# netstat 系统中网络状态信息(端口) [lsof -i:22 ]123456netstat -lntp # 查看所有监听端口 netstat -antp # 查看所有已经建立的连接, 查看端口是否被应用#查看占用端口22的进程netstat -tnlp | grep 22lsof -i:22 ps 当前系统的进程状态123#选项很多,列举2个demops -aux | grep phpps -aux | nginx w 查看活动用户1w crontab 计划任务1crontab -l # 查看当前用户的计划任务服务 top123top 然后按 shift + p ,按照进程处理器占用率排序然后按 Shift + m, 按照进程内存占用率排序","tags":[]},{"title":"vagrant_03 --VirtualBox --硬盘扩容","date":"2018-11-30T09:17:22.583Z","path":"2018/11/30/centos/vagrant_03_VirtualBox_硬盘扩容/","text":"vagrant 初始的 box 硬盘空间只有 10G,安装 mysql8 就不够用 :( ,下面介绍给主硬盘空间扩容, 操作平台 windows7, box[ubuntu18] 添加环境变量为了接下来方便操作在 windows 中添加 virtualbox 的环境变量 [ 因为下面会多次用到 vboxmanage 命令 ] 12!!! 备份要扩容的文件, 或者全部备份!! vbox , vbox-prev 配置文件要备份 记录要扩容的硬盘的原始信息1234567vboxmanage showhdinfo ubuntu-bionic-18.04-cloudimg.vmdk--------------------------------------------------------$ vboxmanage showhdinfo ubuntu-bionic-18.04-cloudimg.vmdkUUID: 5d02ba81-6f7e-4a8e-8e1b-eadbb30d11d4Parent UUID: base..... 开始扩容12345678910111213141516171819202122232425262728#克隆成 vdi 文件vboxmanage clonehd \"ubuntu-bionic-18.04-cloudimg.vmdk\" \"new-ubuntu-bionic-18.04-cloudimg.vdi\" --format vdi#扩容为 30Gvboxmanage modifyhd \"new-ubuntu-bionic-18.04-cloudimg.vdi\" --resize 30720#转化为原来的 vmdk 格式VBoxManage clonehd \"new-ubuntu-bionic-18.04-cloudimg.vdi\" \"new-ubuntu-bionic-18.04-cloudimg.vmdk\" --format vmdk#查看新 vmdk 信息,记录uuid vboxmanage showhdinfo new-ubuntu-bionic-18.04-cloudimg.vmdk$ vboxmanage showhdinfo new-ubuntu-bionic-18.04-cloudimg.vmdkUUID: f6b42381-fde2-43c2-bcab-3e37731caa9aParent UUID: base--------------------------------------------------#[ del,ren 命令只能在 cmd 或 powershell 中执行]#删除需要扩容的 vmdk del ubuntu-bionic-18.04-cloudimg.vmdk#将扩容后的 vmdk 重命名为原来的文件名ren new-ubuntu-bionic-18.04-cloudimg.vmdk ubuntu-bionic-18.04-cloudimg.vmdk--------------------------------------------------D:\\soft_position\\VirtualBox_linux\\ubuntu18_default_1543569229538_92064&gt; del ubuntu-bionic-18.04-cloudimg.vmdkD:\\soft_position\\VirtualBox_linux\\ubuntu18_default_1543569229538_92064&gt; ren new-ubuntu-bionic-18.04-cloudimg.vmdk ubuntu-bionic-18.04-cloudimg.vmdk 修改 配置文件 uuid12345# 手动修改,图形界面修改都可以ubuntu18_default_1543569229538_92064.vboxubuntu18_default_1543569229538_92064.vbox-prev这2个文件中旧的 uuid 5d02ba81-6f7e-4a8e-8e1b-eadbb30d11d4全部替换为新的 uuid f6b42381-fde2-43c2-bcab-3e37731caa9a 扩容成功","tags":[]},{"title":"mysql -sql other","date":"2018-11-26T03:59:00.857Z","path":"2018/11/26/mysql/sql_other/","text":"mysql 简单整理 group by ; group_concat 1234567891011121314151617181920SELECT * FROM student_01 GROUP BY `name`;SELECT *,GROUP_CONCAT(name) FROM student_01 GROUP BY `name`;+----+------+---------+-------+| id | name | kecheng | score |+----+------+---------+-------+| 1 | 张三 | 语文 | 81 || 3 | 李四 | 语文 | 76 || 5 | 王五 | 语文 | 81 |+----+------+---------+-------++----+------+---------+-------+--------------------+| id | name | kecheng | score | GROUP_CONCAT(name) |+----+------+---------+-------+--------------------+| 1 | 张三 | 语文 | 81 | 张三,张三 || 3 | 李四 | 语文 | 76 | 李四,李四 || 5 | 王五 | 语文 | 81 | 王五,王五,王五 |+----+------+---------+-------+--------------------+","tags":[]},{"title":"--redis key 设计技巧","date":"2018-11-17T13:36:50.811Z","path":"2018/11/17/centos/redis_key_设计技巧/","text":"redis key 设计技巧第一段 表名转化为key的前缀,如 book: tag:第二段 放置用于分区 key 的字段—对于的 mysql 中的主键的列名,如 id userid第三段 放置主键的值,如1 2 3 4 a b c第四段,写要储存的列名 123456789101112131415161718192021222324第一段 表名转化为key的前缀,如 book: tag:第二段 放置用于分区 key 的字段---对于的 mysql 中的主键的列名,如 id userid 第三段 放置主键的值,如1 2 3 4 a b c第四段,写要储存的列名用户表 user , 转换为 key-value 存储 +----+----------+----------+-----------+| id | username | password | email |+----+----------+----------+-----------+| 1 | 张三 | 123456 | 1@qwq.com || 2 | 李四 | 123456 | 2@qq.com |+----+----------+----------+-----------+127.0.0.1:6379&gt; set user:id:1:username zhangsan127.0.0.1:6379&gt; set user:id:1:password 123456127.0.0.1:6379&gt; set user:id:1:email 1@qwq.com127.0.0.1:6379&gt; set user:id:2:username lisi127.0.0.1:6379&gt; set user:id:2:password 123456127.0.0.1:6379&gt; set user:id:2:email 2@qq.com127.0.0.1:6379&gt; keys user*127.0.0.1:6379&gt; keys user:id* mysql 弊端1234567891011121314151617181920212223242526272829303132333435#book 表 tags 表DROP TABLE IF EXISTS `book`;CREATE TABLE `book` ( `bookid` int(10) unsigned NOT NULL AUTO_INCREMENT, `title` char(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL, PRIMARY KEY (`bookid`)) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;DROP TABLE IF EXISTS `tags`;CREATE TABLE `tags` ( `tid` int(10) unsigned NOT NULL AUTO_INCREMENT, `bookid` int(11) DEFAULT NULL, `content` char(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL, PRIMARY KEY (`tid`)) ENGINE=MyISAM AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;#------------------- 测试数据 ---------------INSERT INTO `book` VALUES (&apos;5&apos;, &apos;PHP圣经&apos;);INSERT INTO `book` VALUES (&apos;6&apos;, &apos;ruby实战&apos;);INSERT INTO `book` VALUES (&apos;7&apos;, &apos;mysql 运维&apos;);INSERT INTO `book` VALUES (&apos;8&apos;, &apos;ruby服务端编程&apos;);INSERT INTO `tags` VALUES (&apos;10&apos;, &apos;5&apos;, &apos;PHP&apos;);INSERT INTO `tags` VALUES (&apos;11&apos;, &apos;5&apos;, &apos;WEB&apos;);INSERT INTO `tags` VALUES (&apos;13&apos;, &apos;6&apos;, &apos;ruby&apos;);INSERT INTO `tags` VALUES (&apos;14&apos;, &apos;7&apos;, &apos;database&apos;);INSERT INTO `tags` VALUES (&apos;15&apos;, &apos;8&apos;, &apos;ruby&apos;);INSERT INTO `tags` VALUES (&apos;16&apos;, &apos;8&apos;, &apos;server&apos;);INSERT INTO `tags` VALUES (&apos;12&apos;, &apos;6&apos;, &apos;WEB&apos;);# 查询:即有 web 标签又有 PPH 标签,要用连接查询 select t1.bookid from tags as t1 inner join tags as t2 on t1.bookid=t2.bookid where t1.content=&apos;PHP&apos; and t2.content=&apos;WEB&apos;; # 如果在查有其他标签 web php ruby ,关联的又要多了","tags":[]},{"title":"-crontab 定时任务","date":"2018-11-12T02:07:33.809Z","path":"2018/11/12/centos/crontab_定时任务/","text":"crontabcrontab 文件说明,每个用户都会生成一个自己的 crontab 文件,位于 /var/spool/cron 目录下 123456789101112131415161718[root@localhost cron]# cat /etc/crontabSHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed[root@localhost cron]# ls /var/spool/cronroot crontab 命令1234567891011121314151617181920sudo apt-get install cron/sbin/service crond start //启动服务/sbin/service crond stop //关闭服务/sbin/service crond restart //重启服务/sbin/service crond reload //重新载入配置/sbin/service crond status //查看服务状态 systemctl start crond.servicesystemctl stop crond.servicesystemctl restart crond.servicesystemctl reload crond.servicesystemctl status crond.service//-----------------------------------------------crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数crontab -l //列出某个用户cron服务的详细内容crontab -r //删除没个用户的cron服务crontab -e //编辑某个用户的cron服务 Demo123456789101112#每隔一分钟执行一次*/1 * * * * php /crontab_test/index.php#每小时的第一分,执行1 * * * * php /crontab_test/index.php----------------------------------------------#每隔2小时执行一次; 从整点开始计数0 */2 * * * sh /fei/test.sh#每天的第2小时执行一次0 2 * * * sh /fei/test.sh------------------------ !!!注意这种错误写法 ------#每隔一分钟执行一次* */1 * * * sh /fei/test.sh demo test.sh12345678d1=`date +%Y-%m-%d-%H:%M:%S`echo \" $d1. [ 0 */2 * * * sh /fei/test.sh ] \" &gt;&gt; /fei/ccc.txtd1=`date +%Y-%m-%d-%H:%M:%S`echo \" $d1. [ 0 2 * * * sh /fei/test.sh ] \" &gt;&gt; /fei/ccc.txtd1=`date +%Y-%m-%d-%H:%M:%S`echo \" $d1. [ * */1 * * * sh /fei/test.sh ] \" &gt;&gt; /fei/ccc.txt","tags":[]},{"title":"-观察者模式","date":"2018-11-09T12:42:41.392Z","path":"2018/11/09/面试/设计模式/index_04_观察者模式/","text":"当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// ------------PHP 实现观察者模式// php5中提供观察者 observer 与被观察者 subject 的接口// @link http://php.net/manual/zh/class.splsubject.php// @link http://php.net/manual/zh/class.splobjectstorage.phpclass user implements SplSubject &#123; // attach() detach() notify() PHP自带 public function attach(SplObserver $observer) &#123; // TODO: Implement attach() method. $this-&gt;observers-&gt;attach($observer); &#125; public function detach(SplObserver $observer) &#123; // TODO: Implement detach() method. $this-&gt;observers-&gt;detach($observer); &#125; public function notify() &#123; // TODO: Implement notify() method. $this-&gt;observers-&gt;rewind(); while ($this-&gt;observers-&gt;valid()) &#123; $observer = $this-&gt;observers-&gt;current(); $observer-&gt;update($this); // 参数 $this-&gt;observers-&gt;next(); &#125; &#125; //-------------------------------------------- public $lognum; public $hobby; protected $observers = null; public function __construct($hobby) &#123; $this-&gt;lognum = rand(1, 10); $this-&gt;hobby = $hobby; $this-&gt;observers = new SplObjectStorage(); &#125; public function login() &#123; // 操作 session... $this-&gt;notify(); &#125;&#125;class security implements SplObserver&#123; public function update(SplSubject $subject) &#123; // TODO: Implement update() method. if ($subject-&gt;lognum &lt; 3) &#123; echo '这是第 ' . $subject-&gt;lognum . ' 次安全登录 '; &#125;else&#123; echo '这是第' . $subject-&gt;lognum . ' 次安全登录,异常 '; &#125; &#125;&#125;class ad implements SplObserver&#123; public function update(SplSubject $subject) &#123; // TODO: Implement update() method. if ($subject-&gt;hobby == 'sports')&#123; echo ' 台球英锦赛门票预订 '; &#125;else&#123; echo ' 好好学习,天天向上 '; &#125; &#125;&#125;// 实施观察$user = new user('sports');$user-&gt;attach(new security());$user-&gt;attach(new ad());$user-&gt;login();","tags":[]},{"title":"-桥接模式","date":"2018-11-09T12:42:41.392Z","path":"2018/11/09/面试/设计模式/index_06_桥接模式/","text":"将抽象部分与实现部分分离，使它们都可以独立的变化。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// 桥接模式 bridge// 论坛给用户发消息,可以是站内短息,email,手机abstract class info&#123; protected $send = null; public function __construct($send) &#123; $this-&gt;send = $send; &#125; abstract public function msg($content); public function send($to, $content) &#123; $content = $this-&gt;msg($content); $this-&gt;send-&gt;send($to, $content); &#125;&#125;class zn&#123; public function send($to, $content) &#123; echo ' 站内给 ', $to, ' 内容是: ', $content; &#125;&#125;class email&#123; public function send($to, $content) &#123; echo ' email给 ', $to, ' 内容是: ', $content; &#125;&#125;class sms&#123; public function send($to, $content) &#123; echo ' sms给 ', $to, ' 内容是: ', $content; &#125;&#125;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++class commonInfo extends info&#123; public function msg($content) &#123; // TODO: Implement msg() method. return ' 普通 ' . $content; &#125;&#125;class warnInfo extends info&#123; public function msg($content) &#123; // TODO: Implement msg() method. return ' 紧急 ' . $content; &#125;&#125;class dangerInfo extends info&#123; public function msg($content) &#123; // TODO: Implement msg() method. return ' 特急 ' . $content; &#125;&#125;// 用站内发普通消息$commonInfo = new commonInfo(new zn());$commonInfo-&gt;send('小飞飞', 'hello world');echo '&lt;br&gt;';// 用手机发特急信息$dangerInfo = new commonInfo(new sms());$dangerInfo-&gt;send('飞', '这是手机信息');","tags":[]},{"title":"-适配器模式","date":"2018-11-09T12:42:41.392Z","path":"2018/11/09/面试/设计模式/index_05_适配器模式/","text":"将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 123456789101112131415161718192021222324252627282930313233343536373839// 适配器模式 -------- 其实平时一直在使用,没有起个名字, 呵呵呵// 服务器端的代码class weather&#123; public static function show() &#123; $today = ['temperature' =&gt; 25, 'wind' =&gt; 7, 'sun' =&gt; 'sunny']; return serialize($today); &#125;&#125;// ========= 客户端调用 ==========$weather = unserialize(weather::show());echo '温度: ', $weather['temperature'], '&lt;br&gt;';echo '风力: ', $weather['wind'], '&lt;br&gt;';echo '阳光: ', $weather['sun'], '&lt;br&gt;';// 来了一批手机上的 java 客户端,不认识 PHP 的串行化后的字符串,怎么办?// 把服务器端的代码改了?? ---旧的客户端又会受影响???// 增加一个适配器class AdapterWeather extends weather&#123; public static function show() &#123; $today = parent::show(); $today = unserialize($today); $today = json_encode($today); return $today; &#125;&#125;// ===== 客户端调用 ======$todayWeather = AdapterWeather::show();$todayWeather = json_decode($todayWeather, true);echo '温度: ', $weather['temperature'], '&lt;br&gt;';echo '风力: ', $weather['wind'], '&lt;br&gt;';echo '阳光: ', $weather['sun'], '&lt;br&gt;';","tags":[]},{"title":"-工厂方法","date":"2018-11-09T12:42:41.376Z","path":"2018/11/09/面试/设计模式/index_02_工厂方法/","text":"工厂方法定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// 工厂方法interface db&#123; function conn();&#125;// 解决简单工厂中在扩展 其他数据库问题,// 比如新增 oracle 数据库 (开闭原则:对于修改是封闭,对于扩展是开放)interface Factory&#123; function createDB();&#125;//服务端开发(不知道将会被谁调用)class dbmysql implements db&#123; public function conn() &#123; // TODO: Implement conn() method. echo \" 连接上Mysql \"; &#125;&#125;class dbsqlite implements db&#123; public function conn() &#123; // TODO: Implement conn() method. echo \" 连接上了sqlite \"; &#125;&#125;class mysqlFactory implements Factory&#123; function createDB() &#123; // TODO: Implement createDB() method. return new dbmysql(); &#125;&#125;class sqliteFactory implements Factory&#123; function createDB() &#123; // TODO: Implement createDB() method. return new dbsqlite(); &#125;&#125;// ===== 客户端开始 ====$mysql_factory = new mysqlFactory();$mysql_create = $mysql_factory-&gt;createDB();$mysql_create-&gt;conn();$sqlite_factory = new sqliteFactory();$sqlite_create = $sqlite_factory-&gt;createDB();$sqlite_create-&gt;conn();// 新增 oracle 数据库// 现在要在服务器端添加 oracle 类class dboracle implements db&#123; function conn() &#123; // TODO: Implement conn() method. echo \"连接上 oracle 数据库\"; &#125;&#125;class oracleFactory implements Factory&#123; function createDB() &#123; // TODO: Implement createDB() method. return new dboracle(); &#125;&#125;$oracle_factory = new oracleFactory();$oracle_create = $oracle_factory-&gt;createDB();$oracle_create-&gt;conn();","tags":[]},{"title":"-单例模式","date":"2018-11-09T12:42:41.376Z","path":"2018/11/09/面试/设计模式/index_03_单例模式/","text":"单例模式( 三私一公 ) 私有的构造方法( 防止类被多次实例化 ) 私有的克隆方法( 防止类被多次克隆 ) 私有的静态属性( 保存类的实例 ) 公有的静态方法( 访问这个类 ) 1234567891011121314151617181920212223242526272829303132// 单例模式 singletonclass singleton&#123; private static $ins = null; public static function getIns() &#123; if (self::$ins == null) &#123; self::$ins = new self(); &#125; return self::$ins; &#125; // 封锁多次 new private function __construct() &#123; &#125; // 封锁克隆 clone private function __clone() &#123; &#125;&#125;$s1 = singleton::getIns();$s2 = singleton::getIns();if ($s1 === $s2) &#123; //是一个对象 echo \"是一个对象\";&#125; else &#123; echo \"不是一个对象\";&#125;","tags":[]},{"title":"-多态","date":"2018-11-09T12:42:41.376Z","path":"2018/11/09/面试/设计模式/index_01多态/","text":"多态满足三个条件: 子类继承父类 子类重写父类 父类引用指向子类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// 多态 动物(猫,狗) 猫吃鱼,牛吃草abstract class Animal&#123; abstract function eat();&#125;class Cat extends Animal&#123; function eat() &#123; // TODO: Implement eat() method. echo ' 猫吃鱼 '; &#125;&#125;class Dog extends Animal&#123; function eat() &#123; // TODO: Implement eat() method. echo ' 牛吃草 '; &#125;&#125;class Client&#123; // java 中 foo(Animal $animal) ,声明 cat 和 dog 的父类 animal ,只能传递 animal 的子类 // public function foo(Animal $animal) public function foo($animal) &#123; $animal-&gt;eat(); &#125;&#125;$catClient = new Client();$catClient-&gt;foo(new Cat());$dogClietn = new Client();$dogClietn-&gt;foo(new Dog());// 如果在 class Client 中这样写 public function foo(Animal $animal)// 下面的就会报错class Pig&#123; public function eat() &#123; echo \" 猪飞到上天 \"; &#125;&#125;$pigClient = new Client();$pigClient-&gt;foo(new Pig()); 设计模式参考地址: 设计模式01 设计模式02","tags":[]},{"title":"-centos 中开机自启","date":"2018-11-09T12:37:58.666Z","path":"2018/11/09/centos/开机自启/","text":"systemctl 设置开机启动123yum install nginx # 安装nginx 做开机启动测试systemctl enable nginx.service # 设为开机启动systemctl disable nginx.service # 停止开机启动 修改 rc.local 设置为开机启动123456789101112### /etc/rc.local 和 /etc/rc.d/rc.local 修改那个都行,我这里修改 /etc/rc.d/rc.local[root@localhost vagrant]# locate rc.local/etc/rc.local/etc/rc.d/rc.local[root@localhost vagrant]#在 /etc/rc.d 目录下,修改 rc.local ,添加执行命令,比如 mkdir /fei_03 创建一个名字叫 fei_03 的目录; 然后 chmod +x /etc/rc.d/rc.local##### ---- 温馨提示,请注意 rc.local 文件里面有个提示如下, # Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure# that this script will be executed during boot.","tags":[]},{"title":"-算法01","date":"2018-10-31T12:08:55.667Z","path":"2018/10/31/面试/算法/算法/","text":"01). 羊生羊一种羊, 第一年生一只小羊, 第四年生生一只小羊, 第五年死 20年后有多少只羊 12345678$arr = [1, 0, 0, 0, 0];for ($i = 1; $i &lt;= 20; $i++) &#123; $tmp = $arr[1] + $arr[3]; array_unshift($arr, $tmp); array_pop($arr);&#125;print_r($arr);echo array_sum($arr); 02). 猴子选大王一群猴子排成一圈，按1,2,…,n依次编号。然后从第1只开始数，数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，如此不停的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。要求编程模拟此过程，输入m、n, 输出最后那个大王的编号。用程序模拟该过程 123456789101112131415161718function monkey($n ,$m)&#123; $arr = range(1,$n); //构造数组 array(1,2,3,4,5,6,7,8); $i = 0; //设置数组指针 while(count($arr)&gt;1)&#123; //遍历数组，判断当前猴子是否为出局序号，如果是则出局，否则放到数组最后 if(($i+1) % $m ==0) &#123; unset($arr[$i]); &#125; else &#123; //array_push() 函数向第一个参数的数组尾部添加一个或多个元素（入栈），然后返回新数组的长度。 array_push($arr ,$arr[$i]); //本轮非出局猴子放数组尾部 unset($arr[$i]); //删除 &#125; $i++; &#125; return $arr;&#125;print_r(monkey(10,4)); 03). 10 进制; 8进制; 16进制 ; 2 进制12345678910111213141516171819202122232425262728293031323334/** * 生活中常用10进制 * 计算机中常用2进制,8进制,16进制 */// 10 进制echo 123; echo \"&lt;br&gt;\"; //从右到左3个位,分别是以1顶1,以1顶10,以1顶100echo 100 * 1 + 10 * 2 + 1 * 3; echo \"&lt;br&gt;\";// 8 进制echo 0123; echo \"&lt;br&gt;\"; //从做到右3个位,分别是以1顶1,以1顶8,以1顶64echo 64 * 1 + 8 * 2 + 3; echo \"&lt;br&gt;\";echo 027; echo \"&lt;br&gt;\";echo 8 * 2 + 7; echo \"&lt;br&gt;\";//16进制 0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F// A、B、C、D、E、F 不去分大小写echo 0x123; echo \"&lt;br&gt;\"; //从左到右3个位,分别是1顶1,以1顶16,以1顶256echo 256 * 1 + 16 * 2 + 3; echo \"&lt;br&gt;\";// 2 进制, PHP 目前不支持直接表示// 从右到左,分别以1顶1,顶2,顶4,顶8.........../** * 10 进制 2 进制 * 5 0000 0101 * 255 1111 1111, 128+64+32+16+8+4+2+1 * -1 1111 1111 * 像上面8个1,到底理解成255,还是理解成-1 * 这个取决于程序 * 比如在 mysql 中 ,int 则理解为 -1 ,unsigned int理解为255 */// 为什么 程序员总是分不清万圣节和圣诞节? 因为 Oct 31=Dec 25 04). 8瓶水,其中1瓶有毒,那小白鼠做试验,药效发挥需要2小时1234567891011121314151617181920212223242526// 8瓶水,其中1瓶有毒,拿小白鼠做试验,药效发挥需要2小时,最少需要几只老鼠,只能试一次// 分析:// 2 个小时后,小白鼠,只有2种状态: 死/活// 2只小白鼠,有4中组合状态;// n只小白鼠有2^n 次方组合状态// 一共有8瓶药水,最多需要8中状态,就可以区分// 3只老鼠,组合8种状态// 因此理论上与3只老鼠就可以//// 思路:// 把8瓶药水分成两堆,让一只老鼠在其中一堆里面喝水,如果死了,毒药就在这堆里面,// 反之,毒药就在另外一堆里面, 然后// 把有毒药的那一堆分成2堆,让第2只老鼠在其中一堆里喝,如果喝死毒药就在这堆里面,// 反之,毒药就在另外一堆里面, 然后// 把有毒要的那一堆再分成2堆,让第三只老鼠喝就能知道毒药在几号里//// 解答:// 1代表活着,0代表死// 毒药: 1 2 3 4 5 6 7 8// 白鼠1: 0 0 0 0 1 1 1 1// 白鼠2: 0 0 1 1 0 0 1 1// 白鼠3: 0 1 0 1 0 1 0 1// // 白鼠一死, 毒药在 1 2 3 4// 白鼠二死, 毒药在 3 4// 白鼠三死, 毒药在 4 05). 递归123456789function sum($n)&#123; if ($n == 1) &#123; return 1; &#125; return $n + sum($n-1);&#125;echo sum(100); 06). PHP实现斐波那契数列12345678910111 1 2 3 5 8 13 21 34 55 .........//用递归实现 输出某一位的数字function fbnq($n)&#123; if($n &lt;= 0) return 0; if($n == 1 || $n == 2) return 1; return fbnq($n - 1) + fbnq($n - 2);&#125;echo fbnq(10); //输出第十个数是 55//经典案例//有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少 (注意:这里是总数,还是对, 斐波那契数列结果是对) 07). 静态变量12345678910111213141516/** * 静态变量 * static 变量有一个特点,在第一次调用声明之后存在,切不随函数结束而结束 * 当函数再次调用时,可以直接利用上次的结果 */function t()&#123; static $a = 5; // $a = 5; $a += 1; return $a;&#125;echo t();echo t();echo t(); 08). 递归练习,计算所有单元的和1234567891011121314151617// 递归函数,计算所有单元的和$arr = [1, 2, 3, [4, [5, 6]]];function sum($arr)&#123; static $sum = 0; // static 当函数再次调用时,可以直接利用上次的结果 foreach ($arr as $value) &#123; if (is_array($value)) &#123; sum($value); &#125; else &#123; $sum += $value; &#125; &#125; return $sum;&#125;echo sum($arr); 09). 递归练习 一个多维数组,如果单元值为数字,则把其值修改为原来2倍123456789101112131415161718192021222324252627282930313233// 一个多维数组,如果单元值为数字,则把其值修改为原来2倍// 方法1$arr = [1, 2, 'b', [3, 'c', [5, 6]]];function double($arr)&#123; foreach ($arr as $key=&gt;$value) &#123; if (is_array($value)) &#123; $arr[$key] = double($arr[$key]); &#125; else &#123; if (is_numeric($value)) &#123; $arr[$key] *= 2; &#125; &#125; &#125; return $arr;&#125;echo \"&lt;pre&gt;\";print_r( double($arr));/////////////-----------------------// 方法2 ,使用系统函数 array_walk_recursive// @see http://php.net/manual/zh/function.array-walk-recursive.php$crr = [1, 2, 'b', [3, 'c', [5, 6]]];;function double_2(&amp;$crr,$key)&#123; if (is_numeric($crr)) &#123; $crr*=2; &#125;&#125;array_walk_recursive($crr, 'double_2');echo \"&lt;pre&gt;\";print_r($crr); 10). 递归创建目录123456789101112131415161718$filepath = \"./test/upload/2018/test.txt\";mk_dir($filepath);// 循环创建目录// 注意,$filepath 最后的文件,名字也会被当成目录创建function mk_dir($dir, $mode = 0755)&#123; if (is_dir($dir) || @mkdir($dir,$mode)) return true; if (!mk_dir(dirname($dir),$mode)) return false; return @mkdir($dir,$mode);&#125;/////////////-----------------------// 方法2 ,使用系统函数 mkdir 第三个参数// @see http://www.php.net/mkdir// 注意,$filepath 最后的文件,名字也会被当成目录创建$filepath = \"./test/upload/2018/test.txt\";mkdir($filepath, 0755, true);","tags":[]},{"title":"--JavaScript -3种事件绑定","date":"2018-10-27T02:55:17.451Z","path":"2018/10/27/JavaScript/JavaScript_15_事件绑定/","text":"1234567891011121314151617181920/** * 第一种绑定:行为结构不分离,效率也低 * &lt;a onclick=\"xxx()\"&gt; * * 第二种绑定:只能绑定1个事件 * xxxDomObject.onclick = function()&#123;&#125; * * 第三种绑定: addEventLister */// 一个页面的 js 由多人团队开发;// A,B 都在写 onload 事件// 则 后面的事件,吧前面的onload 属性值都给覆盖了// 这里只会输出 worldwindow.onload = function () &#123; alert(\"hello\");&#125;;window.onload = function () &#123; alert('world')&#125;;","tags":[]},{"title":"-- JavaScript -面向对象之静态方法","date":"2018-10-27T01:12:25.671Z","path":"2018/10/27/JavaScript/JavaScript_13_面向对象之静态方法/","text":"JS 面向对象中的静态方法1: 构造函数通过 new 来制造对象2: 函数本身也是对象 比如一台豆浆机,转动 (new 调用)时,能返回一杯豆浆(制造出的对象)但反观豆浆机本身,也是台机器,也是个对象豆浆机身上也有属性—如开关,进水口等 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * JS 面向对象中的静态方法 * 1: 构造函数通过 new 来制造对象 * 2: 函数本身也是对象 * * 比如一台豆浆机,转动 (new 调用)时,能返回一杯豆浆(制造出的对象) * 但反观豆浆机本身,也是台机器,也是个对象 * 豆浆机身上也有属性---如开关,进水口等 */// var Hashiqi = function () &#123;// this.bark=function () &#123;// console.log('www');// &#125;// &#125;//上面这个 等效 下面这个function Hashiqi()&#123; this.bark= function () &#123; console.log('www'); &#125;&#125;Hashiqi.ajax = function () &#123; console.log('ajax');&#125;;// var h = new Hashiqi(); //h方法有没有ajax方法?? 答:没有,豆浆机上的开关会跑到豆浆里面吗?// console.log(h);console.log(Hashiqi.ajax);/** * 即: * 1: ajax() 方法是属于\"函数\"本省的,和返回的对象没有关系 * 2: bark要调用,必须 new Hashiqi()得到对象,切由返回对象才能调用, * 3: ajax()方法要调用,不需要 new 对象,直接用 Hashiqi 来调用. */// h.bark();Hashiqi.ajax();/** * 我们之前有没有接触过静态方法? * 答: 有 * * 1: Math.random(); 静态方法 * 2:$.ajax(); 静态方法 * 3:写 jQuery 插件,2种办法 * 3.1: 通过闭包,把方法写到 jQuery 上的原型上( 稍复杂) * 3.3; 直接增加 $ 对象的静态方法 */ demo123456789&lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.9.1.js\"&gt; &lt;/script&gt;&lt;script type=\"text/javascript\"&gt; //---------------- demo ------------ //通过静态方法给 jQuery 增加唱歌插件 $.sing = function () &#123; alert('人生最大的悲剧莫过于失去自由 人生最大的痛苦莫过于失去亲人和朋友'); &#125;; $.sing();&lt;/script&gt;","tags":[]},{"title":"-JavaScript  -闭包","date":"2018-10-23T18:19:49.490Z","path":"2018/10/24/JavaScript/JavaScript_06_闭包/","text":"闭包一句话概括 :函数的作用域取决于声明时,而不取决一调用是!!函数的作用取决于声明时,而非调用时 1234567891011121314151617181920212223242526272829function t1() &#123; var age = 20; function t2() &#123; console.log(age) &#125; return t2;&#125;var tmp = t1();/** * 1: 在大部分的语言中, t1 被调用执行,则申请内存 * 并把其局部变量, push 入栈!!! * t1 函数 执行完毕,内部的局部变量,随着函数的退出而销毁 * 因此, age = 20 的局部变量,依靠已经消失了 * * 但是在 js 中 , age = 20 这个变量,却被 t2 捕捉, * 即使 t1 执行完毕,通过 t2 依然能访问该变量 * * 这种情况---返回的函数,并非孤立的函数,甚至吧其周围的变量环境. * 形成了一封闭的\"环境包\",并同返回,所以叫\"闭包\" * * ---- 一句话概括--- 函数的作用域取决于声明时,而不取决一调用是!! * @type &#123;number&#125; */var age = 99;tmp();// 输出 20 函数的作用取决于声明时,而非调用时123456789101112131415function closure() &#123; var sister = '大桃花'; var me = function () &#123; console.log(sister); &#125;; return me;&#125;function place() &#123; var sister = '大福晋'; var girl = closure(); girl();&#125;place(); // 输出 大桃花 闭包计数器01123456789101112// 多个人开发 js 程序,需要一个全局的计数器// 多个人的函数共同用一个计数器,计数器一直增长/** * 解决办法: * 1: 设立一个全局变量 * window.cat = 0; * 调用 ++window.cnt; * * 这个办法可行,但是污染了全局变量, * 其次引入了多人的 js 程序,别人的程序里,也有一个 window.cnt = 'hello'; * 该计数器就损坏了,(所以要尽量避免用全局变量) */ 闭包计数器02 — 闭包维护一个别人污染不到的变量,做计数器1234567891011121314151617181920212223242526// 闭包维护一个别人污染不到的变量,做计数器function counter() &#123; var cnt = 0; // 当 ccounter 执行完毕后,除了返回的 cnter 函数,谁也别想碰到 cnt 变量了 var cnter = function () &#123; return ++cnt; &#125;; return cnter;&#125;var inc = counter();console.log(inc());console.log(inc());console.log(inc());//-----------简化版-----------var cnt = (function () &#123; var cnt = 0; return function () &#123; return ++cnt; &#125; &#125;)();console.log(cnt());console.log(cnt());console.log(cnt()); 闭包计数器03 —在工作中,一般如何避免全局污染或冲突123456789101112131415161718/*** 疑问: cnt 不依然是全局变量吗?* 第3版---在工作中,一般如何避免全局污染或冲突** 1: 统一放在一个全局对象上,如 jQuery-&gt;$* 2:每个人用自己的命名空间*/// jQuery 的计数插件形式$ = &#123;&#125;;$.cnt = (function () &#123; var cnt = 0; return function () &#123; return ++cnt; &#125;&#125;)();console.log($.cnt());console.log($.cnt());console.log($.cnt()); 闭包计数器04 – 把自己的变量,函数,都放在一个对象里123456789101112// 第4版 个人命名空间,在团队开发中也很常见// 其实就是把自己的变量,函数,都放在一个对象里var Y18 = &#123;&#125;;Y18.cnt = (function () &#123;var cnt = 0return function () &#123; return ++cnt;&#125;&#125;)();console.log(Y18.cnt());console.log(Y18.cnt());console.log(Y18.cnt()); demo 练习要求:点击 li ,分别弹出 0,1,2,3 1234567891011121314151617&lt;ul&gt; &lt;li&gt;男&lt;/li&gt; &lt;li&gt;女&lt;/li&gt; &lt;li&gt;老&lt;/li&gt; &lt;li&gt;少&lt;/li&gt;&lt;/ul&gt;&lt;script type=\"text/javascript\"&gt; //要求:点击 li ,分别弹出 0,1,2,3 for (var i = 0, lis = document.getElementsByTagName('li'), len = lis.length; i &lt; len; i++) &#123; lis[i].onclick = (function () &#123; var p=i; return function () &#123; return alert(p); &#125; &#125;)(); &#125;&lt;/script&gt;","tags":[]},{"title":"-JavaScript -this","date":"2018-10-22T15:06:18.078Z","path":"2018/10/22/JavaScript/JavaScript_04_this/","text":"js 的 this 到底是谁??? js 中函数的4中条用方式 1). 作为普通函数来调用12345678910111213141516171819/** * console.log(window.xxx); * 1: 作为普通函数来调用时, * this 的值指向--&gt;window * 准确的说,this 为 null ,但被解释成 window * 在 ECMAScript 表准中, 如果 this 为 null ,则解释成 undefined */console.log(window.xxx); //undefinedfunction t() &#123; this.xxx = 333;&#125;t();console.log(window.xxx);// 输出 333function test() &#123; console.log(this.test_window);&#125;test(); //输出 undefined 作为对象的方法来调用12345678910111213141516171819202122232425/** * 2: 作为对象的方法来调用 * this 指向方法的调用这,即该对象 */var obj = &#123; xx: 99, yy: 88, t: function () &#123; console.log(this.xx); &#125;&#125;;obj.t(); // 输出 99var dog = &#123;xx: 'wangwang'&#125;;dog.t = obj.t;dog.t(); // 输出 wangwang/** * 作为方法调用时, * this 指向其调用那一刻的调用者,即母体对象 * 不管被调用函数,声明时属于方法,还是函数 */show = function () &#123; console.log('show' + this.xx);&#125;dog.t = show;dog.t(); // show wangwang 函数作为构造函数调用时123456789101112131415161718192021222324252627282930/** * 3: 函数作为构造函数调用时 * js 中没有类的概念,创建对象是用构造函数来完成,或者直接用json格式&#123;&#125;来写对象 * * new Dog 发生了一下几个步骤 * a: x系统创建空对象 &#123;&#125; ,(空对象 constructor 属性指向 Dog 函数,先别管) * b: 把函数的 this --&gt; 指向--&gt;该空对象 * c: 执行该函数 * d: 返回该对象 */function Dog(name, age) &#123; this.name = name; this.age = age; this.bark = function () &#123; console.log('this is ' + this.name); //输出 this is huzi &#125;&#125;var dog = new Dog('huzi', 2);dog.bark();// 下面这个返回什么???// 分析: 输出 Pig对象: Pig &#123;age: 99&#125;; 因为函数作为构造函数运行时,return 的值是忽略的,还是返回对象function Pig() &#123; this.age = 99; return 'abc';&#125;var pig = new Pig();console.log(pig); 函数通过 call , apply 调用1234567891011121314151617181920212223242526272829/** * 4. 函数通过 call , apply 调用 * 语法格式: 函数.call(对象,参数,参数,参数,参数........参数N.) */function t(num) &#123; console.log('我的真实年龄是' + this.age); console.log('但是我一般告诉别人我' + (this.age + num));&#125;//var humanObject = &#123;name: 'lisi', age: 28&#125;;// 我的真实年龄是28// 但是我一般告诉别人我18humanObject.t = t;humanObject.t(-10);// 接下来,我们不把 t 赋值为 human 的属性,也能把 this 指向 human// 运行结果:// 我的真实年龄是30// 但是我一般告诉别人我35// 分析:// fn.call(对象obj,参数1,参数2,....参数N)//// 运行如下:// a): fn 函数中的 this---&gt;指向-----&gt;obj// b): 运行 fn(参数1,参数2.....参数N);var wangwuObject = &#123;name: 'wangwu', age: 30&#125;;t.call(wangwuObject, 5);// t.apply(wangwuObject,[5]); demo 练习1234567891011121314151617181920212223name = 'this is window';var obj = &#123; name: 'php', t: function () &#123; console.log(this.name) &#125;&#125;;var dog = &#123;name: 'huzi'&#125;;obj.t(); // 输出 phpvar tmp = obj.t;tmp(); //相当于window.tmp() 输出: this is windowdog.t = obj.t;dog.t(); //输出 huzi(dog.t = obj.t)(); //输出 this is window(function()&#123;console.log(this.name)&#125;)(); //输出 this is window// 分析// (dog.t = obj.t) 是一个表达式,返回值值\"值\",即 t 函数// 强调是值,说明不是通过应用来调用的,而是立即使用函数本身// 效果等同于 (function()&#123;console.log(this.name)&#125;)// null 又被解释成 window 其他 window 全局变量污染12345/** * 有一些经验的,但对 js 理解的不深的同学说: * 有 this 操作的,(如 this.age=xx ) 的函数不能直接用,而是要new 来调用????? * 答: 因为直接用, this 会指向 window ,将会污染去全局变量 */","tags":[]},{"title":"-JavaScript arguments","date":"2018-10-21T15:21:29.509Z","path":"2018/10/21/JavaScript/JavaScript_03_arguments/","text":"argumets 是什么? 答: 是一个对象,是一个长得很像数组的对象 arguments 内容是什么??? 答: arguments是函数运行时的实体参数列表 123456/*** 函数运行期内,关键的三个对象* AO -----&gt; 本函数 AO 上没有某属性,则继续去外层函数的* arguments -----&gt; 每个函数都有自己的 callee ,但 不 向外层接着找 arguments 的相关属性,即 不形成链* this */ demo_01 arguments 是什么?123456789(function (d, e, f) &#123; // 在此函数中无法用 d,e,f 形参来取的 'haha',因为没有相对应的形参 // 但我们可以用 arguments 来获取任意多个的实参 console.log(typeof arguments); // 输出 object console.log(arguments); // 对象 console.log(arguments[0]); // hello --&gt;长得像数组 console.log(arguments[1]); console.log(arguments[3]);&#125;)('hello', 'world', '!', 'haha'); arguments 实际内容12345678910(function (d, e, f) &#123; console.log(d); // 输出 hello arguments[0] = 'China'; console.log(d); // 输出 China ; 形参与对应的 arguments 单元,其实是互相映射的,互相影响&#125;)('hello', 'world', '!', 'haha');//---------------------------------------(function (d, e, f) &#123; console.log(arguments.length); // 输出长度 4 ; 实参个数&#125;)('hello', 'world', '!', 'haha'); 递归 arguments.callee123456789101112131415(function (d, e, f) &#123; console.log(arguments.callee); // 输出 function(d, e, f) &#123; console.log(arguments.callee); &#125;&#125;)('hello', 'world', '!', 'haha');//-----------------------------// 递归 , 求和,输出 5050console.log( (function (n) &#123; if (n &lt;= 1) &#123; return 1; &#125; else &#123; return n + arguments.callee(n - 1); &#125; &#125;)(100));","tags":[]},{"title":"-JavaScript  词法分析期  执行期","date":"2018-10-21T05:12:40.829Z","path":"2018/10/21/JavaScript/JavaScript_02_词法分析/","text":"词法分析期 执行期1234567891011121314151617/** * 第一步: 先分析参数 * 第二部: 在分析变量声明 * 第三个: 分析函数声明 * * 一个函数就能使用的局部变量,就从上面的3步分析而来 * * 具体步骤: * 0: 函数运行前的一瞬间,生成 Active Object(活动对象),下称为 AO * 1:把声明的参数,形成 AO 的属性,值全是 undefined * 2:分析变量声明声明声明!!! 如 var age * 如果 AO 上还没有 age 属性,则添加 AO 属性,值是 undefined * 如果 AO 上已经有 age 属性,则不做任何影响 * 3: 分析函数声明,如 function foo()&#123;&#125; * 则把函数赋给 AO.foo 属性 * 注: 如果此前 foo 属性已经存在,则被无情覆盖了 */ demo_1123456789101112//分析过程// AO &#123;age:unfettered&#125;// 运行过程:// t(5)--&gt;AO.age=5; alert(AO.age); //5// t()---&gt;AO.age 没得到复制,还是 undefinedfunction t(age) &#123; alert(age)&#125;t(5); // 输出 5t(); //输出undefined demo_021234567891011121314151617/** * 分析过程: * 0: 形成 AO=&#123;&#125; * 1: 分析形参 AO = &#123;age:undefined&#125; * 接受形参 AO= &#123;age:5&#125; * 2: 分析 var age ,发现 AO 已经有 age属性,不做任何影响 * * 执行过程: * console.log(age); //66 * AO.age = 66; */function t2(age) &#123; var age= 66; console.log(age); //输出66&#125;t2(5); demo_031234567891011121314151617181920212223/** * 词法分析过程: * 0: AO = &#123;&#125; * 1: 分析参数 AO = &#123;greet:undefined&#125; * 2: 分析 greet 变量声明, AO 已经有greet 属性,因此不做任何影响 * 3: 分析 greet 函数声明, AO.greet = function()&#123;&#125;, 被覆盖成函数 * 执行过程 * console.log(greet); * greet = 'hello'; * console.log(greet); * console.log(greet); */function t3() &#123; console.log(greet);// 输出greet() &#123;&#125; var greet = 'hello'; console.log(greet);// 输出 hello function greet() &#123; &#125; console.log(greet);// 输出 hello&#125;t3(null); demo_0412345678910111213141516171819202122/** * 词法分析过程: * 0: AO = &#123;&#125; * 1: 分析参数 AO = &#123;greet:undefined&#125; * 2: 分析 greet 变量声明, AO 已经有greet 属性,因此不做任何影响 * 3: 分析 greet 函数声明, AO.greet = function()&#123;&#125;, 被覆盖成函数 * 执行过程 * console.log(greet); * console.log(greet); * console.log(greet); */function t3() &#123; console.log(greet);// 输出 greet() &#123;&#125; var greet; console.log(greet);// 输出 greet() &#123;&#125; function greet() &#123; &#125; console.log(greet);// 输出 greet() &#123;&#125;&#125;t3(null); demo_0512345678910111213141516171819202122/** * 分析 * 0: AO = &#123;&#125; * 1: 分析参数 AO =&#123;b:undefined&#125; * 接受参数 AO = &#123;b:2&#125; * 2: 分析 var 声明,此函数没有 var * 3: 分析函数声明, AO = &#123;b:function()&#123;console.log(b);&#125;&#125; * * 执行期: * console.log(b) //function * b(); //由作用域寻找到 a 函数中的 b , 即 function , console.log() 出来 */function a(b) &#123; console.log(b); // 输出 b() &#123; console.log(b); &#125; ****注意这里的注释也会被输出*** function b() &#123; console.log(b); // 输出 b() &#123; console.log(b); &#125; ****注意这里的注释也会被输出*** &#125; b();&#125;a(2); demo_061234567891011121314151617181920212223/** * 词法分析 * 0: AO = &#123;&#125; * 1: 分析参数 AO = &#123;b:undefined&#125; --&gt; &#123;b:2&#125; * 2: 分析 var 声明,没有 * 3: 分析函数声明??? [没有!!!]!!!*** * * (注: b = function()&#123;&#125; ,是一个赋值过程,在执行期才有用) * * 执行过程 * console.log(b); * b = function()&#123; console.log(b); &#125; * console.log(b); */function a(b) &#123; console.log(b); //输出 2 b = function () &#123; console.log(b); // b() &#123; console.log(b); &#125; ****注意这里的注释也会被输出*** &#125;; b();&#125;a(2); demo_07 函数声明 函数赋值123456789101112// 这两种方式 效果不同// t1 是函数声明,虽然全局内也得到一个 t1 变量,值是 function// 而 t2 只是一个复制过程----值是谁? 值是右侧的表达式的返回结果,即函数// 就是说 function ()&#123;&#125; 在js 看来,就和 2*4 8/4 一样,是一个表达式,返回一个结果// 因此 , t1 t2 两种方式在词法分析是,有这本质的区别// 前者 在词法分析阶段,就发挥作用// 而后者,在运行阶段,才发挥作用function t1() &#123;&#125;t2 =function () &#123;&#125; jQuery 最外层代码分析1234567891011121314151617181920212223//----------------- jQuery 最外层代码分析---------------(function (window, undefined) &#123; &#125;) //内层表达式.返回值是函数,包括在小括号李,当成表达式来执行(function (window, undefined) &#123; &#125;(window)) //立即调用// 而内层函数又没有起名字,成为匿名函数// 这种手法,匿名函数,立即执行,不污染全局, 称为 立即执行匿名函数表达式//------------------ 思路: 为什么传 window , 而又不会传 undefined ???--------------//------------------ 传window 是为了速度 --------------// function () &#123;// function () &#123;// function () &#123;// function () &#123;// document.getElementById........ //这个 document 将会向作用域层层上找,直到最外层// &#125;// &#125;// &#125;// &#125;// jQuery 就是为了加快内部查找局部变量的速度,而直接把 window 以参数形式传进来// 这样 window 就在jQuery 内部 AO 上// 不传 undefined 是为了安全// 因为在 IE ,低版本中, undefined 竟然可以重新赋值, 如 undefined = 6;// 声明 undefined 局部变量( 名字是undefined而已),// 同时,又不传参,值自然是 undefined 防止了对外界 undefined 的污染","tags":[]},{"title":"-JavaScript 作用域   词法分析","date":"2018-10-20T23:37:51.465Z","path":"2018/10/21/JavaScript/JavaScript_01_作用域/","text":"注意​ 以 window.xxx 引用全局变量寻找不到,作为某个属性不存在,返回 undefined​ 直接以 xxx 引用某变量,寻找不到,则是报错 xxx is not defined 错误 作用域 入门123var test;console.log(test); // 输出 undefinedconsole.log(test2); //报错 test2 is not defined 词法分析入门123456789101112131415/*** 词法分析 入门* js 代码自上而下执行!!!** 但是---------* js 代码在整体运行分:* 词法分析期* 运行期** 自上而下执行,先有个一个\"词法分析过程\"!!!*/// 分析 词法分析期 var test_1; 赋值期 tes_1='fei';var test_1 = 'fei';console.log(test_1); //输出 feiconsole.log(window.test_1); //输出 fei 作用域 demo12345678910111213141516171819202122232425262728293031323334/** * 作用域 * 在js中,函数嵌套是非常普遍的 * 在函数嵌套中, * * 对变量是如何寻找的? * 答:首先在函数内寻找 * 寻找不到,则往外层寻找 * 直到....全局(window) */var c = 5;function t1() &#123; var d = 6; function t2() &#123; var e = 7; alert(c + d + e); &#125; t2();&#125;t1(); //输出 18//----------------------------var c = 5;function t1() &#123; var d = 6; function t2() &#123; var e = 7; var d=3; alert(c + d + e); &#125; t2();&#125;t1(); //输出 15 声明变量 var 的作用1234567891011121314151617181920212223242526272829303132333435/** * 声明变量 var 的作用 * var 是在函数运行的上下文中,声明一个变量 * 如果不加 var , 则是一个赋值操作 * 但不要狭隘的理解为----声明了一个全局变量 */alert(window.d);//输出 undefinedalert(window.e);//输出 undefinedfunction t() &#123; d = 5;//赋值操作 var e = 6;&#125;t();// 5 d没有加 var 仅仅是一个赋值操作,// 寻找t域内的函数,没有找到继续寻找...直到..&gt;window,最后 window.d = 5alert(window.d); // 输出 5alert(window.e); //输出 undefined//----------------------------------function t1() &#123; var d; function t2() &#123; d = 5; e = 6; &#125; t2();&#125;t1();console.log(e); // 输出 6console.log(d); //报错 is not definedconsole.log(window.e); //输出 6console.log(window.d); //输出 undefined 作用域 demo 2123456789101112131415161718192021var str1 = 'global';function t1() &#123; // 分析 // 这里 str1 这一行执行,在 t1 内寻找 str1--没有找到,又在 window 上寻找 str1--有,打印global // 这里 str2 这一行执行,在 t1 内寻找 str2--没有找到,又在 window 上寻找str2--没有,报错 str2 is not defined console.log(str1); // 输出 global console.log(str2); // 报错 is not defined // console.log(window.str1);// 输出 global // console.log(window.str2);// 输出 undefined // 分析 // 如果执行到这里,才会把全局的 str2变量赋上值 str2 = 'local'; // console.log(str1); // 输出 global // console.log(str2); // 报错 local // console.log(window.str1);// 输出 global // console.log(window.str2);// 输出 local&#125;t1(); 词法分析期 运行期1234567891011121314151617181920212223/* * 1步:先分析 t1 函数 * t()&#123; * var str2; // 分析 t1 内有str2 局部变量,注意此时函数没有执行,因此str2 的值是 undefined * &#125; * * 2步:执行 t1 函数 * console.log(str1); //global * console.log(str2); //undefined * str2 = 'local'; //此时,str 的值为 local */var str1 = 'global';function t1() &#123; console.log(str1); // 输出 global console.log(str2); // 报错 undefined console.log(window.str1);// 输出 global console.log(window.str2);// 输出 undefined var str2 = 'local';&#125;t1(); 扩展 const、let、var之间的区别 ……….","tags":[]},{"title":"-php -vagrant[centos] -xdebug","date":"2018-10-19T16:56:49.263Z","path":"2018/10/20/centos/php_vagrant_xdebug/","text":"!!!! 温馨提醒 PHP版本一点要和xdebug版本对应!!!! 温馨提醒 PHP版本一点要和xdebug版本对应!!!! 温馨提醒 PHP版本一点要和xdebug版本对应 查看安装的xdebug 011234567891011121314[root@localhost php.d]# yum list | grep xdebugRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fastphp-composer-xdebug-handler.noarch 1.3.0-1.el7 epel php-pecl-xdebug.x86_64 2.6.1-1.el7.remi.7.2 remi-php72php54-php-pecl-xdebug.x86_64 2.4.1-1.el7.remi remi-safe php55-php-pecl-xdebug.x86_64 2.5.5-1.el7.remi remi-safe php56-php-pecl-xdebug.x86_64 2.5.5-1.el7.remi remi-safe php70-php-pecl-xdebug.x86_64 2.6.1-1.el7.remi remi-safe php71-php-pecl-xdebug.x86_64 2.6.1-1.el7.remi remi-safe php72-php-pecl-xdebug.x86_64 2.6.1-1.el7.remi remi-safe php73-php-pecl-xdebug.x86_64 2.7.0~beta1-1.el7.remi remi-safe [root@localhost php.d]# yum install php-pecl-xdebug 查看安装的xdebug 021234567891011[root@localhost php.d]# ll /etc/php.d/ | grep xdebug-rw-r--r-- 1 root root 37784 Aug 4 05:54 15-xdebug.ini[root@localhost php.d]# vim 15-xdebug.ini zend_extension=xdebug.so xdebug.idekey = \"PHPSTORM\" xdebug.default_enable = 1 xdebug.remote_connect_back = 1 xdebug.remote_port = 9001 xdebug.remote_enable = 1 xdebug.remote_autostart = 1 xdebug.remote_handler=\"dbgp\" 查看安装的xdebug 031234567891011121314151617181920212223242526272829[root@localhost php.d]# php -vPHP 7.2.9 (cli) (built: Aug 15 2018 09:19:33) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans ###这里的配置不要写错了,remote_connect_back这项很重要[root@localhost php.d]# vim 15-xdebug.ini zend_extension=xdebug.so xdebug.idekey = \"PHPSTORM\" xdebug.default_enable = 1 xdebug.remote_connect_back = 1 xdebug.remote_port = 9001 xdebug.remote_enable = 1 xdebug.remote_autostart = 1 xdebug.remote_handler=\"dbgp\" 或者 zend_extension=xdebug.so xdebug.idekey=\"PHPSTORM\" xdebug.remote_connect_back = 1 //这项不要丢了 xdebug.remote_handler = \"dbgp\" xdebug.remote_mode = \"req\" xdebug.remote_host=127.0.0.1 xdebug.remote_enable=on xdebug.remote_port = 9001 xdebug.remote_autostart = no---------------虚拟机配置完毕------------------ windows中配置123456704 Tools--&gt;Vagrant 05 Languages &amp; Frameworks --&gt;PHP--&gt; Debug 06 Languages &amp; Frameworks --&gt;PHP--&gt; Debug --&gt; DBGp Proxy07 Languages &amp; Frameworks --&gt;PHP--&gt; Servers08 Run --&gt; Edit Configurations 添加PHP Web Page09接下来接可以断点调试了","tags":[]},{"title":"-Yii2 验证器","date":"2018-10-19T16:54:47.860Z","path":"2018/10/20/Yii2/Yii2_validators/","text":"required : 必须值验证属性12[['字段名'],required,'requiredValue'=&gt;'必填值','message'=&gt;'提示信息'];#说明:CRequiredValidator 的别名, 确保了特性不为空. 指定场景1[['title', 'content'], 'required', 'on' =&gt; ['create', 'update']], email : 邮箱验证12['email', 'email'];#说明:CEmailValidator的别名,确保了特性的值是一个有效的电邮地址. match : 正则验证1234[['字段名'],match,'pattern'=&gt;'正则表达式','message'=&gt;'提示信息']; [['字段名'],'match','pattern'=&gt;'/^[1-9]d*|0$/','message'=&gt;'必须为正整数'];[['字段名'],match,'not'=&gt;ture,'pattern'=&gt;'正则表达式','message'=&gt;'提示信息'];/*正则取反*/ #说明:CRegularExpressionValidator 的别名, 确保了特性匹配一个正则表达式. safe : 安全1['description', 'safe']; compare : 比较123['age', 'compare', 'compareValue' =&gt; 30, 'operator' =&gt; '&gt;='];#说明:compareValue(比较常量值) - operator(比较操作符) #说明:CCompareValidator 的别名,确保了特性的值等于另一个特性或常量. default : 默认值12['age', 'default', 'value' =&gt; null];#说明:CDefaultValueValidator 的别名, 为特性指派了一个默认值. file : 文件12['primaryImage', 'file', 'extensions' =&gt; ['png', 'jpg', 'gif'], 'maxSize' =&gt; 1024*1024*1024]; #说明:CFileValidator 的别名, 确保了特性包含了一个上传文件的名称. filter : 滤镜12[['username', 'email'], 'filter', 'filter' =&gt; 'trim', 'skipOnArray' =&gt; true]; #说明:CFilterValidator 的别名, 使用一个filter转换属性. in : 范围12['level', 'in', 'range' =&gt; [1, 2, 3]]; #说明:CRangeValidator 的别名,确保了特性出现在一个预订的值列表里. unique : 唯一性12['username', 'unique'] #说明:CUniqueValidator 的别名,确保了特性在数据表字段中是唯一的. integer : 整数1['age', 'integer']; number : 数字1['salary', 'number']; double : 双精度浮点型1['salary', 'double']; date : 日期1[['from', 'to'], 'date']; string : 字符串1['username', 'string', 'length' =&gt; [4, 24]]; boolean : 是否为一个布尔值12['字段名', 'boolean', 'trueValue' =&gt; true, 'falseValue' =&gt; false, 'strict' =&gt; true]; #说明:CBooleanValidator 的别名 when条件：1['name2', 'required', 'when' =&gt; function ($model) &#123; return empty($model-&gt;name1);&#125;],#说明: 行内验证器–123456789101112131415161718 // password is validated by foo() ['password', 'foo'] public function foo()&#123; $this-&gt;addError('password', '调用这个方法了.'); &#125;----------------['password', 'validatePassword'],public function validatePassword()&#123; $user = User::findByUsername($this-&gt;username); if (!$user || !$user-&gt;validatePassword($this-&gt;password)) &#123; $this-&gt;addError('password', 'Incorrect username or password.'); &#125;&#125; 核心验证器 en 核心验证器 zh-cn 输入验证","tags":[]},{"title":"-sql -DDL","date":"2018-10-14T07:36:53.249Z","path":"2018/10/14/mysql/sql_DDL/","text":"列操作123456789101112desc 表名; ...................................... #查看表结构alter table 表名 add 列名称 属性; .............. # 添加列alter table 表名 add 列名称 属性 after 列名; ... # 指定在某列后面添加alter table 表名 drop 列名; .............. #删除列名alter table 表名 change 旧列名 新列名 新属性 ..... #修改列名alter table a modify change_username varchar(20) ; # 修改列属性alter table a add new_username char(10); # 添加列alter table a add new_username2 char(10) after id; # 添加列,指定在某列后面添加alter table a drop new_username2; #删除列名alter table a change new_username change_username char(5); # 修改列名alter table a modify change_username varchar(20); #修改列属性 表操作12345678show tables; #查看所有表desc 表名; #查看表结构show create table 表名; # 查看创建表sqlshow tables; #查看表信息show table status where name =&apos;表名&apos;; # 查看某一张表信息rename table 旧表名 to 新表名 #修改表名字delete from user_t; #清空表内容truncate user_t; #清空表内容 id 从最初开始 索引12345678910111213141516171819202122232425262728293031key 普通索引unique key 唯一索引primary key 主键索引fulltext 全文索引unique key email(email(10)) #使用索引长度alter table 表名 add unique key(字段名); # 添加唯一索引alter table 表名 add primary key(字段名); # 添加主键索引alter table 表名 add index 索引名(字段名) #添加普通索引alter table 表名 drop index 索引名 #删除索引show index from 表名 #查看索引create table a1( name char(5), email char(15), key name(name), unique key email(email));#多列索引create table a3( name char(5), email char(15), key name(name), unique key name_email(name,email));explain select * from a3 WHERE name=&quot;张&quot;; # 分析sqlalter table a1 add unique(name); # 添加唯一索引alter table a1 add index index_name(email) #添加普通索引alter table a1 drop index index_name #删除索引show index from a1 \\G #查看索引 !!!库操作 [此操作比较危险,请谨慎操作]1234567create database 数据库; #创建库create database 数据库 default character set 字符集 collate 排序规则; #创建库指定字符集create database yourdb; #创建库create database yourdb3 default character set utf8mb4 collate utf8mb4_unicode_ci; #创建库指定字符集!!! 数据库的的名字不要直接修改,容易丢数据!!!","tags":[]},{"title":"Yii2 ArrayHelp类","date":"2018-10-13T11:05:25.590Z","path":"2018/10/13/Yii2/Yii2_ArrayHelp/","text":"ArrayHelper::toArray12345678910$post = User::find()-&gt;limit(2)-&gt;all();//$post = User::find()-&gt;limit(2)-&gt;asArray()-&gt;all();// echo \"&lt;pre&gt;\"; print_r($post);exit(); //输出所有字段 id,username,email......$data = ArrayHelper::toArray($post,[ 'common\\models\\User'=&gt;[ 'id', 'username' ]]);echo \"&lt;pre&gt;\"; print_r($data); //输出 id username ArrayHelper::merge12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152$array1 = [ 'name' =&gt; 'Yii', 'version' =&gt; '1.1', 'ids' =&gt; [ 1, ], 'validDomains' =&gt; [ 'example.com', 'www.example.com', ], 'emails' =&gt; [ 'admin' =&gt; 'admin@example.com', 'dev' =&gt; 'dev@example.com', ],];$array2 = [ 'version' =&gt; '2.0', 'ids' =&gt; [ 2, ], // Object that represents the replacement of // array value while performing [[ArrayHelper::merge()]]. 'validDomains' =&gt; new \\yii\\helpers\\ReplaceArrayValue([ 'yiiframework.com', 'www.yiiframework.com', ]), // Object that represents the removal of // array value while performing [[ArrayHelper::merge()]]. 'emails' =&gt; [ 'dev' =&gt; new \\yii\\helpers\\UnsetArrayValue(), ],];$result = ArrayHelper::merge($array1, $array2);输出:[ 'name' =&gt; 'Yii', 'version' =&gt; '2.0', 'ids' =&gt; [ //这里合并 1, 2, ], 'validDomains' =&gt; [ //这里替换 'yiiframework.com', 'www.yiiframework.com', ], 'emails' =&gt; [ //这里删除 'admin' =&gt; 'admin@example.com', ],] ArrayHelper::getValue用原生PHP从一个对象、数组、或者包含这两者的一个复杂数据结构中获取数据是非常繁琐的。 你首先得使用 isset 检查 key 是否存在, 然后如果存在你就获取它，如果不存在， 则提供一个默认返回值;;;;;;Yii 提供了一个非常方便的方法来做这件事：ArrayHelper::getValue 123456789101112131415161718192021222324252627class User&#123; public $name; public $name_002=\"我是name_002\";&#125;$array = [ 'foo' =&gt; [ 'bar' =&gt; new User(), 'bar_002' =&gt; new User(), ]];$value = isset($array['foo']['bar']-&gt;name) ? $array['foo']['bar']-&gt;name : null;$value002 = isset($array['foo']['bar']-&gt;name_002) ? $array['foo']['bar']-&gt;name_002 : null;var_dump($value); //输出 nullvar_dump($value002); //输出 我是name_002var_dump(ArrayHelper::getValue($array,'foo.bar.name')); //输出 nullvar_dump(ArrayHelper::getValue($array,'foo.bar.name_002')); //输出 我是name_002var_dump(ArrayHelper::getValue($array, function ($array,$defaultValue) &#123; //输出 我是name_002 return $array['foo']['bar']-&gt;name_002;&#125;));var_dump(ArrayHelper::getValue($array, 'foo.bar.name_002')); //输出 我是name_002var_dump(ArrayHelper::getValue($array, ['foo','bar','name_002'])); //输出 我是name_002 ArrayHelper::setValue覆盖初始值,如果数组中不存在则被创建 12345678$array = [ 'key' =&gt; [ 'in' =&gt; ['k' =&gt; 'value'] ]];ArrayHelper::setValue($array, 'key.in', ['arr' =&gt; 'val']);// 在 `$array` 中写入值的路径可以被指定为一个数组ArrayHelper::setValue($array, ['key', 'in'], ['arr' =&gt; 'val']); 输出12345[ 'key' =&gt; [ 'in' =&gt; ['arr' =&gt; 'val'] ]] 如果路径中包含一个不存在的键,他将被创建12345// 如果 `$array['key']['in']['arr0']` 不为空，则该值将被添加到数组中ArrayHelper::setValue($array, 'key.in.arr0.arr1', 'val');// 如果你想完全覆盖值 `$array['key']['in']['arr0']`ArrayHelper::setValue($array, 'key.in.arr0', ['arr1' =&gt; 'val']); 输出12345678[ 'key' =&gt; [ 'in' =&gt; [ 'k' =&gt; 'value', 'arr0' =&gt; ['arr1' =&gt; 'val'] ] ]] ArrayHelper::remove1234567891011121314$array = ['type' =&gt; 'A', 'options' =&gt; [1, 2]];$type = ArrayHelper::remove($array, 'type');print_r($type); //输出 A print_r($array); //输出 ['options' =&gt; [1, 2]]//note: 与 getValue 方法不同,remove 仅支持简单的键名称,否则返回原来数组//demo: $array = [ 'key' =&gt; [ 'in' =&gt; ['k' =&gt; 'value'] ]];ArrayHelper::remove($array, 'key.in');print_r($array); //返回原来数组 ArrayHelper::removeValue12345678$array = [ 'Bob' =&gt; 'Dylan', 'Michael' =&gt; 'Jackson', 'Mick' =&gt; 'Jagger', 'Janet' =&gt; 'Jackson'];ArrayHelper::removeValue($array, 'Jackson');print_r($array); //返回 ['Bob' =&gt; 'Dylan', 'Mick' =&gt; 'Jagger'] ArrayHelper::index1234567891011121314151617$array = [ ['id' =&gt; '123', 'data' =&gt; 'abc', 'device' =&gt; 'laptop'], ['id' =&gt; '345', 'data' =&gt; 'def', 'device' =&gt; 'tablet'], ['id' =&gt; '345', 'data' =&gt; 'hgi', 'device' =&gt; 'smartphone'],];$result = ArrayHelper::index($array, 'id');$result2 = ArrayHelper::index($array, function ($element) &#123; return $element['id']; //匿名函数作为key传递,返回值结果相同&#125;);print_r($result); print_r($result2); //输出[ '123' =&gt; ['id' =&gt; '123', 'data' =&gt; 'abc', 'device' =&gt; 'laptop'], '345' =&gt; ['id' =&gt; '345', 'data' =&gt; 'hgi', 'device' =&gt; 'smartphone'] // 原始数组的第二个元素由于相同的 ID 而被最后一个元素覆盖] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354//*******避免第一种的覆盖*****$result = ArrayHelper::index($array, null, 'id'); //第一级id$result = ArrayHelper::index($array, 'device','id'); //第一级id,第二级 device//结果分别是[ '123' =&gt; [ ['id' =&gt; '123', 'data' =&gt; 'abc', 'device' =&gt; 'laptop'] ], '345' =&gt; [ // all elements with this index are present in the result array ['id' =&gt; '345', 'data' =&gt; 'def', 'device' =&gt; 'tablet'], ['id' =&gt; '345', 'data' =&gt; 'hgi', 'device' =&gt; 'smartphone'], ]]-------------------------------------------------------------------------------------- [ '123' =&gt; [ 'laptop' =&gt; [ 'abc' =&gt; ['id' =&gt; '123', 'data' =&gt; 'abc', 'device' =&gt; 'laptop'] ] ], '345' =&gt; [ 'tablet' =&gt; [ 'def' =&gt; ['id' =&gt; '345', 'data' =&gt; 'def', 'device' =&gt; 'tablet'] ], 'smartphone' =&gt; [ 'hgi' =&gt; ['id' =&gt; '345', 'data' =&gt; 'hgi', 'device' =&gt; 'smartphone'] ] ]]note: 第三个参数会增加数组的子分组多维数组$result = ArrayHelper::index($array, 'device',['id','device']); //输出[ '123' =&gt; [ 'laptop'=&gt;[ 'laptop' =&gt; [ 'abc' =&gt; ['id' =&gt; '123', 'data' =&gt; 'abc', 'device' =&gt; 'laptop'] ] ] ], '345' =&gt; [ 'tablet'=&gt;[ 'tablet' =&gt; [ 'def' =&gt; ['id' =&gt; '345', 'data' =&gt; 'def', 'device' =&gt; 'tablet'] ], ], 'smartphone'=&gt;[ 'smartphone' =&gt; [ 'hgi' =&gt; ['id' =&gt; '345', 'data' =&gt; 'hgi', 'device' =&gt; 'smartphone'] ] ] ]]; ArrayHelper::getColumn123456$data = [ ['id' =&gt; '123', 'data' =&gt; 'abc'], ['id' =&gt; '345', 'data' =&gt; 'def'],];$ids = ArrayHelper::getColumn($array, 'id'); //输出 ['123', '345']//如需要额外的转换或者取值的方法比较复杂,第二个参数可以指定一个匿名函数 ArrayHelper::map1234567891011121314151617181920212223$array = [ ['id' =&gt; '123', 'name' =&gt; 'aaa', 'class' =&gt; 'x'], ['id' =&gt; '124', 'name' =&gt; 'bbb', 'class' =&gt; 'x'], ['id' =&gt; '345', 'name' =&gt; 'ccc', 'class' =&gt; 'y'],];$result1 = ArrayHelper::map($array, 'id', 'name');$result2 = ArrayHelper::map($array, 'id', 'name', 'class');//结果分别是[ '123' =&gt; 'aaa', '124' =&gt; 'bbb', '345' =&gt; 'ccc',]------- map($array, 'id', 'name', 'class')这里面的键逆向--------------[ 'x' =&gt; [ '123' =&gt; 'aaa', '124' =&gt; 'bbb', ], 'y' =&gt; [ '345' =&gt; 'ccc', ],] ArrayHelper::keyExists 只能是一维数组12345678910$data1 = [ 'userName' =&gt; 'Alex',];$data2 = [ 'username' =&gt; 'Carsten',];var_dump(ArrayHelper::keyExists('username',$data1,true));//输出 falsevar_dump(ArrayHelper::keyExists('username',$data2,false));//输出 true ArrayHelper::multisort 多维数组排序12345678910111213$data = [ ['age' =&gt; 30, 'name' =&gt; 'Alexander'], ['age' =&gt; 30, 'name' =&gt; 'Brian'], ['age' =&gt; 19, 'name' =&gt; 'Barney'],];ArrayHelper::multisort($data,['age','name'],[SORT_ASC,SORT_DESC]);//输出, age 排序, name 排序[ ['age' =&gt; 19, 'name' =&gt; 'Barney'], ['age' =&gt; 30, 'name' =&gt; 'Brian'], ['age' =&gt; 30, 'name' =&gt; 'Alexander'],]; ArrayHelper::isIndexed ArrayHelper::isAssociative 检测数组是索引数组还是联合数组1234567// 不指定键名的数组$indexed = ['Qiang', 'Paul'];echo ArrayHelper::isIndexed($indexed); //true// 所有键名都是字符串$associative = ['framework' =&gt; 'Yii', 'version' =&gt; '2.0'];echo ArrayHelper::isAssociative($associative); //true ArrayHelper::isIn ArrayHelper::isSubset 测试阵列123456// trueArrayHelper::isIn('a', ['a']);// trueArrayHelper::isIn('a', new \\ArrayObject(['a']));// trueArrayHelper::isSubset(new \\ArrayObject(['a','c']),new \\ArrayObject(['a','b','c'])); ArrayHelper::filter 过滤1234567891011121314151617181920212223$array = [ 'A' =&gt; [1, 2], 'B' =&gt; [ 'C' =&gt; 1, 'D' =&gt; 2, ], 'E' =&gt; 1,];$result1 = ArrayHelper::filter($array,['A']);$result2 = ArrayHelper::filter($array,['A','B.C']);$result3 = ArrayHelper::filter($array,['B','!B.C']);//输出['A' =&gt; [1, 2]];//输出[ 'A' =&gt; [1, 2], 'B' =&gt; ['C' =&gt; 1]]//输出[ 'B' =&gt; ['D' =&gt; 2],] 官网 zh-cn","tags":[]},{"title":"win -Yii2 镜像源","date":"2018-09-29T22:46:22.413Z","path":"2018/09/30/win/composer/","text":"查看composer 全局设置1234composer config -glcomposer 镜像源配置文件:C:\\Users\\Administrator\\AppData\\Roaming\\Composer\\config.json 修改镜像源1234国内镜像composer config -g repo.packagist composer https://packagist.phpcomposer.com国际镜像composer config -g repo.packagist composer https://packagist.org","tags":[]},{"title":"wind -Yii2 添加扩展","date":"2018-09-29T22:46:22.406Z","path":"2018/09/30/win/yii2_composer_vendor/","text":"安装完 Yii2 没有vendor目录12在 yii 跟目录下执行,首次添加最新扩展包composer update 添加 redis 扩展1234567891011121314在根目录执行 composer require yiisoft/yii2-redis 这时在 composer.json 中会自动添加 yiisoft/yii2-redis\": \"^2.0\" 在 vendor/yiisoft/extension.php 中会自动添加'yiisoft/yii2-redis' =&gt; array( 'name' =&gt; 'yiisoft/yii2-redis', 'version' =&gt; '2.0.9.0', 'alias' =&gt; array( '@yii/redis' =&gt; $vendorDir . '/yiisoft/yii2-redis/src', ), ), !!!添加 redis 扩展021234567891011在composer.json 文件中添加 redis扩展 \"yiisoft/yii2-redis\": \"~2.0.0\"\"require\": &#123; \"php\": \"&gt;=5.4.0\", \"yiisoft/yii2\": \"~2.0.6\", \"yiisoft/yii2-bootstrap\": \"~2.0.0\", \"yiisoft/yii2-swiftmailer\": \"~2.0.0 || ~2.1.0\", \"yiisoft/yii2-redis\": \"~2.0.0\"&#125;,然后在根目录执行 composer update,这时候会自动升级 composer.lock 文件,redis 扩展添加成功,[ !!!这种方法会自动升级扩展!!! ] !!! install , update , require添加一个新的扩展包建议使用 composer require 另外2个会更新所有扩展到最新版本 composer install 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它. composer update 为了获取依赖的最新版本，并且升级 composer.lock 文件，你应该使用 update 命令。 扩展扩展: 这里配置 reids 后,使用 phpstorm 写代码的时候,redis是没有提示的,比如 Yii::$app-&gt;redis-&gt;set(“hello”,”world”);,这里的reids在phpstorm中是跟踪不到的,解决这个问题,在 \\vendor\\yiisoft\\yii2\\base\\Application.php 中的上面注释中添加如下: @property \\yii\\redis\\Connection $redis 这样 phpstorm 就可以跟踪代码,并且 Yii::$app-&gt;redis-&gt;set(“hello”,”world”); 这个set 也会有提示; 扩展02 view 层 render 提示12# 一般情况下 view 层这个是没有提示的, 在页面的上面添加 /* @var $this \\yii\\web\\View */&lt;?= $this-&gt;render('footer/_about'); ?&gt; 官方解释 https://docs.phpcomposer.com/03-cli.html#init https://docs.phpcomposer.com/03-cli.html#init","tags":[]},{"title":"sql DML (insert update delete select)基本使用","date":"2018-09-28T15:17:32.613Z","path":"2018/09/28/mysql/sql_DML/","text":"事务123456789101112start transaction;update 表名 set money=money+500 where id = 2;update 表名 set money=money-500 where id = 1;commit;select * from 表名 where id =1;select * from 表名 where id =2;+++++++start transaction;update 表名 set money=money+500 where id = 2;rollback; where having group查询1234567891011121314151617181920212223242526272829303132333435363738394041424344454647要求:查询出2门及2门以上不及格者的平均成绩 demo sql如下:--------------------------------------------------------------------------CREATE TABLE `student2` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL, `subject` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL, `score` double(255,0) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;INSERT INTO `student2` VALUES (&apos;1&apos;, &apos;张三&apos;, &apos;数学&apos;, &apos;90&apos;);INSERT INTO `student2` VALUES (&apos;2&apos;, &apos;张三&apos;, &apos;语文&apos;, &apos;50&apos;);INSERT INTO `student2` VALUES (&apos;3&apos;, &apos;张三&apos;, &apos;地理&apos;, &apos;40&apos;);INSERT INTO `student2` VALUES (&apos;4&apos;, &apos;李四&apos;, &apos;语文&apos;, &apos;55&apos;);INSERT INTO `student2` VALUES (&apos;5&apos;, &apos;李四&apos;, &apos;政治&apos;, &apos;45&apos;);INSERT INTO `student2` VALUES (&apos;6&apos;, &apos;王五&apos;, &apos;政治&apos;, &apos;30&apos;);INSERT INTO `student2` VALUES (&apos;7&apos;, &apos;马六&apos;, &apos;地理&apos;, &apos;80&apos;);INSERT INTO `student2` VALUES (&apos;8&apos;, &apos;马六&apos;, &apos;英语&apos;, &apos;90&apos;);+----+------+---------+-------+--------+| id | name | subject | score | score2 |+----+------+---------+-------+--------+| 1 | 张三 | 数学 | 90 | 10 || 2 | 张三 | 语文 | 50 | 10 || 3 | 张三 | 地理 | 40 | 10 || 4 | 李四 | 语文 | 55 | 10 || 5 | 李四 | 政治 | 45 | 10 || 6 | 王五 | 政治 | 30 | 10 || 7 | 马六 | 地理 | 80 | 10 || 8 | 马六 | 英语 | 90 | 10 |+----+------+---------+-------+--------+--------------------------------------------------------------------------select name,subject,score,score&lt;60 from student2select name,sum(score&lt;60) as gk ,avg(score) as pj from student2 group by name select name,sum(score&lt;60) as gk ,avg(score) as pj from student2 group by name HAVING gk&gt;=2结果:+--------+------+---------+| name | gk | pj |+--------+------+---------+| 张三 | 2 | 60.0000 || 李四 | 2 | 50.0000 |+--------+------+---------++++++++++++++ having 是对表的结果进行查询筛选 ++++++++select * from student2 where id&gt;1select * from student2 having id&gt;1select * from student2 where id&gt;1 having id&lt;5 INNER JOIN 查询123456789101112131415161718192021222324252627282930313233demos sql:--------------------------------------------------------------------------DROP TABLE IF EXISTS `m`;CREATE TABLE `m` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `hid` int(11) DEFAULT NULL COMMENT &apos;主队ID&apos;, `gid` int(11) DEFAULT NULL COMMENT &apos;客队ID&apos;, `mres` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &apos;比赛结果&apos;, `matime` date DEFAULT NULL COMMENT &apos;比赛开始时间&apos;, PRIMARY KEY (`id`)) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;INSERT INTO `m` VALUES (&apos;1&apos;, &apos;1&apos;, &apos;2&apos;, &apos;2:0&apos;, &apos;2006-05-21&apos;);INSERT INTO `m` VALUES (&apos;2&apos;, &apos;2&apos;, &apos;3&apos;, &apos;1:2&apos;, &apos;2006-06-21&apos;);INSERT INTO `m` VALUES (&apos;3&apos;, &apos;3&apos;, &apos;1&apos;, &apos;2:5&apos;, &apos;2006-06-25&apos;);INSERT INTO `m` VALUES (&apos;4&apos;, &apos;2&apos;, &apos;1&apos;, &apos;3:2&apos;, &apos;2006-07-21&apos;);DROP TABLE IF EXISTS `t`;CREATE TABLE `t` ( `tid` int(11) NOT NULL AUTO_INCREMENT, `tname` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &apos;队伍名称&apos;, PRIMARY KEY (`tid`)) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;INSERT INTO `t` VALUES (&apos;1&apos;, &apos;国安&apos;);INSERT INTO `t` VALUES (&apos;2&apos;, &apos;申花&apos;);INSERT INTO `t` VALUES (&apos;3&apos;, &apos;布尔联队&apos;);--------------------------------多次使用INNER JOIN 查询----------------------SELECT m.id,t1.tname,mres,t2.tname,matime FROM mINNER JOIN t as t1 on m.hid=t1.tid INNER JOIN t as t2 ON m.gid=t2.tid union 和 union all!!!! 使用union waring:1.各语句的列数相同2.列名称未必要一直,列名称会使用第一条sql 的列名称为准3.完全相等行将会合并,合并是比较耗时的操作,使用”union all” 可以避免合并 12345678910111213141516171819202122232425262728293031demos sql:--------------------------------------------------------------------------DROP TABLE IF EXISTS `a`;CREATE TABLE `a` ( `id` char(1) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &apos;&apos;, `num` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;INSERT INTO `a` VALUES (&apos;a&apos;, &apos;5&apos;);INSERT INTO `a` VALUES (&apos;b&apos;, &apos;10&apos;);INSERT INTO `a` VALUES (&apos;c&apos;, &apos;15&apos;);INSERT INTO `a` VALUES (&apos;d&apos;, &apos;10&apos;);DROP TABLE IF EXISTS `b`;CREATE TABLE `b` ( `id` char(1) COLLATE utf8mb4_unicode_ci NOT NULL, `num` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;INSERT INTO `b` VALUES (&apos;b&apos;, &apos;5&apos;);INSERT INTO `b` VALUES (&apos;c&apos;, &apos;15&apos;);INSERT INTO `b` VALUES (&apos;d&apos;, &apos;20&apos;);INSERT INTO `b` VALUES (&apos;e&apos;, &apos;99&apos;);---------------------------------分组后求和--------------------------------------select id,sum(num) from(select id,num from aunion allselect id,num from b) as tmpgroup by id;","tags":[]},{"title":"-systemctl 常用命令","date":"2018-09-26T01:39:34.070Z","path":"2018/09/26/ubuntu/systemctl_常用命令/","text":"systemctl 常用命令 常用命令 1234567891011121314151617181920212223242526272829303132333435常用命令 重新加载service文件： systemctl daemon-reload启动一个服务： systemctl start nginx-1.13.0.service关闭一个服务： systemctl stop nginx-1.13.0.service重启一个服务： systemctl restart nginx-1.13.0.service显示一个服务的状态： systemctl status nginx-1.13.0.service在开机时启用一个服务： systemctl enable nginx-1.13.0.service在开机时禁用一个服务： systemctl disable nginx-1.13.0.service查看服务是否开机启动： systemctl is-enabled nginx-1.13.0.service查看已启动的服务列表： systemctl list-unit-files|grep enabled查看启动失败的服务列表：systemctl --failedapache启动 systemctl start httpd停止 systemctl stop httpd重启 systemctl restart httpdmysql启动 systemctl start mysqld停止 systemctl stop mysqld重启 systemctl restart mysqldphp-fpm启动 systemctl start php-fpm停止 systemctl stop php-fpm重启 systemctl restart php-fpmnginx启动 systemctl start nginx停止 systemctl stop nginx重启 systemctl restart nginx","tags":[]},{"title":"linux-DDU  -vagrant 简单使用02","date":"2018-09-25T15:13:16.230Z","path":"2018/09/25/centos/vagrant_02/","text":"添加一个 box12vagrant box listvagrant box add centos7 centos7-vagrant-180906.box 初始化1vagrant init centos7 启动12vagrant up --provider virtualbox启动时,SSH 没有权限,下面修改配置, 进入虚拟机 virtualBox ,运行远程登录123456789vim /etc/ssh/sshd_config #修改配置文件PubkeyAuthentication yes #注释取消掉重启服务 systemct1 restart sshd.servicewindows端: ssh vagrant@127.0.0.1 -p2222使用密码登录windows端: ssh vagrant@192.168.56.3 #使用指定ip登录 windows 添加私钥 ssh 免密码登录,[在windows中执行]123456vagrant ssh-config #查看实时连接信息cd /c/Users/Administrator/.vagrant.d/scp -P2222 vagrant@127.0.0.1:~/.ssh/id_rsa ./ #从远程复制私钥到windowsmv insecure_private_key insecure_private_key_old #备份原来文件mv id_rsa insecure_private_key 设置 linux 公钥12cp authorized_keys authorized_keys_oldcat id_rsa.pub &gt; authorized_keys 配置 Vagrantfilevagrantfiile1234567891011config.vm.box = \"centos7\"config.vm.network \"private_network\", ip: \"192.168.56.3\"config.vm.network \"public_network\",:bridge=&gt;'en0: Wi-Fi (AirPort)'config.vm.synced_folder \"E:/data_web/webroot/\", \"/data\",mount_options: [\"dmode=775,fmode=775\"]------------------ 这三种写法都可以 ---------------#config.vm.network \"public_network\",:bridge=&gt;'en0: Wi-Fi (AirPort)'#config.vm.network \"public_network\", ip: \"192.168.1.201\"#config.vm.network \"public_network\", ip: \"192.168.1.200\", :bridge =&gt; 'en0: Wi-Fi (AirPort)' 重启1vagrant reload okwindows中 E:/data_web/webroot/ 下创建文件 ,linux 中 /data ,自动同步","tags":[]},{"title":"-curl  一个利用URL规则在命令行下工作的文件传输工具","date":"2018-09-18T16:13:03.074Z","path":"2018/09/19/ubuntu/linux_DDU_curl/","text":"在 linux 中 curl 是一款利用 URL 规则在命令下工作的开源文件传输工具. 以下 demo 中,使用文件 index.php 作为实例演示, index.php 中内容为 1234567//访问本页面的地址为 www.test.com&lt;?phpprint_r($_GET);echo \"分隔符\";print_r($_POST); 没有参数, 获取页面内容1curl www.test.com 参数 I 显示 HTTP 头123curl -I www.test.com [显示头信息,不显示内容]curl -i www.test.com [显示头和内容] 链接保存到文件中1curl www.test.com &gt; index.html 使用 -d -X发送 POST 请求12curl -d \"post1=001&amp;post2=002\" www.test.comcurl -d \"post1=001&amp;post2=002\" -X POST www.test.com # X大写 POST 大写 使用 -d -G 发送 GET 请求 1curl -d \"get01=111&amp;get02=002\" -G GET www.test.com","tags":[]},{"title":"linux-DDU -ln  为文件创建连接","date":"2018-09-11T16:39:29.395Z","path":"2018/09/12/ubuntu/linux_DDU_ln/","text":"ln 使用的时候要写全路径,否则编辑链接后的文件可能会出现错误:1234root@ubuntu:/home/fei/web# tail -f index.html tail: cannot open 'index.html' for reading: Too many levels of symbolic linkstail: no files remainingroot@ubuntu:/home/fei/web# ll 命令格式1ln [参数] [源文件或目录][目标文件或目录] demo 硬链接12ln /home/fei/www/index.html /home/fei/web/ ln /home/fei/www/index.html /home/fei/web/index.txt # [硬链接]源文件变化后.链接的文件也随着变化 硬链接链接文件删除后,源文件不影响;删除源文件后,链接文件不收影响 软连接符号 -s [ 相当于windows中的快捷方式]12ln -s /home/fei/www/test01.txt /home/fei/web/ln -s /home/fei/www/test05.txt /home/fei/web/test_05.txt #test01.txt 源文件变化后.链接的文件也随着变化 软连接符号 -s链接文件删除后,源文件不影响;删除源文件后,链接文件失效 软连接目录1ln -s /home/fei/www/aaa/ /home/fei/web/","tags":[]},{"title":"linux-DDU  -vagrant 简单使用","date":"2018-09-11T15:43:43.355Z","path":"2018/09/11/centos/vagrant简单使用/","text":"常用命令vagrant 常用命令介绍 123456789101112131415vagrant init [初始化]vagrant up [启动虚拟机]vagrant halt [关闭虚拟机]vagrant reload [重新启动虚拟机,主要用于重新载入配置文件]vagrant suspend [暂停虚拟机,这是虚拟机的内存,配置信息会暂存至硬盘]vagrant resume [恢复虚拟机]vagrant ssh [ssh登录到虚拟机]vagrant status [查看虚拟机运行状态]vagrant destroy [销毁当前虚拟机]vagrant box add [添加一个box]vagrant box list [显示当前已经添加的box列表]vagrant box remove [删除相应的box]vagrant package [打包命令,可以吧当前运行的虚拟机环境进行打包]vagrant plugin [用于安装卸载插件]vagrant ssh-config [输出用于ssh连接的一些信息] 一般使用 1234567891011121314151617181920212223242526272829303132333435363738391. vagrant --help2. vagrant -version3.显示当前已经添加的box列表 vagrant box list 4. 添加 box vagrant box add new-box-name yours-box-name.box(你的box文件)5. 删除 box vagrant box remove yours-box-name6. 指定 box 初始化 vagrant init yours-box-name7.启动 vagrant up vagrant up --provider virtualbox8.关闭 vagrant halt9.重新启动,加载配置文件 vagrant reload10. 挂起 vagrant suspend11. ssh登录 vagrant ssh12. 打包box打包前删除一个文件sudo rm -rf /etc/udev/rules.d/70-persistent-net.rulesvagrant packagevagrant package --base ubuntu18_default_1543569229538_92064 --output php72_mysql8_nginx.box demo: vagrant --help vagrant -version vagrant box list vagrant box add centos7 centos7-vagrant-123456.box vagrant box list vagrant init centos7 vagrant up --provider virtualbox vagrant ssh vagrant reload vagrant ssh vagrant halt ubuntu box -releases版本 centos box","tags":[]},{"title":"-xargs  用作替换工具，读取输入数据重新格式化后输出","date":"2018-08-28T06:12:27.187Z","path":"2018/08/28/ubuntu/linux_DDU_xargs/","text":"demo在目录中搜索含有固定字符串文件命令，比如：在当前目录(及其子目录)中搜索扩展名为 .txt 结尾文件中包含 hello 的内容的行 1234567891011搜索文件中内容grep \"hello\" test01.txt查找 .txt 结尾的文件find -name \"*.txt\"find /home/fei/www -name \"*.txt\"******************************************************************************find -name \"*.txt\" | xargs grep \"hello\"find /home/fei/www -name \"*.txt\" | xargs grep \"hello\"locate *.txt | xargs grep \"hello\" 单行输出文本内容123cat test01.txt | xargscat test01.txt | xargs -n3 [选项 -n] 其他使用场景demo12cat url.txt | xargs wget -c [下载url.txt 中链接的内容]ls | xargs -n2","tags":[]},{"title":"常见4种排序： 冒泡排序、选择排序、插入排序、快速排序","date":"2018-08-26T16:39:59.459Z","path":"2018/08/27/面试/算法/排序/","text":"这里介绍4种常见排序： 冒泡排序、选择排序、插入排序、快速排序 、二分查找 冒泡排序原理：对一组数据，比较相邻数的大小，将值大的放到后面。 1234567891011121314151617181920212223&lt;?php// 冒泡排序function bubbleOrder($arr)&#123; $count = count($arr); $temp = 0; // 外层控制排序次数 for ($i = 0; $i &lt; $count - 1; $i++) &#123; // 内层控制每轮比较次数 for ($j = 0; $j &lt; $count - 1 - $i; $j++) &#123; if ($arr[$j] &gt; $arr[$j + 1]) &#123; $temp = $arr[$j]; $arr[$j] = $arr[$j + 1]; $arr[$j + 1] = $temp; &#125; // print_r($arr); echo \"&lt;br&gt;\"; &#125; &#125; return $arr;&#125;$arr = array(5, 2, 7, 6, 9, 3);$res = bubbleOrder($arr);var_dump($res); 选择排序原理：在一组数据中，选出最小的数与第一个位置交换，​ 然后在剩下的数据中在找出最小的数和第二个位置交换​ 然后在剩下的数据中在找出最小的数和第三个位置交换​ 依次类推直到倒数第二个数和最后一个数对比 12345678910111213141516171819202122232425262728&lt;?php// 选择排序function selcetOrder($arr)&#123; // 定义中间变量 $temp = 0; $count = count($arr); for ($i = 0; $i &lt; $count - 1; $i++) &#123; //定义最小位置 $minIndex = $i; for ($j = $i + 1; $j &lt; $count; $j++) &#123; if ($arr[$j] &lt; $arr[$minIndex]) &#123; $minIndex = $j; &#125; &#125; if ($i != $minIndex) &#123; $temp = $arr[$i]; $arr[$i] = $arr[$minIndex]; $arr[$minIndex] = $temp; &#125; &#125; return $arr;&#125;$arr = array(5, 2, 7, 6, 9, 3);$res = selcetOrder($arr);var_dump($res); 插入排序原理： 将需要排序的书，与前面已经排好的数据从后往前进行比较，使其插入到相应的位置； 1234567891011121314151617181920212223&lt;?php// 插入排序function insertOrder($arr)&#123; $len = count($arr); //控制总循环次数 for ($i = 0; $i &lt; $len; $i++) &#123; $temp = $arr[$i]; for ($j = $i - 1; $j &gt;= 0; $j--) &#123; //从当前位置从后往前进行对比 if ($temp &lt; $arr[$j]) &#123; $arr[$j + 1] = $arr[$j]; $arr[$j] = $temp; &#125;else&#123; break; &#125; &#125; &#125; return $arr;&#125;$arr = array(5, 2, 7, 6, 9, 3);$res = insertOrder($arr);var_dump($res); 快速排序原理：初始一个中间值(一般选择第一个)，将需要排序的数组分成3部分，小于中间的值放左边、中间值、大于中间值的放右边，继续用递归用相同的方式来排序左边和右边，最后合并数组 1234567891011121314151617181920212223242526&lt;?php// 快速排序function quickOrder($arr)&#123; // 判断是否需要运行,下面要拿出一个中间值 if (count($arr)&lt;=1) &#123; return $arr; &#125; $middle = $arr[0]; // 中间值 $left = array(); $right = array(); for ($i = 1; $i &lt; count($arr); $i++) &#123; if ($middle &lt; $arr[$i]) &#123; $right[] = $arr[$i]; &#125; else &#123; $left[] = $arr[$i]; &#125; &#125; // 递归排序划分好的2边数组 $left = quickOrder($left); $right = quickOrder($right); return array_merge($left, array($middle), $right);&#125;$arr = array(5, 2, 7, 6, 9, 3);$res = quickOrder($arr);var_dump($res); 二分查找1234567891011121314151617181920// 正向排序的数组$arr = array(1, 3, 5, 7, 9, 11);// $arr = array(1, 3, 20, 7, 9, 11);// $arr2 = array(11, 9, 7, 5, 3, 1);function binary_search($array, $low, $high, $k)&#123; if ($low &lt;= $high)&#123; $mid = intval(($low+$high)/2); //intval();floor() 都可以无所谓 if ($array[$mid] == $k)&#123; return $mid; &#125;elseif ($k &lt; $array[$mid])&#123; return binary_search($array, $low, $mid-1, $k); &#125;else&#123; return binary_search($array, $mid+1, $high, $k); &#125; &#125; return '必须是正向排序数组';&#125;echo binary_search($arr, 0, 5, 9);","tags":[]},{"title":"-locate 搜索","date":"2018-08-25T18:20:48.725Z","path":"2018/08/26/ubuntu/linux_DDU_locate_updatedb/","text":"使用 locate 搜索前一般先执行 updatedb 来更新 命令格式1locate [选项] [参数] 选项123-n 至多显示 n个输出。-r 使用正规运算式 做寻找的条件。-c 查询指定文件的数目 demo 123locate pwdlocate -n 2 pwd [显示2条输出]locate -r pwdt.* [使用正则] 指定位置搜索1locate aaa/linux.txt 查询指定文件的数目12locate -c pwdlocate -c pwdt","tags":[]},{"title":"-rename  文件重命名","date":"2018-08-19T13:05:44.344Z","path":"2018/08/19/ubuntu/linux_DDU_rename/","text":"命令格式，文件重命名1234567rename [-v] [-n] [-f] perlexpr[files]-v 打印被重命名的文件-n 只显示被重命名的文件，而不实际重命名-f 覆盖已经存在的文件perlexpr 语言格式的正则表达式 demo把 test02.txt 重命名为 test03.txt1rename 's/test02.txt/test03.txt/' test02.txt 参数 -v 打印被重命名的文件1rename -v 's/test03.txt/test02.txt/' test03.txt 参数 -n 只显示被重命名的文件，而不实际重命名1rename -n 's/test02.txt/test03.txt/' test02.txt [实际没有重命名] 参数 -f 覆盖已经存在的文件12rename -f 's/test02.txt/test08.txt/' test02.txtrename -f 's/test02.txt/test08.txt/' *.txt [也可以] 表达式中 替换用 s ,转化用 y 或者trdemo ： 将文件名改为大写12rename 'y/a-z/A-Z/' *.txtrename 'tr/a-z/A-Z/' *.txt","tags":[]},{"title":"-nl  计算文件中行号","date":"2018-08-13T12:26:48.172Z","path":"2018/08/13/ubuntu/linux_DDU_nl/","text":"介绍： 计算文件中行号； 命令格式1nl [选项] [参数] 选项12345678910-b ：指定行号指定的方式，主要有两种： -b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)； -b t ：如果有空行，空的那一行不要列出行号(默认值)；-n ：列出行号表示的方法，主要有三种： -n ln ：行号在萤幕的最左方显示； -n rn ：行号在自己栏位的最右方显示，且不加 0 ； -n rz ：行号在自己栏位的最左方显示，且加 0 ；-w ：行号栏位的占用的位数。 参数-b 指定行号列出 test01.txt 的内容【-b a ; -b t】 demo 123nl -b a test01.txt 【空行显示行号】nl -b t test01.txt 【空行不显示行号】 参数-n 显示行号列出test01.txt 的内容【-n ln ; -n ln; -n rz】 demo 12345nl -n ln test01.txt 【行号在左】nl -n rn test01.txt 【行号在右】nl -n rz test01.txt 【行号在左，且加零】 参数-w 列出行号占用的位数 demo 12nl -n rz -w 3 test01.txtnl -n rz -w 5 test01.txt","tags":[]},{"title":"Ubuntu -nginx","date":"2018-06-07T02:23:37.436Z","path":"2018/06/07/ubuntu/linux_ubuntu_nginx_02/","text":"日志切割 testlog.sh使用脚本切割 nginx 日志，脚本内容如下 123456789101112131415161718192021222324252627282930313233--------------------------nginx.conf--------------------- #打开注释 #log_format main server &#123; listen 80; server_name test.com; location / &#123; root test.com; index index.html index.htm; &#125; access_log logs/test.com.access.log main; &#125; --------------------------testlog.sh---------------------#!/bin/bashLOGPATH=/data/server/nginx-1.4.2/logs/test.com.access.logBASEPATH=/data/$(date -d yesterday +%Y%m)mkdir -p $BASEPATHbak=$BASEPATH/$(date -d yesterday +%Y%m%d%H%M).test.com.access.log#echo $bakmv $LOGPATH $baktouch $LOGPATHkill -USR1 cat /data/server/nginx-1.4.2/logs/nginx.pid-------------------------------------------------- location 精准匹配，正则匹配1234Syntax: location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;location @name &#123; ... &#125;Default: —Context: server, location location 模块 rewrite 重写12","tags":[]},{"title":"-head -tail  输出文件中的内容","date":"2018-06-06T06:02:36.797Z","path":"2018/06/06/ubuntu/linux_DDU_head_tail/","text":"命令 head命令格式1head [选项] [参数] 选项1-n&lt;数字&gt;：指定显示头部内容的行数； demo 默认显示文件前 10 行内容 参数 n 显示文件的前 2 行 123456#显示文件的前2行head -2 d01.txthead -n 2 d01.txt#输出除了文件最后 2 行的全部内容head -n -2 d01.txt 命令 tail命令格式1tail [选项] [参数] 选项123-n&lt;N&gt;或——line=&lt;N&gt;：输出文件的尾部N（N位数字）行内容。-f&lt;name/descriptor&gt;：显示文件最新追加的内容。“name”表示以文件名的方式监视文件的变化。-F：与选项“-follow=name”和“--retry\"连用时功能相同； demo 默认显示文件最后 10 行内容 选项 n 显示文件最后 2 行内容 12345tail -2 d01.txttail -n 2 d01.txt#从文件第 3 行开始显示内容tail -n +3 d01.txt 选项 f ,动态显示文件内容 123ping 127.0.0.1 &gt; d01.log &amp; #创建动态任务tail -f d01.log #动态显示文件内容 选项 tail -F 功能与 tail -f 功能相同，不同的是执行此命令时文件可以不存在","tags":[]},{"title":"-less -more  显示目录列表","date":"2018-05-30T00:28:16.082Z","path":"2018/05/30/ubuntu/linux_DDU_less_more/","text":"less 与 more 类似，但使用 less 可以随意浏览文件，而且 less 在查看之前不会加载整个文件 命令 less命令格式1less [选项] [参数] 选项1234567891011121314/字符串：向下搜索“字符串”的功能?字符串：向上搜索“字符串”的功能n：重复前一个搜索（与 / 或 ? 有关）N：反向重复前一个搜索（与 / 或 ? 有关）b 向后翻一页d 向后翻半页h 显示帮助界面q 退出less 命令u 向前滚动半页y 向前滚动一行空格键 滚动一行回车键 滚动一页[pagedown]： 向下翻动一页[pageup]： 向上翻动一页 参数文件：指定要分屏显示内容的文件。 demo12345678910111213less d01.txt #查看文件ps -ef | less #PS查看进程信息并通过 less 分页显示history | less #查看历史使用记录并通过 less 分页显示q 退出less 命令[pagedown]： 向下翻动一页[pageup]： 向上翻动一页less d01.txt d02.txt d03.txt #浏览多个文件说明：输入 :n后,切换到 d02.txt,继续输入:n后,切换到 d03.txt输入 :p后,切换到 d02.txt,继续输入:p后,切换到 d01.txt 命令 moremore命令从前向后读取文件，因此在启动时就加载整个文件。 命令格式1less [选项] [参数] 选项123456789+n 从笫n行开始显示-n 定义屏幕大小为n行+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示-d 提示“Press space to continue，'q' to quit（按空格键继续，按q键退出）”，禁用响铃功能-l 忽略Ctrl+l（换页）字符-p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似-s 把连续的多个空行显示为一行-u 把文件内容中的下画线去掉 常用命令 123456789Enter 向下n行，需要定义。默认为1行Ctrl+F 向下滚动一屏空格键 向下滚动一屏Ctrl+B 返回上一屏= 输出当前行的行号：f 输出文件名和当前行的行号V 调用vi编辑器!命令 调用Shell，并执行命令 q 退出more demo12more +1 d01.txt #显示文件中从第1行器内容more +2 d01.txt #显示文件中从第2行器内容 从文件中查找第一个出现 “d01” 字符串的行，并从该处前2行显示输出从文件中查找第一个出现 “3” 字符串的行，并从该处前2行显示输出从文件中查找第一个出现 “hello” 字符串的行，并从该处前2行显示输出 123more +/d01 d01.txtmore +/3 d01.txtmore +/hello d01.txt 123456789设定每屏显示行数more -1 d01.txtmore -2 d01.txt列一个目录下的文件，由于内容太多，我们应该学会用more来分页显示。这得和管道 | 结合起来ls -l | more -1ls -l | more -2q 键退出，enter向下","tags":[]},{"title":"-mkdir  -rmdir 显示目录列表","date":"2018-05-28T09:47:37.194Z","path":"2018/05/28/ubuntu/linux_DDU_mkdir_rmdir/","text":"mkdir 不指定参数，创建文件默认权限 为 755 rwxr-xr-x 命令格式1mkdir [选项] [参数] 选项123-m&lt;目标属性&gt;或--mode&lt;目标属性&gt;建立目录的同时设置目录的权限；-p或--parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；--version 显示版本信息。 参数目录：指定要创建的目录列表，多个目录之间用空格隔开 demo选项 -m 创建目录并设置权限1mkdir -m 700 /www/test #在 /www 目录下创建子目录test，并设置 700 权限 选项 -m 创建 子目录1mkdir -p aaa/bbb #在当前目录创建 aaa 目录 和 aaa下的bbb目录 rmdir只可以删除空目录 命令格式1rmdir [选项] [参数] 选项1234-p或--parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；-v或-verboes：显示命令的详细执行过程；--help：显示命令的帮助信息；--version：显示命令的版本信息。 参数目录列表：要删除的空目录列表。当删除多个空目录时，目录名之间使用空格隔开。 选项 -p 删除空目录12rmdir aaa/bbb #删除 bbb 目录rmdir -p aaa/bbb #删除 bbb 目录，如果aa目录是空也一并删除","tags":[]},{"title":"-sh  shell 脚本","date":"2018-05-28T01:00:49.976Z","path":"2018/05/28/ubuntu/linux_DDU_sh/","text":"简单shell，打印昨天时间，并输出到屏幕上，注意 反引号echo 把执行命令的返回结果输出到屏幕上运行脚本 sh test.sh ; test.sh 内容如下 123456#!/bin/bashecho 'date -d yesterday +%Y%m%d' #没有使用反引号echo `date -d yesterday +%Y%m%d` #使用反引号，输出昨天时间echo `ls /www` #使用反引号，显示 www 目录下文件touch /www/test.txt #在 www 目录下创建 test.txt 文件 demo 2,创建文件，运行命令 sh testlog.sh 12345#!/bin/bashBASEPATH=/data/$(date -d yesterday +%Y%m)bak=$BASEPATH/$(date -d yesterday +%Y%m%d%H%M).test.txtmkdir -p $BASEPATHecho $BASEPATH","tags":[]},{"title":"-cat  连接文件并打印到标准输出设备上 -split 切割文件","date":"2018-05-28T00:28:16.301Z","path":"2018/05/28/ubuntu/linux_DDU_cat_split/","text":"命令格式1cat [选项] [参数] 选项12-n或-number：有1开始对所有输出的行数编号；-b或--number-nonblank：和-n相似，只不过对于空白行不编号； 参数 n 输出行数编号1cat -n d01.txt 参数 b 输出行数编号，忽略空白行1cat -b d01.txt 输出多个文件内容1cat d01.txt d02.txt demo 2 把文件内容写入到新文件中12cat d01.txt &gt; new.txt #将文件 d01.txt 内容放入文件 new.txt 中cat d01.txt d02.txt &gt; new.txt #将文件 d01.txt 和 d02.txt 内容放入文件 new.txt 中 split 切割文件1234567#参数# -a 指定长度# -d 指定数字# -l 按行数切割文件# -b 按大小切割文件split -l 7 test.txt # l 选项根据文件行数切割,每7行切割为一个文件 指定为数字后缀切割123456#-d 指定为数字后缀, -a 指定数字长度split -l 7 test.txt -d -a 4#-a 指定长度 split -l 7 -a 4 test.txt#前缀为fei_split -l 7 -a 4 test.txt fei_ 按大小切割文件1split -b 100 test.txt #每100kb切割文件 当用split 分割好文件后,使用cat可以把文件合并为原来的文件12split -l 7 -a 4 test.txt fei_ #分割文件cat fei_a* &gt; bbb.txt #合并文件","tags":[]},{"title":"-sed 自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序","date":"2018-05-04T03:35:28.803Z","path":"2018/05/04/ubuntu/linux_DDU_sed/","text":"介绍： sed 是实现对流的编辑。要修改原文件记得用参数 i 。 sed命令格式1234sed [options] 'command' file(s)sed [options] -f scriptfile file(s)sed 选项 '参数/文本中内容/新内容' file(s) 选项1234-e&lt;script&gt;或--expression=&lt;script&gt;：以选项中的指定的script来处理输入的文本文件；-h或--help：显示帮助；-n或--quiet或——silent：仅显示script处理后的结果；-V或--version：显示版本信息。 命令12345678a\\ 在当前行下面插入文本。 没有特殊字符直接写 a 即可i\\ 在当前行上面插入文本。 没有特殊字符直接写 i 即可d 删除，删除选择的行。D 删除模板块的第一行。s 替换指定字符n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。p 打印模板块的行。q 退出Sed。 sed 替换标记1234g 表示行内全面替换。 p 表示打印行。 \\1 子串匹配标记&amp; 已匹配字符串标记 sed 元字符集12345678910111213^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。$ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。. 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。* 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。[] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。 [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。\\(..\\) 匹配子串，保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers。&amp; 保存搜索字符用来替换其他字符，如s/love/**&amp;**/，love这成**love**。\\&lt; 匹配单词的开始，如:/\\&lt;love/匹配包含以love开头的单词的行。\\&gt; 匹配单词的结束，如/love\\&gt;/匹配包含以love结尾的单词的行。x\\&#123;m\\&#125; 重复字符x，m次，如：/0\\&#123;5\\&#125;/匹配包含5个0的行。x\\&#123;m,\\&#125; 重复字符x，至少m次，如：/0\\&#123;5,\\&#125;/匹配至少有5个0的行。x\\&#123;m,n\\&#125; 重复字符x，至少m次，不多于n次，如：/0\\&#123;5,10\\&#125;/匹配5~10个0的行。 demo选项 i 、n , s ， p 替换文本中指定字符串12345678910sed -i 's/原内容/新内容/g' 文件注意这个参数并没有实际修改文件的内容sed 's/d01.txt/dd0011.txt/' d01.txt #对流的修改，没有真实修改文件内容sed -i 's/d01.txt/dd0011.txt/' d01.txt # 真实修改文件内容选项 n 仅显示script处理后的结果 , p 打印模板块的行sed -n 's/d01.txt/dd0011.txt/p' d01.txt #打印发生修改的行，没有真实修改文件sed 's/d01.txt/dd0011.txt/' d01.txt &gt; d01.txt.tmp #保存为临时文件mv d01.txt.tmp d01.txt #确认临时文件修改内容争取后替换原文件 定界符以上命令字符串中使用 / 在 sed 中作为定界符使用，也可以使用任意的定界符 1234567sed 's:d01.txt:dd0011.txt:' d01.txt #对流的修改，没有真实修改文件内容在对文本中含有特殊字符的时候可以考虑使用其他定界符，比如，原内容或者新内容中包含（\"/\" \"#\"）sed -i 's:原内容:新内容:g' 文件名字 sed 's:d01.txt:dd0011.txt:' d01.txtsed -i 's,原内容,新内容,g' 文件名字 sed 's,d01.txt,dd0011.txt,' d01.txtsed -i 's#原内容#新内容#g' 文件名字 sed 's#d01.txt#dd0011.txt#' d01.txtsed -i 's~原内容~新内容~g' 文件名字 sed 's~d01.txt~dd0011.txt~' d01.txt 命令 d 删除操作123456789101112131415删除空白行sed '/^$/d' d01.txt [ 对流的删除 ]sed -i '/^$/d' d01.txt [ 真实删除空白行后，保存 ]删除文件的第2行sed '2d' d01.txt删除文件的第2行到末尾所有行：sed '2,$d' d01.txt 删除文件的最后一行sed '$d' d01.txt删除文件中所有开头是 hello 的行sed '/^hello/d' d01.txt 已匹配字符串标记 &amp; ，注意这个符号12345678正则表达式 \\w\\+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词sed 's/\\w\\+/[&amp;]/g' d01.txt [ 使用 &amp; 替换]sed 's/\\w\\+/[]/g' d01.txt [ 空白 ]sed -i 's/\\w\\+/[&amp;]/g' d01.txt [真是替换，并保存]所有以 hello 开头的行都会被替换成他自己加 hi sed 's/^hello/&amp;hi/' d01.txt 字符串匹配标记 \\112345echo this is digit 6 in a number | sed 's/digit \\([0-9]\\)/\\1/'echo this is digit 6 in a number | sed 's/digit \\([0-9]\\)/\\1test/'echo this is test 6 | sed 's/test \\([0-9]\\)/\\1/'echo this is test 6 | sed 's/test \\([0-9]\\)/\\1test/' 命令中 digit 6，被替换成了 6。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 \\1，依此类推匹配到的第二个结果就是 \\2，例如： 12echo aaa BBB | sed 's/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/'echo aaa BBB | sed 's/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\1 \\2/' 12hi 被标记为 1 ,所有 hiLinux 会被替换成 hiUbuntu, 并打印出来sed -n 's/\\(hi\\)Linux/\\1Ubuntu/p' d01.txt 选项 e 允许在同一行里执行多条命令123sed -e '1,2d' -e 's/d01.txt/dd0011.txt/' d01.txt 第一条命令，删除1到2行，第二条命令用 dd0011.txt 替换 d01.txt。 这两条命令的前后顺序有影响，如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果 退出 命令： q12打印挖第3行后，退出sedsed '3q' d01.txt 打印奇数行或偶数行123456sed -n 'p;n' d01.txt #奇数行sed -n 'n;p' d01.txt #偶数行或者sed -n '1~2p' d01.txt #奇数行sed -n '2~2p' d01.txt #偶数行 插入新一行内容1234567sed '4a\\我是新添加行内容' d01.txt #在第4行后插入下一行sed '4a我是新添加行内容' d01.txt #在第4行后插入下一行,[没有特殊字符不用加 \\ 也行]sed '/hello/a\\我是新添加行内容' d01.txt #在所有包含 hello 行后面插入下一行sed '4i\\我是新添加行内容' d01.txt #在第4行前插入下一行sed '4i我是新添加行内容' d01.txt #在第4行前插入下一行,[没有特殊字符不用加 \\ 也行]sed '/hello/i\\我是新添加行内容' d01.txt #在所有包含 hello 行前面面插入下一行 替换某一行内容12sed \"1s/.*/第一行全部替换新内容/\" d01.txt #把第一行内容全部替换sed \"2s/.*/第二行全部替换新内容/\" d01.txt #把第二行内容全部替换 其他12345678910sed -i 's/d01.txt/dd0011.txt/' d01.txt # 真实修改文件内容 用参数 i某些转义符\\n 表示新的一行\\r 表示回车\\t 表示水平制表符\\v 表示垂直制表符\\b 表示后退符\\a 表示\"alert\"(蜂鸣或者闪烁)\\0xx 转换为八进制的ASCII码","tags":[]},{"title":"-grep  查找文件里符合条件的字符串","date":"2018-05-02T01:20:31.179Z","path":"2018/05/02/ubuntu/linux_DDU_grep/","text":"命令格式1grep [选项] [文件] 命令参数12345678910111213141516171819202122232425-a 不要忽略二进制数据。-A&lt;显示列数&gt; 除了显示符合范本样式的那一行之外，并显示该行之后的内容。-b 在显示符合范本样式的那一行之外，并显示该行之前的内容。-c 计算符合范本样式的列数。-C&lt;显示列数&gt;或-&lt;显示列数&gt; 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。-d&lt;进行动作&gt; 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。-e&lt;范本样式&gt; 指定字符串作为查找文件内容的范本样式。-E 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。-f&lt;范本文件&gt; 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。-F 将范本样式视为固定字符串的列表。-G 将范本样式视为普通的表示法来使用。-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。-H 在显示符合范本样式的那一列之前，标示该列的文件名称。-i 忽略字符大小写的差别。-l 列出文件内容符合指定的范本样式的文件名称。-L 列出文件内容不符合指定的范本样式的文件名称。-n 在显示符合范本样式的那一列之前，标示出该列的编号。-q 不显示任何信息。-R/-r 此参数的效果和指定“-d recurse”参数相同。-s 不显示错误信息。-v 反转查找。-w 只显示全字符合的列。-x 只显示全列符合的列。-y 此参数效果跟“-i”相同。-o 只输出文件中匹配到的部分。 在文件中搜索一个单词，命令会返回一个包含 PHP 的文本【行或者段落】12grep PHP aaa.txtgrep php aaa.txt 多个文件中搜索，命令会返回一个包含 PHP 的文本【行或者段落】1grep php aaa.txt bbb.txt 选项 -v 输出除 xxxxxx 之外的所有行或者段落1grep -v php aaa.txt 选项 -E 使用正则表达式12grep -E \"[1-9]+\" aaa.txt 或者egrep \"[1-9]+\" aaa.txt 选项 -o 只输出文件中匹配到的部分12grep -o php aaa.txtgrep -o PHP aaa.txt 选项 -c 统计文本或者文本中包含匹配字符串的行数[ 选项 -n ]123456统计grep -c \"PHP\" aaa.txt选项 -n 输出包含匹配字符串的行数grep -n \"PHP\" aaa.txtgrep -n \"php\" aaa.txt 选项 -l 搜索多个文件并查找匹配文本在那个文件中123grep -l php aaa.txt bbb.txtgrep -l php *.txtgrep -l PHP *.txt 选项 -r 递归搜索文件123grep PHP . -r [ . 表示当前目录]grep PHP . -r -ngrep PHP /home/www/test -r -n [ 指定目录 ] 选项 -i 忽略大小写搜索文件1grep -i php aaa.txt 选项 -e 扩展多个匹配样式1grep -e php -e The aaa.txt [ 搜索 PHP、搜索 The ] 选项 -q 静默输出，一般配合 if 逻辑判断1234567if grep -q hello aaa.txt ; then echo yes;else echo no; fiif grep -q php aaa.txt ; then echo yes;else echo no; figrep -q php aaa.phpgrep -q hello aaa.php不会输出任何内容，命令运行成功返回 0 ，失败返回非 0 值，一般配合逻辑判断使用 选项 -A -B -C 显示匹配结果之后行、之前行、之前之后行1234567891011121314151617测试文件 aaa.php 内容如下，注意看行号： 1 I am aaa.php 2 222 3 hello world 3 line 4 444 5 hello php grep_test 6 666 7 hello world 7 line 8 888 9 hello worldgrep -A1 -n php aaa.php [ 1代表显示多少行，-n 表示显示行号]显示匹配结果之后 1 行grep -A1 -n php aaa.php [ 匹配结果之后的1行 ]grep -B1 -n php aaa.php [ 匹配结果之前的1行 ]grep -C1 -n php aaa.php [ 匹配结果之前的1行和之后一行] 其他： grep家族总共有三个：grep，egrep，fgrep。","tags":[]},{"title":"-ls 显示目录列表","date":"2018-05-02T01:14:42.224Z","path":"2018/05/02/ubuntu/linux_DDU_ls/","text":"命令格式1ls[选项][文件][目录] 命令参数12345678910111213141516171819202122232425262728293031-a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）；-A：显示除影藏文件“.”和“..”以外的所有文件列表；-c：与“-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“-l”选项连用时，则排序的一句是文件的状态改变时间；-C：多列显示输出结果。这是默认选项；-l：与“-C”选项功能相反，所有输出信息用单列格式输出，不输出为多列；以长格式显示目录下的内容列表。输出的信息从 左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；-L：如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录；-f：此参数的效果和同时指定“aU”参数相同，并关闭“lst”参数的效果；-F：在每个输出项后追加文件的类型标识符，具体含义：“*”表示具有可执行权限的普通文件，“/”表示目录，“@”表示符号链接，“|”表示命令管道FIFO，“=”表示sockets套接字。当文件为普通文件时，不输出任何标识符；-r：以文件名反序排列并输出目录内容列表；-R：递归处理，将指定目录下的所有文件及子目录一并处理；--full-time：列出完整的日期与时间；//////////// 以下不经常用到 //////////////-b：将文件中的不可输出的字符以反斜线“”加字符编码的方式输出；-d：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；-i：显示文件索引节点号（inode）。一个索引节点代表一个文件；-k：以KB（千字节）为单位显示文件大小；-m：用“,”号区隔每个文件和目录的名称；-n：以用户识别码和群组识别码替代其名称；-s：显示文件和目录的大小，以区块为单位；-t：用文件和目录的更改时间排序；--color[=WHEN]：使用不同的颜色高亮显示不同类型的。 选项 a 、c 、 l 显示目录12345678ls -als -Als -cls -C [ 大写 ]ls -l [常用这个]ls -L 选项 full-time1ls --full-time 排除某些文件显示123456ls *.txt|egrep -v '(*.md)'ls *.txt|egrep -v *.mdls | grep -v aaa.txtls *.txt | grep -v aaa.txtls *.txt | egrep -v aaa.txt 显示某一目录下文件，显示 www 目录下文件1ls -l /www","tags":[]},{"title":"-rm  删除文件或目录","date":"2018-04-29T02:04:58.022Z","path":"2018/04/29/ubuntu/linux_DDU_rm/","text":"命令格式1rm [选项] 文件… 命令参数​ -d： 直接把欲删除的目录的硬连接数据删除成0，删除该目录；​ -f, –force 忽略不存在的文件，从不给出提示。​ -i, –interactive 进行交互式删除​ -r, -R, –recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。​ -v, –verbose 详细显示进行的步骤​ –help 显示此帮助信息并退出​ –version 输出版本信息并退出 选项 i 交互式删除1rm -i aaa.txt baa.txt 选项 r 递归删除目录及子目录中文件1rm -r aaa/ 选项 f 直接删除没有任何提示1rm -f bbaa.txt 选项 v 详细显示进行的步骤1rm -v bbb.txt 选项 i 交互式删除，某一类文件1rm -i *aa.txt 排除指定文件删除123456789删除所有 txt 结尾的文件，除了 aaa.txt rm `ls *.txt|egrep -v aaa.txt`rm `ls *.txt|egrep -v '(aaa.txt|bbb.txt|ccc.txt)'`rm `ls *.txt|egrep -v '(aaa.*)'`rm `ls *.txt|egrep -v '(*.md)'` rm命令可以用 -i 选项，这个选项在使用文件扩展名字符删除多个文件时特别有用 ………………………………unlink 命令删除文件，不能删除目录………………………… demo: 删除文件 test02.txt 1unlink test02.txt","tags":[]},{"title":"ubuntu16 -php7 extension imagick","date":"2018-04-20T02:07:11.699Z","path":"2018/04/20/ubuntu/php_extension_imagick/","text":"Extension 之 imagick温馨提示: 在安装过程中出现错误，一般是由于缺少编译工具包导致，可根据提示参照第一步安装相应的工具包即可 安装 ImageMagick12345678wget http://www.imagemagick.org/download/ImageMagick.tar.gz解压到指定目录【我这里是 /data/server/other_component/】tar -zxvf ImageMagick.tar.gz -C /data/server/other_component/cd ImageMagick-7.0.7-28/./configure --prefix=/data/server/other_component/ImageMagick-7.0.7-28 make &amp;&amp; make installexport PKG_CONFIG_PATH=/data/server/other_component/ImageMagick-7.0.7-28/lib/pkgconfig/ #设置环境变量 【重启电脑执行下一步】 安装 imagick123456789101112131415161718wget http://pecl.php.net/get/imagick-3.4.3.tgz解压到指定目录【我这里是 /data/server/other_component/】tar -zxvf imagick-3.4.3.tgz -C /data/server/other_component/cd imagick-3.4.3//data/server/php7/bin/phpize #用phpize生成configure配置文件，[找到你PHP安装位置中的phpsize]./configure \\--with-php-config=/data/server/php7/bin/php-config \\--with-imagick=/data/server/other_component/ImageMagick-7.0.7-28 make &amp; make install安装完成后提示如下，表示安装成功：root@www:/data/server/other_component/phpredis-4.0.0# make installInstalling shared extensions: /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/root@www:/data/server/other_component/phpredis-4.0.0# 配置123456789安装完成后配置【找到 php.ini 的位置添加扩展】：vi /etc/php/7.0/cli/php.inivi /data/server/php7/lib/php.ini 这两个里面都要写上一以下内容：extension=imagick.so拷贝扩展，否则 在 【cli PHP -m】 模式中看不到扩展：cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/imagick.so /usr/lib/php/20151012/ 重启php-fpm12345重启php-fpm查找PHP服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm 查看扩展12345php -m | grep imagick提示如下root@www:/data/server/other_component/ImageMagick-7.0.7-28# php -m | grep redisimagickroot@www:/data/server/other_component/ImageMagick-7.0.7-28# PHP扩展imagick下载网址 PHP扩展下载网址","tags":[]},{"title":"ubuntu16 -php7 extension redis","date":"2018-04-20T01:06:28.884Z","path":"2018/04/20/ubuntu/php_extension_redis/","text":"Extension 之 redis下载 redis 包12wget https://github.com/nicolasff/phpredis/archive/4.0.0.tar.gzwget http://pecl.php.net/get/redis-4.0.0.tgz 安装redis12345678910111213解压到指定目录【我这里是 /data/server/other_component/】tar -zxvf 4.0.0.tar.gz -C /data/server/other_component/cd phpredis-4.0.0//data/server/php7/bin/phpize #用phpize生成configure配置文件，[找到你PHP安装位置中的phpsize]./configure --with-php-config=/data/server/php7/bin/php-config #配置makemake install安装完成后提示如下，表示安装成功：root@www:/data/server/other_component/phpredis-4.0.0# make installInstalling shared extensions: /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/root@www:/data/server/other_component/phpredis-4.0.0# 配置 redis1234567891011安装完成后配置【找到 php.ini 的位置添加扩展】：vi /etc/php/7.0/cli/php.inivi /data/server/php7/lib/php.ini 这两个里面都要写上一以下内容：extension=redis.so拷贝扩展，否则 在 【cli PHP -m】 模式中看不到扩展：cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/opcache.a /usr/lib/php/20151012/cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/opcache.so /usr/lib/php/20151012/cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/redis.so /usr/lib/php/20151012/ 重启php-fpm 并查看扩展123456789101112重启php-fpm查找PHP服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm查看扩展php -m | grep redis提示如下root@www:/data/server/other_component/phpredis-4.0.0# php -m | grep redisredisroot@www:/data/server/other_component/phpredis-4.0.0# 历史版本 历史版本2 PHP扩展下载网址","tags":[]},{"title":"-vim  编辑文件","date":"2018-04-19T05:38:39.681Z","path":"2018/04/19/ubuntu/linux_DDU_vim/","text":"跳转到指定行123:5 回车:10 回车:15 回车","tags":[]},{"title":"centos -PHP7","date":"2018-04-18T09:57:15.507Z","path":"2018/04/18/centos/php/","text":"centos PHP7 安装安装依赖123yum -y install libxml2 libxml2-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-develyum install openssl openssl-devel 安装12345678安装phpwget http://cn2.php.net/get/php-7.0.28.tar.gz/from/this/mirrormv mirror php-7.0.28.tar.gz解压到你指定的目录，我这里选择 /data/server/ 目录tar -zxvf php-7.0.28.tar.gz -C /data/server/mv php-7.0.28 php7cd php7/ 编译12345678910111213141516171819202122232425262728293031323334353637./configure --prefix=/data/server/php7 \\ --with-curl \\ --with-freetype-dir \\ --with-gd \\ --with-gettext \\ --with-iconv-dir \\ --with-kerberos \\ --with-libdir=lib64 \\ --with-libxml-dir \\ --with-mysqli \\ --with-openssl \\ --with-pcre-regex \\ --with-pdo-mysql \\ --with-pdo-sqlite \\ --with-pear \\ --with-png-dir \\ --with-xmlrpc \\ --with-xsl \\ --with-zlib \\ --enable-fpm \\ --enable-bcmath \\ --enable-libxml \\ --enable-inline-optimization \\ --enable-gd-native-ttf \\ --enable-mbregex \\ --enable-mbstring \\ --enable-opcache \\ --enable-pcntl \\ --enable-shmop \\ --enable-soap \\ --enable-sockets \\ --enable-sysvsem \\ --enable-xml \\ --enable-zip \\ --enable-mysqlnd \\ --with-pdo-mysql=mysqlnd \\ --with-mcrypt 预处理ok后，make 编译123make &amp;&amp; make install最后用 make test 测试一下【这个过程时间比较长】 安装完毕123查看 php 版本/data/server/php7/bin/php -v这时候在命令窗口执行 php -v ,会提示命令找不到,需要配置环境变量,详情看下文 配置PHP12345cp /data/server/php7/php.ini-development /data/server/php7/lib/php.inicp /data/server/php7/etc/php-fpm.conf.default /data/server/php7/etc/php-fpm.confcp /data/server/php7/etc/php-fpm.d/www.conf.default /data/server/php7/etc/php-fpm.d/www.conf官方这里拷贝文件有点不一样，注意一下 添加 PHP 启动用户12345678910111213groupadd wwwuseradd -r -g www -s /bin/false www设置 PHP 启动用户cd /data/server/php7/etc/php-fpm.dvi www.conf 修改23、24行，内容如下： user = 启动fpm的用户名 group = 启动fpm的用户所在组 user = www group = www修改完启动 PHP-fpm php 启动命令1/data/server/php7/sbin/php-fpm 配置虚拟主机测试一下在 /data/www/ 目录下创建 index.php 内容如下： 123&lt;?phpecho phpinfo();?&gt; 在 nginx 中配置虚拟主机 12345678910111213141516server &#123; listen 80; server_name 127.0.0.1 192.168.1.230; client_max_body_size 10m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0.1_access.log; #error_log /data/server/tengine/logs/127.0.0.1_error.log; root /data/www/; # index index.html; index index.php; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125;&#125; 配置环境变量123456这时候在命令窗口执行 php -v ,会提示命令找不到,需要配置环境变量,详情看下文修改 /etc/profile 配置环境变量PATH=$PATH:/data/server/php/binexport PATH然后执行source /etc/profile 或者 ./profile 使其生效; 执行完后可以通过 echo $PATH 命令查看环境变量,在次执行 PHP -v 就看到PHP信息","tags":[]},{"title":"ubuntu -mysql others","date":"2018-04-18T05:16:40.762Z","path":"2018/04/18/ubuntu/linux_ubuntu_mysql_others/","text":"mysql 5.6 其他查看 MySQL 配置;1234windows下是my.inilinux下是my.cnflinux 中 locate my.cnf 就出来了（没有的话先updatedb） MySQL 忘记密码123451、查找 my.cnf 配置文件位置，在文件最后添加 skip-grant-tables 保存退出，修改完密码记得删掉2、修改密码，命令MySQL&gt; UPDATE mysql.user SET Password=PASSWORD('你的密码') where USER='root';MySQL&gt; flush privileges; MySQL&gt; exit; 确定 MySQL 中文件位置123456789101112131415161、locate mysql.server 找到后启动 mysql ./mysql.server start2、 ps -aux | grep mysql 看到信息如下（我自己的）：root 19312 0.0 0.0 113256 1596 pts/2 S 14:09 0:00 /bin/sh /usr/bin/mysqld_safe #数据库登录运行路径--datadir=/var/lib/mysql #数据库文件的存放路径--pid-file=/var/lib/mysql/iZ2ze8dugwavcbouiggqoeZ.pidmysql 19413 0.1 5.8 1236108 465644 pts/2 Sl 14:09 0:01 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql #数据库文件的存放路径--plugin-dir=/usr/lib64/mysql/plugin --user=mysql --log-error=/var/lib/mysql/iZ2ze8dugwavcbouiggqoeZ.err #错误日志--pid-file=/var/lib/mysql/iZ2ze8dugwavcbouiggqoeZ.pid 创建行用户并授权给指定数据库权限【以下命令在服务器 MySQL 中运行】1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253541、登录MySQLmysql -u root -p2、创建新用户CREATE USER '用户名'@'ip地址' IDENTIFIED BY '密码'; % 代表所有ip都能访问localhost 代表本机才能访问123.123.123.123 代表指定ip才能访问3、验证账号是否创建成功SELECT host, user, password FROM mysql.user WHERE user='用户';4、给新建用户授权指定数据库GRANT &lt;privileges&gt; ON &lt;database&gt;.&lt;table&gt; TO 'myuser'@'localhost';命令中 &lt;privileges&gt; 代表着用逗号分隔权限列表&lt;database&gt;.&lt;table&gt; 代表数据库.表demo：GRANT ALL ON &lt;database&gt;.&lt;table&gt; TO 'myuser'@'localhost';GRANT CREATE,INSERT ON &lt;database&gt;.&lt;table&gt; TO 'myuser'@'localhost';以下是一些可用权限&lt;privileges&gt;：ALL: 所有可用的权限CREATE: 创建库、表和索引LOCK_TABLES: 锁定表ALTER: 修改表DELETE: 删除表INSERT: 插入表或列SELECT: 检索表或列的数据CREATE_VIEW: 创建视图SHOW_DATABASES: 列出数据库DROP: 删除库、表和视图5、验证给用户的权限SHOW GRANTS FOR '用户名'@'ip地址';6、移除权限REVOKE &lt;privileges&gt; ON &lt;database&gt;.&lt;table&gt; FROM '用户名'@'ip地址';demo：CREATE DATABASE afei_db;CREATE USER 'afei'@'%' IDENTIFIED BY '123456';SELECT host, user, password FROM mysql.user WHERE user='afei';grant all privileges on afei_db.* to 'afei'@'%'; #没有指定密码授权SHOW GRANTS FOR 'afei'@'%';flush privileges; #刷新扩展命令grant all privileges on afei.* to afei@l% identified by '123456'; #指定命令授权drop user 'afei'@'%'; #删除用户 linux 查看 MySQL 版本1、在help中查找 mysql –help |grep Distrib2、在help中查找 mysql –help |grep Distrib Mysql 常用性能分析方法??123456select version(); #查版本号show processlist; #查看那些线程正在运行show profiles; show profiles for query 3; #更具query_id 查看某个查询的详细时间耗费explian + sql # 分析执行计划和最左前缀原理reset query cache; #清除缓存","tags":[]},{"title":"computer install ubuntu16","date":"2018-04-17T07:09:50.973Z","path":"2018/04/17/ubuntu/ubuntu_install/","text":"电脑安装ubuntu系统下载： ubuntu下载1wget https://www.ubuntu.com/download/desktop 安装好 UltraISO 软碟通 ，安装完软件后，打开软件，点击文件打开，找到刚才下载的 ubuntu 的 ISO 文件，点击开开，完成 ISO 文件的加载。接着插入 u 盘，点击 UltraISO 启动选项，然后找到写入硬盘选项，点击它进入将要操作的界面，最后点击写入; install","tags":[]},{"title":"ubuntu16 Redmine","date":"2018-04-13T03:54:09.901Z","path":"2018/04/13/ubuntu/Redmine/","text":"Rvm+Ruby+Rails 【具体细节效果以后版本修改……】rvm是用于管理多个ruby版本的一个管理器 123456789101112131415161718192021sudo apt-get update sudo apt-get upgradegpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3curl -sSL https://get.rvm.io | bash -s stable//如果上面的连接失败，可以尝试:curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable 载入 Rvm 环境[ 根据提示操作 ] source /etc/profile.d/rvm.sh检查Rvm是否安装成功 rvm -v用 RVM 安装 Ruby 环境(同时把RubyGems也安装） rvm requirements rvm install 2.5.1 #可以到 Ruby(https://www.ruby-lang.org/en/downloads/)官网查看最新版本号，时间比较长RVM装好后，可以执行以下命令将刚才安装的Ruby版本，设置系统ruby默认版本 rvm use 2.5.1 --default 由于某些原因，调整gem安装目录至国内镜像，有且仅有一个就好！ 1234567891011121314151617181920212223242526272829303132333435检查下Ruby和RubyGems的版本 ruby -v gem -vgem update --system gem -v 换源 gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org gem sources -l //查看在用的gem源 显示如下：root@ubuntu:/data/server# gem sources -l*** CURRENT SOURCES ***https://rubygems.org/https://gems.ruby-china.org/root@ubuntu:/data/server# 安装bundlers gem install bundler安装Rails gem install rails 5.2.0 # 可以到rails官网查看最新版本号 或者使用： gem install rails #自己默认选择最新版查看版本 rails -v 最后检查一下所有版本 rvm -v ruby -v rails -v bundler -v适当升级gem update --system Redmine1234wget http://www.redmine.org/releases/redmine-3.4.5.tar.gztar -zxvf redmine-3.4.5.tar.gz -C /data/servermv redmine-3.4.5 redminecd redmine 设置数据库连接Redmine 需要 nginx 和 MySQL 自行安装这里不再安装 12cp config/database.yml.example config/database.yml vim config/database.yml 安装依赖包12345678910#查看缺少依赖包，安装完依赖后执行一次这个命令,直到到出现 Bundle complete!bundle install --without development test 我的值缺少依赖包如下：apt-get install libmysqlclient-dev不在缺少依赖，显示如下：Bundle complete! 31 Gemfile dependencies, 55 gems now installed.Gems in the groups development and test were not installed.Use `bundle info [gemname]` to see where a bundled gem is installed. Session 存储秘钥1rake generate_secret_token 生成redmine的数据库表结构和初始化数据12RAILS_ENV=production rake db:migrate //生成表结构RAILS_ENV=production rake redmine:load_default_data //初始化数据 创建上传文件的目录，设置文件夹的权限1234567useradd redminepasswd redmine //设置redmine账户的密码这里先不做mkdir -p tmp tmp/pdf public/plugin_assets/chown -R redmine:redmine files log tmp public/plugin_assetschmod -R 755 files log tmp public/plugin_assets/ 测试12ruby bin/rails server webrick -e productionruby bin/rails server webrick -e production -b 0.0.0.0 -p3000 #允许远程访问 其他默认账户 admin/admin 初次登录需要修改密码， 关机重启后，需要再次运行 source /etc/profile.d/rvm.sh 载入环境 网站： https://www.phusionpassenger.com/library/install/standalone/install/oss/tarball/ https://www.phusionpassenger.com/library/install/standalone/install/oss/tarball/ 下载地址： https://www.phusionpassenger.com/latest_stable_tarball https://www.phusionpassenger.com/latest_stable_tarball 12wget https://www.phusionpassenger.com/latest_stable_tarballtar -xzvf passenger-X.X.X.tar.gz -C /somewhere-permanent rootroot 内容start 代码分为行内代码和代码块 行内代码使用&lt;p&gt;这里使用代码块&lt;/p&gt; 这里没有代码块 代码语法高亮 1echo \"dddddd\"; 12var abc = \"123\";alert(abc); 我是a里面的内容","tags":[]},{"title":"Markdown语法","date":"2018-04-11T07:57:10.336Z","path":"2018/04/11/hexo/Markdown语法/","text":"这里是标题内容start代码分为行内代码和代码块 行内代码使用&lt;p&gt;这里使用代码块&lt;/p&gt; 这里没有代码块 代码语法高亮 1echo \"dddddd\"; 12var abc = \"123\";alert(abc); 我是a里面的内容","tags":[]},{"title":"ubuntu -mysql5.6.39","date":"2018-04-08T02:48:50.321Z","path":"2018/04/08/ubuntu/linux_ubuntu_mysql_02/","text":"mysql5.6.39编译环境1sudo apt install make cmake gcc g++ perl bison libaio-dev libncurses5 libncurses5-dev libnuma-dev 下载12345678安装版本5.6.39wget https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.39.tar.gzwget https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.39.tar.gz【解压到你指定的目录，我这里选择 /data/server/ 】tar zxvf mysql-5.6.39.tar.gz -C /data/server/mv mysql-5.6.39 mysqlcd mysql 编译安装12345678910111213141516171819202122232425262728293031323334353637383940414243cmake \\-DCMAKE_INSTALL_PREFIX=/data/server/mysql \\-DMYSQL_DATADIR=/data/server/mysql/data \\-DSYSCONFDIR=/data/server/mysql/etc \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DWITH_MEMORY_STORAGE_ENGINE=1 \\-DWITH_READLINE=1 \\-DMYSQL_UNIX_ADDR=/data/server/mysql/mysql.sock \\-DMYSQL_TCP_PORT=3306 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_PARTITION_STORAGE_ENGINE=1 \\-DEXTRA_CHARSETS=all \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_cimake &amp;&amp; make install注意事项：重新编译时，需要清除旧的对象文件和缓存信息# make clean# rm -f CMakeCache.txt# rm -rf /data/server/etc/my.cnf编译参数： https://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html编译参数： https://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.htmlcmake \\-DCMAKE_INSTALL_PREFIX=/data/server/mysql \\ 安装路径-DMYSQL_DATADIR=/data/server/mysql/data \\ 文件存放路径-DSYSCONFDIR=/etc \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DWITH_MEMORY_STORAGE_ENGINE=1 \\-DWITH_READLINE=1 \\-DMYSQL_UNIX_ADDR=/tmp/mysql/mysql.sock \\-DMYSQL_TCP_PORT=3306 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_PARTITION_STORAGE_ENGINE=1 \\-DEXTRA_CHARSETS=all \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_ci 创建 mysql 组跟用户1234567检查系统中是否已经存在 mysql 用户，如果没有则创建cat /etc/passwd | grep mysqlcat /etc/group | grep mysql创建 mysql 用户sudo groupadd mysqlsudo useradd -r -g mysql -s /bin/false mysql 更改 mysql 目录权限123cd /data/server/mysqlsudo chown -R mysql .sudo chgrp -R mysql . 初始化数据库123456789101112131415161718192021222324252627282930313233343536chmod +x mysql_install_db 或者 chmod +x scripts/mysql_install_db./scripts/mysql_install_db --basedir=/data/server/mysql --datadir=/data/server/mysql/data --user=mysql初始化后提示：To start mysqld at boot time you have to copysupport-files/mysql.server to the right place for your systemPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !To do so, start the server, then issue the following commands: /data/server/mysql/bin/mysqladmin -u root password 'new-password' /data/server/mysql/bin/mysqladmin -u root -h ubuntu password 'new-password'Alternatively you can run: /data/server/mysql/bin/mysql_secure_installationwhich will also give you the option of removing the testdatabases and anonymous user created by default. This isstrongly recommended for production servers.See the manual for more instructions.You can start the MySQL daemon with: cd . ; /data/server/mysql/bin/mysqld_safe &amp;You can test the MySQL daemon with mysql-test-run.pl cd mysql-test ; perl mysql-test-run.plPlease report any problems at http://bugs.mysql.com/The latest information about MySQL is available on the web at http://www.mysql.comSupport MySQL by buying support/licenses at http://shop.mysql.comNew default config file was created as /data/server/mysql/my.cnf andwill be used by default by the server when you start it.You may edit this file to change server settings 启动数据库12345678chmod +x mysql.server 或者 chmod +x support-files/mysql.server ./support-files/mysql.server start 初始化密码，我这里设置密码： 123456 做测试，实际中设置你认为安全的密码 /data/server/mysql/bin/mysqladmin -u root password '123456' 登录MySQL bin/mysql -u root -p 创建新用户，并允许远程连接123456789101112131415命令: GRANT ALL PRIVILEGES ON *.* TO 'username'@'host' IDENTIFIED BY 'new_password' WITH GRANT OPTION; . 点代表所有表username 代表你创建的用户名host 代表你指定在那台机器可以登录，本地登录就是 localhost ，允许所有远程登录就是 % ；new_password 代表该用户的登录密码，密码可以为空，如果是空则改用户可以不需要密码登录demo:新增超级权限并允许远程访问：GRANT ALL PRIVILEGES ON *.* TO 'afei2'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; FLUSH PRIVILEGES;查看创建的新用户信息：SELECT `Host`,`User`,`Password`,authentication_string,password_expired FROM `user`; MySQL 命令123456support-files/mysql.server startsupport-files/mysql.server stop/data/server/mysql/bin/mysql -u root -pmysql -h 你登录的ip -u username -P 3306 -p 【远程登录】demo： mysql -h 192.168.1.230 -u afei2 -p 查看 mysql 默认读取 my.cnf 的目录如果没有设置使用指定目录的my.cnf，mysql启动时会读取安装目录根目录及默认目录下的my.cnf文件。查看mysql启动时读取配置文件的默认目录 1234567891011121314151617181920212223242526mysql --help|grep 'my.cnf'输出：root@ubuntu:/data/server/mysql/bin# mysql --help|grep 'my.cnf'/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf order of preference, my.cnf, $MYSQL_TCP_PORT,root@ubuntu:/data/server/mysql/bin# //////////////////或者/////////////////./bin/mysqld --verbose --help |grep -A 1 'Default options'输出：root@ubuntu:/data/server/mysql# ./bin/mysqld --verbose --help |grep -A 1 'Default options'2018-04-08 01:55:32 0 [Note] --secure-file-priv is set to NULL. Operations related to importing and exporting data are disabled2018-04-08 01:55:32 0 [Note] ./bin/mysqld (mysqld 5.6.39) starting as process 34387 ...2018-04-08 01:55:32 34387 [Note] Plugin 'FEDERATED' is disabled.Default options are read from the following files in the given order: /etc/my.cnf /etc/mysql/my.cnf /data/server/mysql/etc/my.cnf ~/.my.cnf 2018-04-08 01:55:32 34387 [Note] Binlog end2018-04-08 01:55:32 34387 [Note] Shutting down plugin 'CSV'2018-04-08 01:55:32 34387 [Note] Shutting down plugin 'MyISAM'root@ubuntu:/data/server/mysql# /etc/my.cnf, /etc/mysql/my.cnf, /usr/local/etc/my.cnf, ~/.my.cnf 这些就是mysql默认会搜寻my.cnf的目录，顺序排前的优先 查看错误日志位置1234567891011121314151617修改 my.cnf 文件指定错误日志位置log_error=/data/mysql.log错误日志默认存放位置为数据目录下，你也可以用下面命令查看:SHOW GLOBAL VARIABLES LIKE '%log_error%';mysql&gt; SHOW GLOBAL VARIABLES LIKE '%log_error%';+---------------------+-----------------+| Variable_name | Value |+---------------------+-----------------+| binlog_error_action | IGNORE_ERROR || log_error | /data/mysql.log |+---------------------+-----------------+2 rows in set (0.00 sec)mysql&gt; mysql官方预编译配置参数","tags":[]},{"title":"BlueLake 主题配置","date":"2018-03-26T09:14:29.038Z","path":"2018/03/26/hexo/hexo-BlueLake/","text":"添加本地搜索安装插件hexo-generator-json-content来创建JSON数据文件 1npm install hexo-generator-json-content@2.2.0 --save 在根配置 _config.yml 添加配置 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 在主题 _config.yml 中添加 1local_search: true #安装好 BlueLake主题后，会有这个配置 我是a里面的内容","tags":[]},{"title":"ubuntu16 -swoole","date":"2018-03-21T15:18:58.851Z","path":"2018/03/21/ubuntu/linux_ubuntu_swoole/","text":"swoolephp7 中安装swoole1.9.1 1234567891011121314151617181920212223242526272829303132333435363738394041安装依赖apt-get install libpcre3 libpcre3-dev *********************************************cd /data/server/wget https://github.com/swoole/swoole-src/archive/v1.9.1-stable.tar.gztar zxvf v1.9.1-stable.tar.gz -C /data/server/cd swoole-src-1.9.1-stable/data/server/php7/bin/phpize【 这一步很少出问题： 我的报错如下：错误一： root@ubuntu:/data/server/swoole-src-1.9.1-stable# /data/server/php7/bin/phpize Configuring for: PHP Api Version: 20151012 Zend Module Api No: 20151012 Zend Extension Api No: 320151012 Cannot find autoconf. Please check your autoconf installation and the $PHP_AUTOCONF environment variable. Then, rerun this script.错误二: Cannot find config.m4. Make sure that you run '/data/server/php7/bin/phpize' in the top level source directory of the module解决方法：sudo apt-get install m4sudo apt-get install autoconf 】./configure --with-php-config=/data/server/php7/bin/php-configmakemake install最后安装成功后显示：root@ubuntu:/data/server/swoole-src-1.9.1-stable# make installInstalling shared extensions: /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/root@ubuntu:/data/server/swoole-src-1.9.1-stable# 配置php支持swoolevi /data/server/php7/lib/php.ini #######编辑配置文件，在最后一行添加以下内容(查找php.ini最好的方法就是phpinfo) 12345vi /etc/php/7.0/cli/php.inivi /data/server/php7/lib/php.ini 这两个里面都要写上一以下内容：extension=swoole.so 重启php-fpm1234查找PHP服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm 先用 php -m 看一下,没有 swoole ，扩展，检索一下 locate php.ini ,发现在 /etc/php/7.0/cli/php.ini 这里还有一个，这里也加上 extension=swoole.so ，在看看有没有，如果还是没有， php -ini|grep ‘extesion_dir’ 看一下，发现如下错误： 12345678root@ubuntu:/home/afei# php -ini|grep 'extesion_dir'PHP Warning: PHP Startup: Unable to load dynamic library '/usr/lib/php/20151012/swoole.so' - /usr/lib/php/20151012/swoole.so: cannot open shared object file: No such file or directory in Unknown on line 0root@ubuntu:/home/afei# cd /usr/lib/php/20151012root@ubuntu:/usr/lib/php/20151012# ls -l解决办法， 拷贝一份过去： cp /data/server/php7/lib/php/extensions/no-debug-non-zts-20151012/swoole.so /usr/lib/php/20151012/ 在phpinfo页面可以看到关于swoole的选项，说明安装成功 swoole官方文档","tags":[]},{"title":"ubuntu15 -mysql5.7","date":"2018-03-17T03:42:21.994Z","path":"2018/03/17/ubuntu/linux_ubuntu_mysql/","text":"mysql 5.7安装在终端执行 以下命令123sudo apt-get install mysql-serversudo apt install mysql-clientsudo apt install libmysqlclient-dev 安装完用以下命测试,出现图中说明 OK 1sudo netstat -tap | grep mysql 进入 mysql1mysql -uroot -p 然后回车输入密码 设置 mysql 运行远程访问1sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf 1、注释掉 bind-address = 127.0.0.1 保存退出【在43行】2、grant all on . to root@’%’ identified by ‘你的密码’ with grant option;3、flush privileges;4、exit; 退出 mysql服务5、重启服务： service mysql restart 卸载mysql123456sudo apt-get remove mysql-serversudo apt-get autoremove mysql-serversudo apt-get remove mysql-common //这个很重要清理残留数据；dpkg -l |grep ^rc|awk '&#123;print $2&#125;' |sudo xargs dpkg -P mysql 手动安装编译环境1sudo apt install make cmake gcc g++ perl bison libaio-dev libncurses5 libncurses5-dev libnuma-dev 下载【注意版本】1234567安装版本 5.7.21；如果是虚拟机建议内容 4G ;wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.21.tar.gz【解压到你指定的目录，我这里选择 /data/server/ 】tar zxvf mysql-boost-5.7.21.tar.gz -C /data/server/mv mysql-5.7.21 mysqlcd mysql 编译安装12345678910111213141516171819202122cmake . -DBUILD_CONFIG=mysql_release \\-DCPACK_MONOLITHIC_INSTALL=ON \\-DCMAKE_INSTALL_PREFIX=/data/server/mysql \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_ci \\-DMYSQL_UNIX_ADDR=/data/server/mysql/mysql.sock \\-DMYSQL_TCP_PORT=3306 \\-DMYSQLX_UNIX_ADDR=/data/server/mysql/mysqlx.sock \\-DMYSQL_DATADIR=/data/server/mysql/data \\-DSYSCONFDIR=/data/server/mysql/etc \\-DWITH_BOOST=/data/server/mysql/boost/boost_1_59_0make &amp;&amp; make install注意这一项：这个是你 boost 下载好的目录，我的这个版本的 MySQL 解压后对应的目录中有这个-DWITH_BOOST=/data/server/mysql/boost/boost_1_59_0make 的过程比较耗时；耐心等待，make install 就很快啦官方预编译配置参数：https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#cmake-general-optionshttps://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#cmake-general-options 这个过程时间比较长………… 初始化设置 mysql创建 MySQL 组跟用户12sudo groupadd mysqlsudo useradd -r -g mysql -s /bin/false mysql 更改 mysql 目录权限123cd /data/server/mysqlsudo chown -R mysql .sudo chgrp -R mysql . 初始化 mysql ， 生成 root 用户临时密码，12345678sudo bin/mysqld --initialize --user=mysql通过mysqld初始化data目录时，如果使用--initialize选项，则会为'root'@'localhost'用户创建一个随机密码。该密码会打印在控制台，如下所示行中末尾就是临时密码：2018-03-29T01:10:08.161779Z 1 [Note] A temporary password is generated for root@localhost: xJB.L-TJ)2wB*****************初始化一个空密码，使用initialize-insecure ****************sudo bin/mysqld --initialize-insecure --user=mysql 启动 mysql12345678910111213141516support-files/mysql.server startbin/mysql -u root -palter user 'root'@'localhost' identified by 'new_password';修改完重启mysql 或者 刷新support-files/mysql.server stop 或者flush privileges;*************************************************************我这里设置密码： 123456 做测试，实际中设置你认为安全的密码方法1：alter user 'root'@'localhost' identified by '123456';方法2：update user set authentication_string=password('123456') where user='root';方法3：set password=password('123456');这里如果不重新设置密码，系统会一直提示：mysql&gt; show databases;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 设为系统服务123456cp /data/server/mysql/support-files/mysql.server /etc/init.d/mysqldsystemctl daemon-reload [重新加载 service 文件]systemctl start mysqldsystemctl stop mysqldsystemctl restart mysqld 创建新用户，并允许远程连接123456789101112命令: GRANT ALL PRIVILEGES ON *.* TO 'username'@'host' IDENTIFIED BY 'new_password' WITH GRANT OPTION; . 点代表所有表username 代表你创建的用户名host 代表你指定在那台机器可以登录，本地登录就是 localhost ，允许所有远程登录就是 % ；new_password 代表该用户的登录密码，密码可以为空，如果是空则改用户可以不需要密码登录demo:新增超级权限并允许远程访问：GRANT ALL PRIVILEGES ON *.* TO 'afei2'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; FLUSH PRIVILEGES; MySQL 命令123456support-files/mysql.server startsupport-files/mysql.server stop/data/server/mysql/bin/mysql -u root -pmysql -h 你登录的ip -u username -P 3306 -p 【远程登录】demo： mysql -h 192.168.1.230 -u afei2 -p mysql 命令行工具中 \\c 取消之前的输入,重新开始输入123mysql&gt; fdfds \\cmysql&gt; show tables ddjfkldjfdklsf \\cmysql&gt; show tables; mysql 命令行工具中 \\G 竖向显示内容 12mysql&gt; show tables \\G;mysql&gt; show table status \\G; mysql官方下载地址 mysql官方下载地址 mysql官方预编译配置参数 mysql官方手册","tags":[]},{"title":"ubuntu15 -tengine","date":"2018-03-17T03:42:21.994Z","path":"2018/03/17/ubuntu/linux_ubuntu_tengine/","text":"Tengine 官网安装相当简略，这里详细安装一次（ubuntu15 安装 tengine） 安装必要的编译环境Tengine 安装需要使用源代码自行编译，所以安装前需要安装必要的编译工具 123sudo apt-get updatesudo apt-get install g++apt-get install libgd-dev 安装所需要的组件【pcre、openssl、zlib】，组件安装的时候注意路径PCRE1234567wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz解压到你指定的目录tar -zxvf pcre-8.38.tar.gz -C /data/server/tengine_componentmv pcre-8.38 pcrecd pcre/./configure --prefix=/data/server/tengine_component/pcremake &amp;&amp; make install OpenSSL1234567wget http://www.openssl.org/source/openssl-1.0.2.tar.gz解压到你指定的目录tar -zxvf openssl-1.0.2.tar.gz -C /data/server/tengine_componentmv openssl-1.0.2 opensslcd openssl/./config --prefix=/data/server/tengine_component/opensslmake &amp;&amp; make install 这个执行时间稍微长一点 Zlib1234567wget http://zlib.net/zlib-1.2.11.tar.gz解压到你指定的目录tar -zxvf zlib-1.2.11.tar.gz -C /data/server/tengine_componentmv zlib-1.2.11 zlibcd zlib/./configure --prefix=/data/server/tengine_component/zlibmake &amp;&amp; make install 下载12345678910111213141516171819202122###有空试试这个不添加应该也是可以的，安装完有2个报错，不用理会，手动创建 logs 目录，修改权限；###groupadd wwwuseradd -s /sbin/nologin -g www www///////////////////////////////////////////////////////////wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz解压到你指定的目录tar -zxvf tengine-2.1.2.tar.gz -C /data/server/mv tengine-2.1.2 tenginecd tengine./configure --prefix=/data/server/tengine \\--with-pcre=/data/server/tengine_component/pcre \\--with-openssl=/data/server/tengine_component/openssl \\--with-http_gzip_static_module \\--with-http_realip_module \\--with-http_stub_status_module \\--with-http_concat_module \\--with-zlib=/data/server/tengine_component/zlibmake &amp;&amp; make install 注意配置的时候 –with-pcre 、–with-openssl、–with-zlib的路径为源文件的路径 检测是否可用123/data/server/tengine/sbin/nginx -t没有logs目录，那就创建一个logs目录： mkdir logs 启动关闭命令1234567/data/server/tengine/sbin/nginx -t/data/server/tengine/sbin/nginx -s start/data/server/tengine/sbin/nginx -s stop/data/server/tengine/sbin/nginx -s reloadpid出错时，可以使用这个：/data/server/tengine/sbin/nginx -c /data/server/tengine/conf/nginx.conf 扩展：有时候，我们有好多域名，为了方便我们修改一下 nginx.conf ,修改内容如下，主要是最后一句 include servers/*;然后在nginx.conf 当前位置创建 servers 目录；【修改之前记得把原来的备份 cp nginx.conf nginx.conf_backups 】 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;# load modules compiled as Dynamic Shared Object (DSO)##dso &#123;# load ngx_http_fastcgi_module.so;# load ngx_http_rewrite_module.so;#&#125;http &#123; include mime.types; default_type application/octet-stream; charset utf-8;# server_tokens off;# server_names_hash_bucket_size 128; # client_header_buffer_size 32k; # large_client_header_buffers 4 32k; # client_max_body_size 20m; # client_body_buffer_size 128k; client_header_timeout 30m; client_body_timeout 30m; # client_body_temp_path /dev/shm/client_body_temp_path 1 2; send_timeout 30m; #sendfile on; # tcp_nopush on; # tcp_nodelay on; keepalive_timeout 60; # fastcgi_connect_timeout 300; # fastcgi_send_timeout 300; # fastcgi_read_timeout 300; # fastcgi_buffer_size 256k; # fastcgi_buffers 4 256k; # fastcgi_busy_buffers_size 512k; # fastcgi_temp_file_write_size 512k; # fastcgi_temp_path /dev/shm/factcgi_temp_path 1 2; # fastcgi_cache_path /dev/shm/fastcgi_cache levels=1:2 keys_zone=PHPCACHE:1024m inactive=15m; # fastcgi_cache_key \"$scheme$request_method$host$request_uri\"; # fastcgi_cache_use_stale error timeout invalid_header http_500; # fastcgi_intercept_errors on; #开启后支持4XX 和 5XX 错误自定义 gzip on; gzip_vary on; gzip_min_length 10k; gzip_buffers 4 16k; gzip_http_version 1.0; gzip_comp_level 2; gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript; gzip_disable \"MSIE [1-6]\\.\"; include servers/*;&#125; demo 测试，在新建的 servers 目录下创建 文件 127.0.0.1 12345678910111213141516171819202122232425262728server &#123; listen 80; server_name 127.0.0.1; client_max_body_size 0m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0._access.log; #error_log /data/server/tengine/logs/127.0.0._error.log; root /data/www/; index index.html;&#125;或者：server &#123; listen 80; server_name 127.0.0.1 192.168.1.232; client_max_body_size 0m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0._access.log; #error_log /data/server/tengine/logs/127.0.0._error.log; root /data/www/; index index.html index.php; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125; &#125; Tengine 官网安装","tags":[]},{"title":"ubuntu16 -php7.0.28","date":"2018-03-17T03:41:47.254Z","path":"2018/03/17/ubuntu/linux_ubuntu_php/","text":"源码编译安装php7.0 依赖安装，安装依赖123456789101112131415161718192021222324252627282930313233343536apt-get install libxml2 libxml2-devapt-get install opensslapt-get install libssl-devapt-get install curlapt-get install libcurl4-gnutls-devapt-get install libxslt-devapt-get install libpng-devapt-get install libfreetype6-dev// RetHat CentOS or Fedora 使用下面安装命令yum install curl curl-devel****************一般使用的依赖都是以下这些***************************安装相关依赖库sudo apt-get updatesudo apt-get install libxml2-dev#安装gccsudo apt-get install build-essentialsudo apt-get install openssl sudo apt-get install libssl-dev sudo apt-get install makesudo apt-get install curlsudo apt-get install libcurl4-gnutls-devsudo apt-get install libjpeg-devsudo apt-get install libpng-devsudo apt-get install libmcrypt-devsudo apt-get install libreadline6 libreadline6-devapt-get -y install libfreetype6-dev sudo apt-get install libxslt1-dev 下载 PHP 源码1234567wget http://cn2.php.net/get/php-7.0.28.tar.gz/from/this/mirrormv mirror php-7.0.28.tar.gz解压到你指定的目录，我这里选择 /data/server/ 目录tar -zxvf php-7.0.28.tar.gz -C /data/server/mv php-7.0.28 php7cd php7/ 查看安装帮助，执行配置脚本进行配置1234567891011121314151617181920212223242526272829303132333435363738# ./configure --help# ./configure --prefix=/data/server/php7 \\ --with-curl \\ --with-freetype-dir \\ --with-gd \\ --with-gettext \\ --with-iconv-dir \\ --with-kerberos \\ --with-libdir=lib64 \\ --with-libxml-dir \\ --with-mysqli \\ --with-openssl \\ --with-pcre-regex \\ --with-pdo-mysql \\ --with-pdo-sqlite \\ --with-pear \\ --with-png-dir \\ --with-xmlrpc \\ --with-xsl \\ --with-zlib \\ --enable-fpm \\ --enable-bcmath \\ --enable-libxml \\ --enable-inline-optimization \\ --enable-gd-native-ttf \\ --enable-mbregex \\ --enable-mbstring \\ --enable-opcache \\ --enable-pcntl \\ --enable-shmop \\ --enable-soap \\ --enable-sockets \\ --enable-sysvsem \\ --enable-xml \\ --enable-zip \\ --enable-mysqlnd \\ --with-pdo-mysql=mysqlnd \\ --with-mcrypt 我的错误 Configure Command ‘./configure’ ‘–prefix=/data/server/php7’ ‘–with-gd’ ‘–with-freetype-dir’ ‘–enable-gd-native-ttf’ ‘–enable-mysqlnd’ ‘–with-pdo-mysql=mysqlnd’ ‘–with-openssl’ ‘–with-mcrypt’ ‘–enable-mbstring’ ‘–enable-zip’ ‘–enable-fpm’ Server API FPM/FastCGI Virtual Directory Support disabled Configuration File (php.ini) Path /data/server/php7/lib Loaded Configuration File (none) 【正常情况这里不应该没有值的，还是之前的编译有问题，请仔细查看 正常应该是这个值 /data/server/php7/lib/php.ini】 Scan this dir for additional .ini files (none) Additional .ini files parsed (none) 之前安装过依赖这里就可以不用装，然后会提示部分依赖没有安装，安装依赖 123456789101112131415161718192021222324252627282930313233343536apt-get install libxml2 libxml2-devapt-get install opensslapt-get install libssl-devapt-get install curlapt-get install libcurl4-gnutls-devapt-get install libxslt-devapt-get install libpng-devapt-get install libfreetype6-dev// RetHat CentOS or Fedora 使用下面安装命令yum install curl curl-devel****************一般使用的依赖都是以下这些***************************安装相关依赖库sudo apt-get updatesudo apt-get install libxml2-dev#安装gccsudo apt-get install build-essentialsudo apt-get install openssl sudo apt-get install libssl-dev sudo apt-get install makesudo apt-get install curlsudo apt-get install libcurl4-gnutls-devsudo apt-get install libjpeg-devsudo apt-get install libpng-devsudo apt-get install libmcrypt-devsudo apt-get install libreadline6 libreadline6-devapt-get -y install libfreetype6-dev sudo apt-get install libxslt1-dev 预处理ok后，make 编译123make &amp;&amp; make install最后用 make test 测试一下【这个过程时间比较长】 安装完毕12345#查看 php 版本 ,这个时候没有环境变量,全局还不能使用 php -v,下问有介绍/data/server/php7/bin/php -v #查看配置文件,没有加载,需要自己复制一份 php.ini/data/server/php7/bin/php --ini 配置PHP123456cp /data/server/php7/php.ini-development /data/server/php7/lib/php.inicp /data/server/php7/etc/php-fpm.conf.default /data/server/php7/etc/php-fpm.confcp /data/server/php7/etc/php-fpm.d/www.conf.default /data/server/php7/etc/php-fpm.d/www.conf官方这里拷贝文件有点不一样，注意一下 添加 PHP 启动用户1234567891011121314PHP 安装默认使用 www 用户，这里根据自己情况添加用户groupadd managersuseradd -r -g managers -s /bin/false managers设置 PHP 启动用户cd /data/server/php7/etc/php-fpm.dvi www.conf 修改23、24行，内容如下： user = 启动fpm的用户名 group = 启动fpm的用户所在组 user = managers group = managers修改完启动 PHP-fpm php 启动命令1/data/server/php7/sbin/php-fpm 配置虚拟主机测试一下在 /data/www/ 目录下创建 index.php 内容如下： 123&lt;?phpecho phpinfo();?&gt; 在 nginx 中配置虚拟主机 12345678910111213141516server &#123; listen 80; server_name 127.0.0.1 192.168.1.230; client_max_body_size 10m; charset utf-8; #access_log /data/server/tengine/logs/127.0.0.1_access.log; #error_log /data/server/tengine/logs/127.0.0.1_error.log; root /data/www/; # index index.html; index index.php; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125;&#125; 扩展： 使用 php -m 查看扩展,提示如下： 12345678root@ubuntu:/data/server/php7/bin# php -mThe program 'php' can be found in the following packages: * php7.0-cli * hhvmTry: apt install &lt;selected package&gt;root@ubuntu:/data/server/php7/bin# apt install php7.0-cli安装： apt install php7.0-cli PHP命令 1234567891011php --ini查询 PHP 服务 ps aux | grep php-fpmpkill -9 phpphp启动命令/data/server/php7/sbin/php-fpm#查看PHP的编译参数/data/server/php7/bin/php -i | grep configure此命令使用场景:编译web服务器由nginx换为Apache的时候需要在Apache中添加PHP模块, PHP需要添加 --with-apxs2 后重新编译 配置 php 全局变量1234567891011PHP编译安装后的目录: /data/server/php7/binvim /etc/profile#centos中配置PHP环境变量:修改 /etc/profile 配置环境变量PATH=$PATH:/data/server/php7/binexport PATH然后执行source /etc/profile 或者 ./profile 使其生效; 执行完后可以通过 echo $PATH 命令查看环境变量###PATH=$PATH:/data/server/php/bin 意思加入环境变量###export PATH 意思使环境变量生效 PHP官网下载地址 PHP官方安装文档","tags":[]},{"title":"win server 2008 部署php","date":"2018-03-15T03:57:07.089Z","path":"2018/03/15/win/win_server_2008_IIS/","text":"配置IIS （安装好 PHPstudy 后测试php）在计算机右击,选择管理，出现服务器管理界面；或者打开“开始”菜单→“服务器管理”，出现服务器管理界面 添加角色，下一步，选择 web 服务器（IIS）,下一步 选择 CGI,一直下一步 安装好IIS后，需要测试一下，在浏览器中输入 localhost ，如果出现 IIS7 欢迎界面说明正常； 配置一个新网站，打开 IIS 管理器（“开始”→“所有程序”→“管理工具”→“internet 信息服务（IIS）管理器”）；备注：使用 PHPstudy 打开 IIS 管理器，需要提前安装好 PHPstudy； 添加好后，在 IIS 管理器中，在刚才添加的网站 “网站名称” 上右键，点击 “编辑权限” ，进入后点击“安全”选项卡，再点击其中的“编辑” 。打开“编辑”窗口后点击“添加”按钮。添加一个“用户”到权限用户列表中，然后为其勾选除了“完全控制”之外的权限。然后点击“确定” “应用”。 结束后，在刚才选择的物理路径下创建 index.html ,然后用记事本打开，输入 ”hello world“ 测试； 如果是做 PHP 开发，安装好 PHPstudy 后，可出在刚才选择的物理路径下创建 index.php ,然后用记事本打开，输入 如下做测试 123&lt;?phpecho phpinfo();?&gt;","tags":[]},{"title":"ubuntu -lnmp环境","date":"2018-03-13T03:46:22.702Z","path":"2018/03/13/ubuntu/linux_ubuntu_lnmp/","text":"LNMP环境搭建使用命令下载 nginx 安装包 nginx官网 nginx官网 nginx官网","tags":[]},{"title":"ubuntu -shipyard","date":"2018-03-09T07:17:50.419Z","path":"2018/03/09/ubuntu/linux_ubuntu_shipyard/","text":"Shipyard简介待完善。。。。。。。 Shipyard 是一个基于 Web 的 Docker 管理工具，支持多 host，可以把多个 Docker host 上的 containers 统一管理；可以查看 images，甚至 build images；并提供 RESTful API 等 安装 shipyard1docker run --rm -v /var/run/docker.sock:/var/run/docker.sock shipyard/deploy start Shipyard官网最近官网不能访问","tags":[]},{"title":"-scp  Linux之间复制文件和目录","date":"2018-03-08T06:12:17.059Z","path":"2018/03/08/ubuntu/linux_DDU_scp/","text":"scp 简介scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用 命令格式scp [参数] [原路径] [目标路径] 命令参数-1 强制scp命令使用协议ssh1-2 强制scp命令使用协议ssh2-4 强制scp命令只使用IPv4寻址-6 强制scp命令只使用IPv6寻址-B 使用批处理模式（传输过程中不询问传输口令或短语）-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）-p 保留原文件的修改时间，访问时间和访问权限。-q 不显示传输进度条。-r 递归复制整个目录。-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。-l limit 限定用户所能使用的带宽，以Kbit/s为单位。-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，-P port 注意是大写的P, port是指定数据传输用到的端口号-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项 使用实例使用scp前提：两台服务器必须都安装 ssh 从本地服务器复制到远程服务器复制文件1234567891011注意目标文件的权限:scp local_file remote_username@remote_ip:remote_folder或者scp local_file remote_username@remote_ip:remote_file或者scp local_file remote_ip:remote_folder或者scp local_file remote_ip:remote_filedemo：scp test2_01.test dafei@192.168.1.113:/data/www/test/ 第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名第3,4个没有指定用户名，命令执行后需要输入用户名和密码（默认使用root），第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名 复制目录1234567-r参数不要遗漏：【否则报错： not a regular file】scp -r local_folder remote_username@remote_ip:remote_folder或者scp -r local_folder remote_ip:remote_folder demo:scp -r test2 dafei@192.168.1.113:/data/www/test/ 第1个指定了用户名，命令执行后需要输入用户密码；第2个没有指定用户名，命令执行后需要输入用户名和密码(默认使用root)； 从远程服务器复制到本地服务器从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了 从远程拷贝文件到本地目录 123scp root@remote_ip:remote_file local_folderdemo：scp dafei@192.168.1.87:/data/www/test2/test2_01.test /data/www/test/ 从远处复制目录到本地123scp -r root@remote_ip:remote_folder local_folderdemo:scp -r dafei@192.168.1.87:/data/www/test2 /data/www/test/","tags":[]},{"title":"ubuntu -tomact","date":"2018-03-01T03:10:38.581Z","path":"2018/03/01/ubuntu/linux_ubuntu_tomact/","text":"官网下载 Tomact 包上传到服务器12然后解压：sudo tar -zxvf apache-tomcat-9.0.5.tar.gz 在 /data/server 目录创建 tomcat 目录；然后将文件夹 apache-tomcat-9.0.5 移动到 /data/server/tomcat 下： 12mkdir tomcatsudo mv apache-tomcat-9.0.5 /data/server/tomcat/ 进入/data/server/tomcat/apache-tomcat-9.0.5/bin，编辑 startup.sh12345678910在最后一行加入下信息;#set java environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 ## 这里要注意要换成自己解压的 jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:%&#123;JAVA_HOME&#125;/lib:%&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH#tomcatexport TOMCAT_HOME=/data/server/tomcat/apache-tomcat-9.0.5 ## 这里要注意要换成自己解压的 tomcat 目录 启动1sudo ./startup.sh 关闭 tomcat ，需要在 shutdown.sh 对应的位置添加信息12345678910在最后一行加入下信息;#set java environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 ## 这里要注意要换成自己解压的 jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:%&#123;JAVA_HOME&#125;/lib:%&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH#tomcatexport TOMCAT_HOME=/data/server/tomcat/apache-tomcat-9.0.5 ## 这里要注意要换成自己解压的 tomcat 目录 停止1sudo ./shutdown.sh 加入开机启动：把catalina.sh文件复制到/etc/init.d123456789101112131415161718sudo cp -p /data/server/tomcat/apache-tomcat-9.0.5/bin/catalina.sh /etc/init.d/tomcat 编辑tomcat文件： sudo vim /etc/init.d/tomcat 在开头写如下内容：【提醒：这里一定要注意书写格式，不能有空格，有#的注释部分也要写全，不要遗漏】### BEGIN INIT INFO # Provides: tomcat # Required-Start: $local_fs $network # Required-Stop: $local_fs # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: tomcat service # Description: tomcat service daemon ### END INIT INFO CATALINA_HOME=/data/server/tomcat/apache-tomcat-9.0.5 JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 添加自启动服务1update-rc.d tomcat defaults 测试，关机重启访问 localhost:8080 或者 192.168.1.113:8080 tomact 命令1234service tomcat &#123;start|stop|restart&#125;service tomcat stopservice tomcat startservice tomcat restart","tags":[]},{"title":"Ubuntu -jdk","date":"2018-02-28T06:05:48.360Z","path":"2018/02/28/ubuntu/linux_ubuntu_jdk/","text":"Ubuntu 安装 jdk 2 种方式1、 通过 ppa 源方式安装 jdk82、通过官网下载安装包安装 jdk8 检测linux多少位： getconf LONG_BIT 我的系统是64位 使用 ppa 源方式安装添加ppa12sudo add-apt-repository ppa:webupd8team/javasudo apt-get update 安装oracle-java-installer1sudo apt-get install oracle-java8-installer 接下来会出现连个界面，选择ok、yes 即可 查看java版本1java -version 卸载jdk1sudo apt-get remove openjdk* 直接下载 jdk 压缩包方式安装官网下载 jdkjdk1.8 官网地址 选择相应的系统 .tar.gz 包，然后用ssh上传到服务器【提醒：不要在服务器直接下载，否则解压会出错】 解压缩，放到指定目录1sudo tar -zxvf jdk-8u161-linux-x64.tar.gz -C /usr/lib/jvm 修改环境变量1sudo vim ~/.bashrc 文件的末尾追加下面内容 12345#set oracle jdk environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_161 ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jre export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 设置系统默认 jdk 版本12345678sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_161/bin/java 300 sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_161/bin/javac 300 sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_161/bin/jar 300 sudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_161/bin/javah 300 sudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_161/bin/javap 300 然后执行sudo update-alternatives --config java 测试 jdk1java -version","tags":[]},{"title":"Ubuntu -nginx","date":"2018-02-26T07:13:09.108Z","path":"2018/02/26/ubuntu/linux_ubuntu_nginx/","text":"安装nginx 01安装nginx123456789sudo apt-get install nginx启动 ngnnx: sudo service nginx start扩展centos nginx 重启service nginx restart/etc/init.d/nginx stop/etc/init.d/nginx start 查看nginx配置文件目录123ps -aux | grep nginx 【返回结果包含安装目录】nginx -t 【返回结果包含配置文件目录】cat /etc/nginx/nginx.conf 编译安装02安装必要的编译环境Tengine 安装需要使用源代码自行编译，所以安装前需要安装必要的编译工具 1234567sudo apt-get install build-essentialsudo apt-get install libtoolsudo apt-get install g++centos 平台编译环境命令：yum -y install gcc automake autoconf libtool makeyum install gcc gcc-c++ 安装所需要的组件【pcre、openssl、zlib】，组件安装的时候注意路径 PCRE1234567wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz解压到你指定的目录tar -zxvf pcre-8.38.tar.gz -C /data/server/nginx_componentmv pcre-8.38 pcrecd pcre/./configure --prefix=/data/server/nginx_component/pcremake &amp;&amp; make install OpenSSL1234567wget http://www.openssl.org/source/openssl-1.0.2.tar.gz解压到你指定的目录tar -zxvf openssl-1.0.2.tar.gz -C /data/server/nginx_componentmv openssl-1.0.2 opensslcd openssl/./config --prefix=/data/server/nginx_component/opensslmake &amp;&amp; make install Zlib1234567wget http://zlib.net/zlib-1.2.11.tar.gz解压到你指定的目录tar -zxvf zlib-1.2.11.tar.gz -C /data/server/nginx_componentmv zlib-1.2.11 zlibcd zlib/./configure --prefix=/data/server/nginx_component/zlibmake &amp;&amp; make install 下载nginx安装包，我选择的是 1.4.212345678910111213141516171819202122232425262728wget http://nginx.org/download/nginx-1.4.2.tar.gz解压到 /data/server/nginx 目录（可以根据实际情况选择目录）：tar -zxvf nginx-1.4.2.tar.gz -C /data/server/mv nginx-1.4.2 nginxcd nginx##注意路径 ./configure --sbin-path=/data/server/nginx \\--conf-path=/data/server/nginx/nginx.conf \\--pid-path=/data/server/nginx/nginx.pid \\--with-http_ssl_module \\--with-pcre=/data/server/nginx_component/pcre \\--with-zlib=/data/server/nginx_component/zlib \\--with-openssl=/data/server/nginx_component/openssl make &amp; make install 安装完的提示：.........test -f '/data/server/nginx/nginx.conf' || cp conf/nginx.conf '/data/server/nginx/nginx.conf'cp conf/nginx.conf '/data/server/nginx/nginx.conf.default'test -d '/data/server/nginx' || mkdir -p '/data/server/nginx'test -d '/usr/local/nginx/logs' || mkdir -p '/usr/local/nginx/logs'test -d '/usr/local/nginx/html' || cp -R html '/usr/local/nginx'test -d '/usr/local/nginx/logs' || mkdir -p '/usr/local/nginx/logs'make[1]: Leaving directory '/data/server/nginx'[1]+ Exit 2 注意配置的时候 –with-pcre 、–with-openssl、–with-zlib的路径为源文件的路径 检测是否可用12/data/server/nginx/nginx -t./nginx -t 报错：12345678安装完会有异常,没有 pid 文件，那就创建一个 pid 文件root@ubuntu:/data/server/nginx# /data/server/nginx/nginx -s reloadnginx: [error] open() \"/data/server/nginx/nginx.pid\" failed (2: No such file or directory)root@ubuntu:/data/server/nginx# touch nginx.pidroot@ubuntu:/data/server/nginx# /data/server/nginx/nginx -s reloadnginx: [error] invalid PID number \"\" in \"/data/server/nginx/nginx.pid\"root@ubuntu:/data/server/nginx# /data/server/nginx/nginx -c /data/server/nginx/conf/nginx.confroot@ubuntu:/data/server/nginx# /data/server/nginx/nginx -s reload 命令1234567/data/server/nginx/nginx -t 【检查配置】/data/server/nginx/nginx 【启动命令】/data/server/nginx/nginx -s stop 【停止命令】/data/server/nginx/nginx -s reload 【重启命令：】pid出错时，可以使用这个：/data/server/nginx/nginx -c /data/server/nginx/conf/nginx.conf 编译安装03下载1234当前操作目录位置： /home/fei/serverwget http://nginx.org/download/nginx-1.4.2.tar.gztar -zxvf nginx-1.4.2.tar.gz -C /home/fei/servercd nginx-1.4.2 配置12345678910111213./configure --prefix=/data/server/nginx-1.4.2发现少包，安装缺少的包sudo apt-get install libpcre3 libpcre3-dev 再次配置【 一直到不在缺少包 】./configure --prefix=/data/server/nginx-1.4.2【 常见缺少少包： pcre、openssl、zlib，安装这三个包命令如下】sudo apt-get install libpcre3 libpcre3-dev sudo apt-get install openssl libssl-dev sudo apt-get install zlib1g-dev 配置 OK 后，继续操作 编译安装1make &amp;&amp; make install 检测是否可用1/data/server/nginx-1.4.2/sbin/nginx -t 安装完成后，原文件就没有用了 命令1234567/data/server/nginx/nginx -t 【检查配置】/data/server/nginx/nginx 【启动命令】/data/server/nginx/nginx -s stop 【停止命令】/data/server/nginx/nginx -s reload 【重启命令：】pid出错时，可以使用这个：/data/server/nginx/nginx -c /data/server/nginx/conf/nginx.conf 其他让普通用户可以启动nginx1234用root用户进入....nginx/sbin然后chown root nginxchmod u+s nginx然后通过普通用户就可以启动了。 nginx 官网 nginx 官网下载 nginx 官网linux安装","tags":[]},{"title":"ubuntu -jenkins","date":"2018-02-17T03:06:40.376Z","path":"2018/02/17/ubuntu/linux_ubuntu_jenkins/","text":"下载war 包第一种安装方式：前提：系统中必须安装好jdk，我的 jdk 是1.8 将下载好的war包放到linux中；切换到 jenkins.war 存放目录，输入命令： java -jar jenkins.war 然后在浏览器中输入localhost:8080,就可以打开Jenkins 这种方式安装好后命令窗口会一直保持打开状态，不太实用； 第二种安装方式，在 tomcat 中启动 不管用那种方法，安装后登录时空白，现在没有时间弄了，有知道的请留言 安装12345678wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'sudo apt-get updatesudo apt-get install jenkins如果是升级，直接使用一下命令sudo apt-get updatesudo apt-get install jenkins 卸载12345678910//服务sudo apt-get remove jenkins//安装包，注意这里如果不是ubuntu那就yumsudo apt-get remove --auto-remove jenkins//配置和数据sudo apt-get purge jenkinssudo apt-get purge --auto-remove jenkins","tags":[]},{"title":"Ubuntu -git","date":"2018-02-13T09:19:02.209Z","path":"2018/02/13/ubuntu/linux_ubuntu_git/","text":"前言：本地: windows7 ip: 192.168.1.105服务器Ubuntu ： Ubuntu 15.10 ip: 192.168.1.113 【cat /etc/issue】 Ubuntu中git安装123git --version 【检测当前环境是否安装git】sudo apt-get install git 【安装git】 新增用户12新增用户(用户名为git_dafei),用于运行git服务，回车后输入密码adduser git_dafei 初始git仓库，12345我在 /home/git_dafei/code ( mkdir -p /home/git_dafei/code 注意创建这个目录后的所有者，权限)这个目录下，使用 git init 这个--bare 选项为它设置一个空的存储库，一般服务器上的 Git 仓库是以 .git 结尾的空仓库git init --bare test.git 开始本地(windows)操作 本地生成公钥,位置 C:\\Users\\Administrator\\.ssh 或者 ~/.ssh1ssh-keygen -t rsa ls ~/.ssh/ 将win用户的公钥(即 id_rsa.pub )添加到服务器上1234 scp ~/.ssh/id_rsa.pub git_dafei@192.168.1.113:/home/git_dafei/ [扩展:使用ssh端口 ] scp -P 22 ~/.ssh/id_rsa.pub git_dafei@192.168.1.113:/home/git_dafei/ 将本地用户的公钥添加到认证文件中1234cd /home/git_dafeimkdir .sshtouch authorized_keys 【在 .ssh中创建 】cat id_rsa.pub &gt;&gt; .ssh/authorized_keys [如果没有 authorized_keys 请创建 touch authorized_keys 修改文件所有者为 git_dafei 用户123456789101112131415161718chown -R git_dafei:git_dafei /home/git_dafeichmod 755 /home/git_dafei/ # 1. 用户git_dafei目录755权限chmod 700 /home/git_dafei/.ssh # 2. .ssh目录700权限chmod 600 /home/git_dafei/.ssh/authorized_keys # 3. authorized_keys 600权限 ////////////////////效果//////////////////////////drwxr-xr-x 2 git_dafei git_dafei 4096 Feb 14 19:39 .ssh 【修改前权限】chmod 700 /home/git_dafei/.sshdrwx------ 2 git_dafei git_dafei 4096 Feb 14 19:39 .ssh 【修改后权限】【修改前权限】：-rw-r--r-- 1 git_dafei git_dafei 401 Feb 14 19:40 /home/git_dafei/.ssh/authorized_keys chmod 600 /home/git_dafei/.ssh/authorized_keys【修改后权限】-rw------- 1 git_dafei git_dafei 401 Feb 14 19:40 /home/git_dafei/.ssh/authorized_keys 修改ssh配置文件12修改ssh配置文件/etc/ssh/sshd_config，取消这行(33行) AuthorizedKeysFile %h/.ssh/authorized_keys 前面的注释修改完重启ssh: service ssh restart 安全123为例安全，禁止 git_dafei 用户 shell登录，需要修改 /etc/passwd将 git_dafei:x:1002:1002:,,,:/home/git_dafei:/bin/bash改为 git_dafei:x:1002:1002:,,,:/home/git_dafei:/usr/bin/git-shell 在win中clone刚才创建的test.git12345克隆的用户有错git clone git_dafei@192.168.1.113:/home/git_dafei/code/test.gitgit clone 上面设置的用户名@服务器ip:/home/git_dafei/code/test.gitgit clone ssh://git_dafei@192.168.1.113:22 /home/git_dafei/code/test.git [指定ssh端口克隆] Ubuntu git官方文档git官方文档","tags":[]},{"title":"ubuntu15 -redis安装","date":"2018-02-12T09:04:26.148Z","path":"2018/02/12/ubuntu/linux_ubuntu_redis/","text":"redis2种安装方式 安装redis1234sudo apt-get install redis-server 启动redisredis-server 检查redis 进程1ps -aux|grep redis 终端输入：redis-cli 测试redis是否成功 redis 设置密码123456789reids默认是不需要密码的，设置密码sudo vi /etc/redis/redis.conf 在397行： 取消 注释 # requirepass foobared 设置新密码： requirepass redis_pwd_123456 让 reids 远程登录 注释bind，在69行 # bind 127.0.0.1 修改后重启redis1sudo /etc/init.d/redis-server restart 记得使用密码登录奥！！！ 卸载redis1sudo apt-get purge --auto-remove redis-server 2、编译安装下载1234wget http://download.redis.io/releases/redis-4.0.8.tar.gztar -xzvf redis-4.0.8.tar.gz -C /data/server/cd redis-4.0.8/make 启动redismake完后 redis-4.0.8目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下，下面启动redis服务. 12cd src/./redis-server redis设置密码123456789reids默认是不需要密码的，设置密码vi redis.conf 在500行： 取消 注释 # requirepass foobared 设置新密码： requirepass redis_pwd_123456让 reids 远程登录 注释bind，在69行 # bind 127.0.0.1 修改后启动redis1src/redis-server ./redis.conf 【指定配置文件启动】 设置 reids 后台启动1234567891011121314151617181920vi redis.conf 在136行把 daemonize no 改成 daemonize yes修改完重启redis：src/redis-server ./redis.conf 【指定配置文件启动】/data/server/redis-4.0.8/src/redis-server ./redis.conf 【指定配置文件启动】/data/server/redis-4.0.8/src/redis-server /data/server/redis-4.0.8/redis.conf 【指定配置文件启动】后台启动后关闭命令：./redis-cli -h 127.0.0.1 -a redis_pwd_123456 -p 6379 shutdown/data/server/redis-4.0.8/src/redis-cli -h 127.0.0.1 -a redis_pwd_123456 -p 6379 shutdown指定密码登录：/data/server/redis-4.0.8/src/redis-cli -a redis_pwd_123456./redis-cli -a redis_pwd_123456./redis-cli 回车后,输入 auth 密码测试数据：set key1 \"hello world\"get key1 redis官网下载地址 redis官网安装","tags":[]},{"title":"Ubuntu -ssh","date":"2018-02-12T06:25:27.547Z","path":"2018/02/12/ubuntu/linux_ubuntu_ssh/","text":"安装客户端1sudo apt install openssh-client 安装服务端1sudo apt install openssh-server 配置1查看手册 man sshd_config 在编辑配置文件之前，您应该生成一个原始文件的拷贝并对其写保护，以便您可以参考原始文件并在必要时重用它。拷贝 /etc/ssh/sshd_config 文件并对其写保护可以通过在终端提示符后运行下列命令 12sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.originalsudo chmod a-w /etc/ssh/sshd_config.original 要设置您 OpenSSH 在 TCP 2222 端口而不是缺省的 TCP 20 端口监听，可以如下使用改变 Port 语句： Port 2222 要让 sshd 允许基于公钥登录证书，可以简单添加或修改该行语句： PubkeyAuthentication yes If the line is already present, then ensure it is not commented out. 要使您的 OpenSSH 服务器显示 /etc/issue.net 文件的内容以作为预登录 Banner，只需简单地将下行添加或修改： Banner /etc/issue.net 在 /etc/ssh/sshd_config 文件中。 在修改 /etc/ssh/sshd_config 文件之后，保存该文件并重启 sshd 服务器应用程序以使之生效。可以在终端提示符后使用下列命令： 1sudo systemctl restart sshd.service SSH服务器命令1234567停止服务：sudo /etc/init.d/ssh stop启动服务：sudo /etc/init.d/ssh start重启服务：sudo /etc/init.d/ssh restart登录： ssh 用户名@远程ip demo： ssh dafei@192.168.1.82 ssh -p 22 dafei@192.168.1.82 [指定端口登录]断开连接：exit; 如果细心，可能发现远程登录不能用root登录，解决办法： 修改 /etc/ssh/sshd_config 配置文件 1234526 # Authentication:27 LoginGraceTime 12028 # PermitRootLogin prohibit-password 【找到这一行注释掉】29 PermitRootLogin yes 【改为yes】30 StrictModes yes 其他证书登录、无密码登录这里不在写，有需要的自己网上找资料；这个也是修改 sshd_config 文件 扩展： Ubuntu ssh","tags":[]},{"title":"ubuntu -docker","date":"2018-02-08T02:04:31.864Z","path":"2018/02/08/ubuntu/linux_ubuntu_docker/","text":"Linux ubuntu docker前提条件 Docker要求Ubuntu系统内核版本高于3.10，查看内核版本 1uname -r 系统版本没有问题，docker安装一直包这错。试一下docker命令，检查镜像信息 123docker images现在Ubuntu系统提示安装docker命令，我们执行apt-get install docker.io 查看docker版本123docker versionsudo docker run hello-world 【确认docker是否安装成功】 ———————–到这里docker已经安装完成———————— 安装docker-compose12345678910111213141516171819202122232425sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composecurl -L https://raw.githubusercontent.com/docker/compose/1.8.0/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose 【bash 补全命令】////////如果出现超时，加上2个参数： ///////////--connect-timeout 100000 -m 1000000-m为数据最大传输时间curl -L \"https://github.com/docker/compose/releases/download/1.9.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose --connect-timeout 100000 -m 1000000 ////////////////////////////////////////////docker-compose -version 【检测 docker-compose 版本】sudo rm /usr/local/bin/docker-compose 【卸载docker-compose】-----------------------------------------------docker-compose 命令docker-compose ps 查看容器运行状态docker-compose restart #重启所有容器docker-compose restart App1 #重启App1docker-compose stop #停止所有容器docker-compose rm #删除所有容器docker-compose stop App1 #停止App1docker-compose -f docker-compose.yml down 停止并删除容器、网络、镜像、数据卷 ———————–到这里docker-compose已经安装完成———————— Docker Compose 搭建 Rails温馨提示： 复制粘贴命令的时候注意别丢信息 创建项目目录12mkdir myappcd myapp 创建 Dockerfile文件，包含以下内容12345678FROM ruby:2.3.3RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejsRUN mkdir /myappWORKDIR /myappCOPY Gemfile /myapp/GemfileCOPY Gemfile.lock /myapp/Gemfile.lockRUN bundle installCOPY . /myapp 创建 Gemfile 文件，包含以下内容12source 'https://rubygems.org'gem 'rails', '5.0.0.1' 创建空的 Gemfile.lock 文件1touch Gemfile.lock 创建一个 docker-compose.yml ，包含以下内容温馨提示：docker-compose.yml 中 version: ‘3’ 改为 version: ‘2’ 12345678910111213version: '2'services: db: image: postgres web: build: . command: bundle exec rails s -p 3000 -b '0.0.0.0' volumes: - .:/myapp ports: - \"3000:3000\" depends_on: - db 接下来执行1docker-compose run web rails new . --force --database=postgresql 查看现在的目录： ls -l 修改权限，重建 Docker 镜像12sudo chown -R $USER:$USER .docker-compose build 修改 config/database.yml 文件如果担心修改错误，可以先备份原文件： cp database.yml database.yml_backup 123456789101112131415161718192021清空 database.yml 文件echo \" \"&gt;database.ymldatabase.yml 文件写入以下内容default: &amp;default adapter: postgresql encoding: unicode host: db username: postgres password: pool: 5development: &lt;&lt;: *default database: myapp_developmenttest: &lt;&lt;: *default database: myapp_test 启动应用1docker-compose up 创建数据库，在另一个终端中，执行1docker-compose run web rake db:create 用浏览器访问 http://localhost:3000 ，你会看到 Rails 的欢迎信息： If you are using Docker Machine, then docker-machine ip MACHINE_VM returns the Docker host IP address, to which you can append the port (&lt;Docker-Host-IP&gt;:3000). Compose and Rail 官方文档","tags":[]},{"title":"ubuntu系统","date":"2018-02-07T02:54:13.968Z","path":"2018/02/07/ubuntu/linux_ubuntu_centos/","text":"虚拟机安装完ubuntu后root没有密码12设置root密码sudo passwd 虚拟机安装完centos后重新设置root密码12设置root密码passwd 用户切换：1234567891011121314sudo su (切换到root用户)； su user（user是你自己安装时候的用户名；切换到普通用户）其他命令：修改文件权限： sudo chmod -R 777 文件名安装文件命令： sudo apt-get install 文件名 清空某个文件 echo \"\" &gt;log.log 动态查看内容 tail -f api_v1.log 修改文件权限 sudo chmod -R 777 文件名 安装好系统后，vi不能正常使用方向键和退格键ubuntu中vi在编辑状态下方向键不能用，还有回格键不能删除等我们平时习惯的一些键都不能使用。解决办法：可以安装vim full版本，在full版本下键盘正常，安装好后同样使用vi命令。 12345678910111213141516171819202122232425262728-----------（1）-----一般安装步骤------------------ sudo apt-get remove vim-common sudo apt-get install vim-----------（2）------直接安装vim 报错 packet 不存在、找不到 请换源，参考下面-----------进入/etc/apt/ cd /etc/apt对 sources.list文件进行备份 sudo cp sources.list sources.list.bak删除掉 sources.list 中的内容【命令 echo \"\"&gt;sources.list 】，选择阿里云源 deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse------------（3）换源结束-------------------------------apt-get update 先更新一下现在可以安装vim sudo apt-get install vim","tags":[]},{"title":"数据库账号管理","date":"2018-02-01T07:46:08.452Z","path":"2018/02/01/mysql_DDU_数据库账号/","text":"注意事项 分配数据库账号权限时，请按最小权限原则和业务角色创建账号，并合理分配只读和读写权限。必要时可以把数据库账号和数据库拆分成更小粒度，使每个数据库账号只能访问其业务之内的数据。如果不需要数据库写入操作，请分配只读权限 为保障数据库的安全，请将数据库账号的密码设置为强密码，并定期更换。","tags":[]},{"title":"-cp  创建文件和目录的副本","date":"2018-01-29T07:31:05.919Z","path":"2018/01/29/ubuntu/linux_DDU_cp/","text":"不带任何参数,运行cpcp最基本命令，拷贝file_3.txt 从一个位置复制到另一个位置 12345ls -all 【递归展示目录本文中会多次用到】----------------------------cp file_3.txt /home/destination_file或者cp /home/soruce_file2/file_3.txt /home/destination_file 拷贝多个文件拷贝多个文件，我们只需将文件名字用空格隔开。或者使用*拷贝所有文件 12cp file_3.txt file_4.txt /home/destination_filecp * /home/destination_file 【拷贝所有文件，注意观察截图，aaa目录没有拷贝成功，稍后解决】 拷贝一个目录-r 或者 -R ，不论目录是否为空都会拷贝 1cp -r aaa/ /home/destination_file 【这就解决上次没有拷贝aaa目录】 创建文件硬链接，而不是拷贝他们拷贝文件意味着你必须使用一些存储空间来储存拷贝的文件。有时候出于某种原因，你可能想要创建“快捷方式”或者链接到文件，而不是拷贝它们。要做到这一点，我们可以使用-l选项。 1cp -l file_3.txt /home/destination_file 创建文件的软连接【符号链接、快捷方式…..】软连接（符号链接）用 -s实现 1cp -s file_3.txt file_44.txt 文件归档使用 -a 选项来归档文件。保留链接和文件属性，递归拷贝目录，相当于下面的d、p、r三个选项组合。 1cp -a * /home/destination_file/ 只拷贝文件属性只拷贝文件属性，不拷贝文件内容，使用 –attributes-only 选项 1cp --attributes-only file_3.txt /home/destination_file/ 显示正在做什么默认情况下，拷贝是不会显示拷贝时发生了什么，我们可以使用 -v选项 1cp -v * /home/destination_file/ 目标文件时间是最新更改，源文件时间老拷贝时，目标文件先存着和源文件同名文件，切目标文件时间是最新更改，使用 -u,不会覆盖最新文件 1cp -vu file_3.txt file_4.txt /home/destination_file/ 使用交互模式交互模式下会询问是否覆盖目标目录下的文件。使用 -i 选项 1cp -i file_3.txt file_4.txt /home/destination_file/ 创建备份文件目标文件中存在与源文件同名文件，使用 -b 选项，备份目标文件，拷贝新文件 1cp -bv * /home/destination_file/ 强制拷贝使用 -f 强制拷贝文件。如果目标文件不能打开，可以用 -f 尝试一下。 1cp -f * /home/destination_file/ 在拷贝之前先删除目标可以用，–remove-destination 选项 实现。这个选项与上面的-f选项形成对照。如果 cp 命令在目标目录下发现同名文件， cp 命令会先删除目标文件，然后再拷贝一份新的。 1cp --remove-destination -v * /home/destination_file/ 其他： 123一般情况下用这个命令 【参数avr】cd /home/www/Downloadscp -avr * /data/www/","tags":[]},{"title":"阿里云CDN上实现https","date":"2018-01-18T03:15:31.841Z","path":"2018/01/18/阿里云CDN上实现https/","text":"SSL证书管理对于静态资源的请求，由于存储在阿里OSS上，并在前端使用了阿里云CDN,因此将相关SSL证书的信息在阿里云CDN上配置一下就ok。 1客户端-------请求（js,img，css）------&gt;CDN----&gt;云存储OSS 从阿里云CA证书服务下载证书 下载解压后得到2个文件： xxx.pem xxx.key 在阿里云CDN管理控制台找到 HTTPS设置点击域名中的配置,然后找到HTTPS设置，修改配置 打开之前下载好的xxx.pem 和 xxx.key ,将里面的内容分别复制到证书对应位置,建议跳转类型设置为默认，保存之后用HTTPS访问你的静态资源，测试一下","tags":[]},{"title":"计算两点之间的距离","date":"2017-12-30T13:50:12.634Z","path":"2017/12/30/mysql_DDU_计算两点之间的距离/","text":"MySql查询执行流程图12345发送语句查询缓存查询优化执行查询返回结果 计算两点之间的距离一个典型的例子是计算以某个点为中心，一定半径内的所有点。典型的实际案例可能是查找某个附近所有可以出租的房子，或者社交网站中“匹配”附近的用户，等等。假设我们有如下表：123456789CREATE TABLE `locations` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(30) DEFAULT NULL, `lat` float NOT NULL, `lon` float NOT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1;INSERT INTO locations(name,lat,lon)VALUES(\"Charlottesville,Virginia\",38.03,-78.48),(\"Chicago,Illinois\",41.85,-87.65),(\"Mashington,DC\",38.89,-77.04) 这里经度和纬度的单位是“度”，通常我们假设地球是圆的，然后使用两点所在最大圆（半正矢）公式来计算两点之间的距离。现在有坐标latA和lonA、latB和lonB，那么点A和点B的距离计算公式如下： 1234AcOS(COS(latA)*COS(latB)*COS(lonA-lonB)+SIN(1atA)*SIN(LatB)) 计算出的结果是一个弧度，如果要将结果的单位转换成英里或者千米，则需要乘以地球的半径，也就是3959英里或者6371千米。假设我们需要找出所有距离Baron所居住的地方Charlottesville100英里以内的点，那么我们需要将经纬度带入上面的计算公式： 12345678910111213SELECT * FROM locations WHERE 3979*ACOS(COS(radians(lat))*COS(radians(38.03))*COS(radians(lon)-radians(-78.48))+SIN(radians(lat))*SIN(radians(38.03)))&lt;=100;+----+--------------------------+-------+--------+| id | name | lat | lon |+----+--------------------------+-------+--------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 || 3 | Mashington,DC | 38.89 | -77.04 |+----+--------------------------+-------+--------+ 这类查询不仅无法使用索引，而且还会非常消耗CPU时间，给服务器带来很大的压力，而且我们还得反复计算这个。那要怎样优化呢?这个设计中有几个地方可以微优化。第一，看看是否真的需要这么精确的计算。其实这种算法已经有很多不精确的地方了，如下所示：两个地方之间的直线距离可能是100英里，但实际上它们之间的行走距离很可能不是这个值。无论你们在哪两个地方，要到达彼此位置的行走距离多半都不是直线距离，路上可能需要绕很多的弯，比如说如果有一条河，需要绕远走到一个有桥的地方。所以，这里计算的绝对距离只是一个参考值。 如果我们根据邮政编码来确定某个人所在的地区，再根据这个地区的中心位置计算他和别人的距离，那么这本身就是一个估算。Baron 住在Charlottesville，不过不是在中心地区，他对华盛顿物理位置的中心也不感兴趣。所以，通常并不需要精确计算，很多应用如果这样计算，多半是认真过头了。这类似于有效数字的估算：计算结果的精度永远都不会比测量的值更高。（换句话说，“错进，错出”。） 如果不需要太高的精度，那么我们认为地球是圆的应该也没什么问题，其实准确的说应该是椭圆。根据毕达哥拉斯定理，做些三角函数变换，我们可以把上面的公式转换得更简单，只需要做些求和、乘积以及平方根运算，就可以得出一个点是否在另一个点多少英里之内。益习等等，为什么就到这为止？我们是否真需要计算一个圆周呢？为什么不直接使用一个正方形代替?边长为200英里的正方形，一个顶点到中心的距离大概是141英里，这和实际计算的100英里相差得并不是那么远。那我们根据正方形公式来计算弧度为0.0253（100英里）的中心到边长的距离： 12345678910SELECT * FROM locations WHERE lat BETWEEN 38.03 - DEGREES(0.0253) AND 38.03 + DEGREES(0.0253)AND lon BETWEEN -78.48 - DEGREES(0.0253) AND -78.48 + DEGREES(0.0253);+----+--------------------------+-------+--------+| id | name | lat | lon |+----+--------------------------+-------+--------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 || 3 | Mashington,DC | 38.89 | -77.04 |+----+--------------------------+-------+--------+ 现在我们看看如何使用索引来优化这个查询。简单地，我们可以增加索引（lat,lon)或者（lon,lat)。不过这样做效果并不会很好。正如我们所知，MySQL5.5和之前的版本，如果第一列是范围查询的话，就无法使用素引后面的列了。因为两个列都是范围的，所以这里只能使用索引的一个列（BETMEEN等效于一个大于和一个小于）。我们再次想起了通常使用的IN（）优化。我们先新增两个列，用来存储坐标的近似值FLOOR()，然后在查询中使用IN（）将所有点的整数值都放到列表中。下面是我们需要新增的列和索引： 12345678ALTER TABLE locations ADD lat_floor INT NOT NULL DEFAULT 0, ADD lon_floor INT NOT NULL DEFAULT 0, ADD KEY (lat_floor,lon_floor);-----------------------------------------UPDATE locationsSET lat_floor = FLOOR(lat),lon_floor=FLOOR(lon); 现在我们可以根据坐标的一定范围的近似值来搜索了，这个近似值包括最小值和最大值，地理上分别对应的是南北。下面的查询为我们只展示了如何查某个范围的所有点：数值需要在应用程序中计算而不是MySQL中： 12345678910SELECT FLOOR(38.03 - DEGREES(0.0253))AS lat_1b,CEILING( 38.03 + DEGREES(0.0253))AS lat_lub,FLOOR(-78.48 - DEGREES(0.0253))AS 1on_1b,CEILING(-78.48 + DEGREES(0.0253))AS 1on_ub;------------------------------------------------------+--------+---------+--------+--------+| lat_1b | lat_lub | 1on_1b | 1on_ub |+--------+---------+--------+--------+| 36 | 40 | -80 | -77 |+--------+---------+--------+--------+ 现在我们就可以生成IN（）列表中的整数了，也就是前面计算的地板和天花板数值之间的数字。下面是加上WHERE条件的完整查询：12345678910111213现在我们就可以生成IN（）列表中的整数了，也就是前面计算的地板和天花板数值之间的数字。下面是加上WHERE条件的完整查询：SELECT * FROM locationsWHERE lat BETWEEN 38.03-DEGREES(0.0253)AND 38.03 + DEGREES(0.0253)AND lon BETWEEN-78.48-DEGREES(0.0253)AND-78.48 +DEGREES(0.0253)AND lat_floor IN(36,37,38,39,40)AND lon_floor IN(-80,-79,-78,-77);+----+--------------------------+-------+--------+-----------+-----------+| id | name | lat | lon | lat_floor | lon_floor |+----+--------------------------+-------+--------+-----------+-----------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 | 38 | -79 || 3 | Mashington,DC | 38.89 | -77.04 | 38 | -78 |+----+--------------------------+-------+--------+-----------+-----------+ 使用近似值会让我们的计算结果有些偏差，所以我们还需要一些额外的条件剔除在正方形之外的点。这和前面使用CRC32做哈希索引类似：先建一个索引帮我们过滤出近似值，再使用精确条件匹配所有的记录并移除不满足条件的记录。事实上，到这时我们就无须根据正方形的近似来过滤数据了，我们可以使用最大圆公式或者毕达哥拉斯定理来计算： 123456789101112131415SELECT * FROM locationsWHERE lat_floor IN(36,37,38,39,40)AND lon_floor IN(-80,-79,-78,-77)AND 3979*ACOS(COS(radians(lat))*COS(radians(38.03))*COS(radians(lon)-radians(-78.48))+SIN(radians(lat))*SIN(radians(38.03)))&lt;=100;----------------------------------------------+----+--------------------------+-------+--------+-----------+-----------+| id | name | lat | lon | lat_floor | lon_floor |+----+--------------------------+-------+--------+-----------+-----------+| 1 | Charlottesville,Virginia | 38.03 | -78.48 | 38 | -79 || 3 | Mashington,DC | 38.89 | -77.04 | 38 | -78 |+----+--------------------------+-------+--------+-----------+-----------+ 这时计算精度再次回到前面——使用一个精确的圆周——不过，现在的做法更快。只要能够高效地过滤掉大部分的点，例如使用近似整数和索引，之后再做精确数学计算的代价并不大。只是不要直接使用大圆周的算法，否则速度会很慢。 Sphinx有很多内置的地理信息搜索功能，比MySQL实现要好很多。如果正在考虑使用MyISAM的GIS函数，并使用上面的技巧来计算，那么你需要记住：这样做效果并不会很好，MyISAM本身也并不适合大数据量、高并发的应用，另外MyISAM本身还有一些弱点，如数据文件崩溃、表级锁等。 回顾一下上面的案例，我们采用了下面这些常用的优化策略：·尽量少做事，可能的话尽量不做事。这个案例中就不要对所有的点计算大圆周公式；先使用简单的方案过滤大多数数据，然后再到过滤出来的更小的集合上使用复杂的公式运算。 快速地完成事情。确保在你的设计中尽可能地让查询都用上合适的索引，使用近似计算（例如本案例中，认为地球是平的，使用一个正方形来近似圆周）来避免复杂的计算。 需要的时候，尽可能让应用程序完成一些计算。例如本案例中，在应用程序中计算所有的三角函数。","tags":[]},{"title":"-mv   移动或重命名文件/目录","date":"2017-12-19T02:09:17.291Z","path":"2017/12/19/ubuntu/linux_DDU_mv/","text":"移动文件移动文件时需要注意的是文件的源地址和目标地址必须不同。这里有个例子，想要将file_1.txt文件从当前目录移动到其它目录，以/home/destination_file为例，语法应该如下： 1mv file_1.txt /home/destination_file/ 移动多个文件如果想一次移动多个文件，我们可以将他们放在一行并用空格分开。 123mv file_2.txt file_3.txt file_4.txt /home/destination_file/或者mv file_&#123;2,3,4&#125;.txt /home/destination_file/ 如果你的文件夹有规律可循那么你就可以使用通配符，比如，为了移除所有以.txt为扩展名的文件夹，我们可以使用下面的命令： 1mv *.txt /home/destination_file/ 移动目录不同于复制命令，用mv命令移动目录相当于直接。移动目录你可以使用不带选项的mv命令。 1mv /soruce_file/ /home/destination_file/ 重命名文件或目录我们也用mv命令来重命名文件或目录，不过目标位置必须相同才可以。然后文件名字必须不同。假定我们当前做所在目录为/home/soruce_file 123mv file_1.txt file_new1.txt如果是绝对路径，应该像下面这样：mv /home/soruce_file/file_2.txt /home/soruce_file/file_new2.txt 重命名目录12上一段的规则同样适用于目录。mv /home/soruce_file/ /home/soruce_file2/ 打印移动信息当你移动或重命名一大堆文件或目录时，你可能会想在不去目标位置去查看的情况下知道自己的命令是否成功地执行了。这就用到-v选项了。 1mv -v /home/soruce_file2/*.txt /home/destination_file/ 使用交互模式当你将文件移动到其他位置，而那个位置恰好有同样的文件，这时mv命令会覆盖掉原来的文件，对于mv的这一行为一般不会有什么提示。如果想产生一个关于覆盖文件的提示，我们可以使用-i选项。 1mv -i /home/soruce_file2/file_3.txt /home/destination_file/ 这个提示会让我们知道目标位置处file_3.txt的存在。如果我们按y键，那么那个文件将会被删除，否则不会 使用更新选项-i 选项会提示我们关于覆盖文件的提示，而 -u 则只在源文件比目标文件新时才执行更新，如果目标文件比源文件新，则不会执行。让我们看一看下面的例子： 1mv -uv /home/soruce_file2/*.txt /home/destination_file/ 不要覆盖任何已存在的文件如果-i选项询问我们是否覆盖文件，那么-n选项将不会允许我么覆盖任何已存在的文件， 1mv -vn /home/soruce_file2/file_new_time2.txt /home/destination_file/ 复制时创建备份默认情况下，移动文件将会覆盖已存在的目标文件。但是如果我们移动错了文件而目标文件已经被新的文件覆盖了，这时应该怎么办才好呢？-b选项可以办到，该选项会在新文件覆盖旧文件时将旧文件做备份。 1mv -bv /home/soruce_file2/file_new_time2.txt /home/destination_file/ 无条件覆盖已经存在的文件覆盖已经存在的文件或目录，使用-f选项。如果同时指定了 -f 选项和 -i 或 -n 选项，则 -f 选项会覆盖它们——即不进行任何提示而覆盖。所以在使用此参数的时候，你要保持头脑清醒，知道自己在做什么。 1mv -f /home/soruce_file2/file_new_time2.txt /home/destination_file/ 总结移动文件和目录命令是Linux系统的基本命令。通常你可以通过man mv 或者 mv –help显示mv的手册页以了解更多详细信息。","tags":[]},{"title":"YII2搭建后台并实现rbac权限控制","date":"2017-12-08T05:22:48.734Z","path":"2017/12/08/Yii2搭建后台并实现rbac权限控/","text":"安装Yii2参考官网安装文档yiiframeworkyiichina 配置数据库1234567891011创建数据库： create database yii2advanced default charset utf8;修改common/config/main-local.php数据库配置 'db' =&gt; [ 'class' =&gt; 'yii\\db\\Connection', 'dsn' =&gt; 'mysql:host=localhost;dbname=yii2advanced', 'username' =&gt; 'root', 'password' =&gt; 'root', 'charset' =&gt; 'utf8', ], 使用composer安装yii2-admin1234composer require mdmsoft/yii2-admin \"~2.0\"!!!温馨提示：建议安装 1.0 版本不安装 2.0 版本!!!composer require mdmsoft/yii2-admin \"~1.0\" 配置yii2-admin运行环境123456789101112131415161718192021222324权限控制在后台，所以在 backend/config/main.php 中配置以下内容：return [ 'modules' =&gt; [ 'admin' =&gt; [ 'class' =&gt; 'mdm\\admin\\Module', 'layout' =&gt; 'left-menu',//yii2-admin的导航菜单 ] ... ], ... 'components' =&gt; [ ... 'authManager' =&gt; [ 'class' =&gt; 'yii\\rbac\\DbManager', // 使用数据库管理配置文件 ] ], 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ 'site/*',//允许访问的节点，可自行添加 'admin/*',//允许所有人访问admin节点及其子节点 ] ],]; 创建数据表123456789101112131415161718php yii migrate --migrationPath=@mdm/admin/migrations执行sql：（自带的rbac） 修改配置文件console/config/main-local.phpreturn [ 'bootstrap' =&gt; ['gii'], 'modules' =&gt; [ 'gii' =&gt; 'yii\\gii\\Module', ], 'components' =&gt; [ \"authManager\" =&gt; [ \"class\" =&gt; 'yii\\rbac\\DbManager', \"defaultRoles\" =&gt; [\"guest\"], ], ],];cd到advance目录下面执行yii migrate --migrationPath=@yii/rbac/migrations 中文显示123456789101112131415161718192021222324在 common\\config\\main.php 中配置return [ 'language' =&gt; 'zh-CN', //中文显示 'aliases' =&gt; [ '@bower' =&gt; '@vendor/bower-asset', '@npm' =&gt; '@vendor/npm-asset', ], 'vendorPath' =&gt; dirname(dirname(__DIR__)) . '/vendor', 'components' =&gt; [ 'cache' =&gt; [ 'class' =&gt; 'yii\\caching\\FileCache', ], ],];现在可以查看后台：&lt;Your domain name&gt;/index.php?r=admin/user&lt;Your domain name&gt;/index.php?r=admin&lt;Your domain name&gt;/index.php?r=admin/route&lt;Your domain name&gt;/index.php?r=admin/permission&lt;Your domain name&gt;/index.php?r=admin/menu&lt;Your domain name&gt;/index.php?r=admin/role&lt;Your domain name&gt;/index.php?r=admin/assignment 配置授权demo12345678910111213141516以一个自定义的节点books为例，节点books下共有index 图书列表，view 查看图书，create创建图书，update 更新图书，delete 删除图书这个5个节点，，可以通过gii生成这些代码。配置目标：未登录用户仅能访问index节点一般用户能访问index，view，create三个节点管理员能访问所有节点---------------------------在 backend/config/main.php 中修改配置以下内容： 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 \"*\"//不配置这个是访问不到gii，使用完记得修改回来，否则权限会出问题 ] ], 添加可分配权限列表在路由列表中，添加book各个节点路由由表添加至右侧可分配路由列表中，如下: 在权限列表=》新增权限，填好后提交，然后填的路由规则即可，如下： 添加角色并分配权限 分配角色手动注册用户，我这里注册admin和test进行测试。其中admin为管理员，test为一般用户 ！！！测试权限之前12345678910！！！ 测试权限之前，把这里注释掉在 backend/config/main.php 中修改配置以下内容： 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 //\"*\"//把这个注释掉！！！ ] ], 开始测试12345678910111213141516171819201、以管理员身份登录时，可以进行所有操作。ok2、如果不登录，在访问book首页的时候会跳转到登录页面。预期结果是未登录时能访问book首页，就是说当前系统默认不认可我们配置给未登录用户的权限。有2中办法第一种 在 backend/config/main.php 中加一行指定默认规则的代码即可，如下：'authManager'=&gt; [ 'class' =&gt; 'yii\\rbac\\DbManager', 'defaultRoles' =&gt; ['未登录用户'],//添加此行代码，指定默认规则为 '未登录用户'],或者在 backend/config/main.php 修改为： 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 //\"*\"//不配置这个是访问不到gii，使用完记得修改回来，否则权限会出问题 \"book/index\",//未登录用户也可以访问图书列表 ] ], …… 安装yii2 AdminLTE后台主题123composer require dmstr/yii2-adminlte-asset \"^2.1\"安装过程中可能需要输入github的token 引入主题123456789101112131415161718192021方式一：(建议使用这种方式)复制整个vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app目录下的layouts目录和site目录到backend/views，覆盖原始文件。方式二：'components' =&gt; [ 'view' =&gt; [ 'theme' =&gt; [ 'pathMap' =&gt; [ '@app/views' =&gt; '@vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app' ], ], ],],现在可以查看后台：&lt;Your domain name&gt;/index.php?r=admin%2Fuser！！！如果访问权限相关的路径，如/admin/route/index并不是上面看到的样式，请将配置文件中的modules数组中配置的layouts的值删掉即可。如下： 'admin' =&gt; [ 'class' =&gt; 'mdm\\admin\\Module', //'layout' =&gt; 'left-menu',//yii2-admin的导航菜单 ] 配置数据库，登录123456789101112131415161718192021222324251、修改common/config/main-local.php数据库配置 'db' =&gt; [ 'class' =&gt; 'yii\\db\\Connection', 'dsn' =&gt; 'mysql:host=localhost;dbname=yii2advanced', 'username' =&gt; 'root', 'password' =&gt; 'root', 'charset' =&gt; 'utf8', ],2、注册后台账户，登录 3、在 common\\config\\main.php 中配置return [ 'language' =&gt; 'zh-CN', //中文显示 'aliases' =&gt; [ '@bower' =&gt; '@vendor/bower-asset', '@npm' =&gt; '@vendor/npm-asset', ], 'vendorPath' =&gt; dirname(dirname(__DIR__)) . '/vendor', 'components' =&gt; [ 'cache' =&gt; [ 'class' =&gt; 'yii\\caching\\FileCache', ], ],]; 配置简短路由123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051在 backend/config/main.php文件的compontents加上下面的配置\"urlManager\" =&gt; [ //用于表明urlManager是否启用URL美化功能，在Yii1.1中称为path格式URL， // Yii2.0中改称美化。 // 默认不启用。但实际使用中，特别是产品环境，一般都会启用。 \"enablePrettyUrl\" =&gt; true, // 是否启用严格解析，如启用严格解析，要求当前请求应至少匹配1个路由规则， // 否则认为是无效路由。 // 这个选项仅在 enablePrettyUrl 启用后才有效。 \"enableStrictParsing\" =&gt; false, // 是否在URL中显示入口脚本。是对美化功能的进一步补充。 \"showScriptName\" =&gt; false, // 指定续接在URL后面的一个后缀，如 .html 之类的。仅在 enablePrettyUrl 启用时有效。 \"suffix\" =&gt; \"\", \"rules\" =&gt; [ \"&lt;controller:\\w+&gt;/&lt;id:\\d+&gt;\"=&gt;\"&lt;controller&gt;/view\", \"&lt;controller:\\w+&gt;/&lt;action:\\w+&gt;\"=&gt;\"&lt;controller&gt;/&lt;action&gt;\" ],],配置web serverApache作为服务器，在应用的目录 backend/web下面创建.htaccess文件并添加如下内容：Options +FollowSymLinksIndexIgnore */*RewriteEngine on# if a directory or a file exists, use it directlyRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-d# otherwise forward it to index.phpRewriteRule . index.phpnginx用户，修改server部分，如下：server &#123; listen 80; server_name yourdomain; root yourdirectory/backend/web; index index.php index.html; charset utf-8; location / &#123; index index.php; if (!-e $request_filename) &#123; rewrite ^(.*)$ /index.php/$1 last; break; &#125; &#125; location ~ .+\\.php($|/) &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125;&#125; 启动更多分配路由我们先访问路由页面 /admin/route ，尽可能的把左侧的全部选中，然后移动到右侧，并记得给当前用户分配相关的可访问权限。 添加菜单1234567891011121314访问菜单列表 admin/menu 点击添加菜单admin/menu/create按钮。&gt; 如果这个时候你没有权限访问了，需要在配置文件（backend/config/main.php）的 as access数组暂时允许当前用户访问任意权限，并在我们添加完权限的时候去掉as access的设置，切记。 'as access' =&gt; [ 'class' =&gt; 'mdm\\admin\\components\\AccessControl', 'allowActions' =&gt; [ //'site/*',//允许访问的节点，可自行添加 //'admin/*',//允许所有人访问admin节点及其子节点 \"*\"//不配置这个是访问不到gii，使用完记得修改回来，否则权限会出问题 //\"book/index\",//未登录用户也可以访问图书列表 ] ], ？？？？？？？？？父级一直添加不上？？？先手动修改数据库？？？？最后解决这个问题？？？？ 添加界面如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364一、例如添加一级菜单\"权限管理\"，按照如下填写：名称：权限管理父级名称：不填路由：/admin/default/index排序：1数据：暂不填写二、添加一个二级菜单\"角色列表\"，如下：名称：角色列表父级名称：权限管理路由：/admin/role/index排序：2数据：暂不填写三、添加一个二级菜单\"权限列表\"，如下：名称：权限列表父级名称：权限管理路由：/admin/permission/index排序：3数据：暂不填写四、添加一个二级菜单\"路由列表\"，如下：名称：路由列表父级名称：权限管理路由：/admin/route/index排序：4数据：暂不填写五、添加一个二级菜单\"规则管理\"，如下：名称：规则管理父级名称：权限管理路由：/admin/rule/index排序：5数据：暂不填写六、添加一个二级菜单\"分配用户到角色\"，如下：名称：分配用户到角色父级名称：权限管理路由：/admin/assignment/index排序：6数据：暂不填写七、添加一个二级菜单\"菜单列表\"，如下：名称：菜单列表父级名称：权限管理路由：/admin/menu/index排序：7数据：暂不填写八、添加一个二级菜单\"用户列表\"，如下：名称：用户列表父级名称：权限管理路由：/admin/user/index排序：8数据：暂不填写九、添加一个二级菜单\"图书列表\"，如下：名称：图书列表父级名称：权限管理路由：/book/index排序：9数据：暂不填写具体如下 左侧菜单展示12345678910111213141516171819202122232425262728293031323334修改&lt;project&gt;/backend/views/layouts/left.php文件（保证这个文件是从&lt;project&gt;/vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app/views/layouts/left.php地方复制过来的，否则去修改源文件），添加如下代码：侧菜单上把权限的栏目加上,代码可直接复制，放置于 &lt;section class=\"sidebar\"&gt;&lt;/section&gt;标签内即可 //第一种显示方式 $callback = function($menu)&#123; return [ 'label' =&gt; $menu['name'], 'url' =&gt; [$menu['route']], 'icon' =&gt; $menu['data'], 'items' =&gt; $menu['children'] ]; &#125;; use mdm\\admin\\components\\MenuHelper; $items = MenuHelper::getAssignedMenu(Yii::$app-&gt;user-&gt;id, null, $callback, true); echo dmstr\\widgets\\Menu::widget([ 'options' =&gt; ['class' =&gt; 'sidebar-menu', 'data-widget'=&gt; 'tree'], 'items' =&gt; $items ]); //第二种显示方式 //use mdm\\admin\\components\\MenuHelper; use yii\\bootstrap\\Nav; echo Nav::widget( [ //\"encodeLabels\" =&gt; false, \"options\" =&gt; [\"class\" =&gt; \"sidebar-menu\", 'data-widget'=&gt; 'tree'], \"items\" =&gt; MenuHelper::getAssignedMenu(Yii::$app-&gt;user-&gt;id), ] ); 整合完毕后存在问题（原因是 yii2-admin 2.0版本）一、菜单小图标并控制菜单显示：我们在创建菜单的时候，没填写的”数据”一栏，我们填写 Font Awesome 从这里面选择图标，例如在品牌图标中 使用这个是 fa fa-android ；我们在 菜单“数据”一栏应该写 android，如图： 二、菜单列表中父级一直添加不上 ，父级名意图提示样式会跑到最左侧，路由意图样式会跑到最左侧（yii2-admin 版本1.0没有此问题） 解决办法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114一、解决父级添加不上：修改&lt;project&gt;/vendor/mdmsoft/yii2-admin/models/Menu.php中原来： public function rules() &#123; return [ [['name'], 'required'], [['parent_name'], 'in', 'range' =&gt; static::find()-&gt;select(['name'])-&gt;column(), 'message' =&gt; 'Menu \"&#123;value&#125;\" not found.'], [['parent', 'route', 'data', 'order'], 'default'], [['parent'], 'filterParent', 'when' =&gt; function() &#123; return !$this-&gt;isNewRecord; &#125;], [['order'], 'integer'], [['route'], 'in', 'range' =&gt; static::getSavedRoutes(), 'message' =&gt; 'Route \"&#123;value&#125;\" not found.'] ]; &#125; 修改后： public function rules() &#123; return [ [['name'], 'required'], [['parent_name'], 'in', 'range' =&gt; static::find()-&gt;select(['name'])-&gt;column(), 'message' =&gt; 'Menu \"&#123;value&#125;\" not found.'], [['parent', 'route', 'data', 'order'], 'default'], /*[['parent'], 'filterParent', 'when' =&gt; function() &#123; return !$this-&gt;isNewRecord; &#125;],*/ [['parent_name'], 'filterParent'],//修改此方法 [['order'], 'integer'], [['route'], 'in', 'range' =&gt; static::getSavedRoutes(), 'message' =&gt; 'Route \"&#123;value&#125;\" not found.'] ]; &#125; 原来： public function filterParent() &#123; $parent = $this-&gt;parent; $db = static::getDb(); $query = (new Query)-&gt;select(['parent']) -&gt;from(static::tableName()) -&gt;where('[[id]]=:id'); while ($parent) &#123; if ($this-&gt;id == $parent) &#123; $this-&gt;addError('parent_name', 'Loop detected.'); return; &#125; $parent = $query-&gt;params([':id' =&gt; $parent])-&gt;scalar($db); &#125; &#125; 修改后： public function filterParent() &#123; //修改此方法 $value = $this-&gt;parent_name; $parent = self::findOne(['name' =&gt; $value]); if ($parent) &#123; $id = $this-&gt;id; $parent_id = $parent-&gt;id; while ($parent) &#123; if ($parent-&gt;id == $id) &#123; $this-&gt;addError('parent_name', 'Loop detected.'); return; &#125; $parent = $parent-&gt;menuParent; &#125; $this-&gt;parent = $parent_id; &#125; &#125; 二、解决意图提示样式下载 yiisoft/yii2-juiphp composer.phar require --prefer-dist yiisoft/yii2-jui现在已经可以上试试效果，完全没有问题，如果不想用form中原来的书写方式可以按下面的办法；修改 &lt;project&gt;/vendor/mdmsoft/yii2-admin/views/menu/_form.php中parent_name和route表单：修改之前： &lt;?= $form-&gt;field($model, 'parent_name')-&gt;textInput(['id' =&gt; 'parent_name']) ?&gt; &lt;?= $form-&gt;field($model, 'route')-&gt;textInput(['id' =&gt; 'route']) ?&gt;修改之后： &lt;?= $form-&gt;field($model, 'parent_name')-&gt;widget('yii\\jui\\AutoComplete',[ 'options'=&gt;['class'=&gt;'form-control'], 'clientOptions'=&gt;[ 'source'=&gt; Menu::find()-&gt;select(['name'])-&gt;column() ] ]) ?&gt; &lt;?= $form-&gt;field($model, 'route')-&gt;widget('yii\\jui\\AutoComplete',[ 'options'=&gt;['class'=&gt;'form-control'], 'clientOptions'=&gt;[ 'source'=&gt; Menu::getSavedRoutes() ] ]) ?&gt;三、在 &lt;project&gt;/vendor/mdmsoft/yii2-admin/views/role/_form.php 同样会有样式问题，按照二的步骤修改即可 使用到的时候再改就可以。 修改后的： &lt;?= $form-&gt;field($model, 'ruleName')-&gt;widget('yii\\jui\\AutoComplete', [ 'options' =&gt; [ 'class' =&gt; 'form-control', ], 'clientOptions' =&gt; [ 'source' =&gt; array_keys(Yii::$app-&gt;authManager-&gt;getRules()), ] ]) ?&gt;","tags":[]},{"title":"hexo常用命令笔记","date":"2017-11-30T03:37:25.595Z","path":"2017/11/30/hexo/hexo常用命令笔记/","text":"hexo123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 简写12345hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器1234567hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动123456789hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate --watch #监视文件变动完成后部署两个命令的作用是相同的hexo generate --deployhexo deploy --generatehexo deploy -ghexo server -g 草稿1hexo publish [layout] &lt;title&gt; 模版123456789hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo new [layout] &lt;title&gt;hexo new photo \"My Gallery\"hexo new \"Hello World\" --lang tw 变量 描述 layout 布局 title 标题 date 建立 12345678910title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 暮色匆匆去，音消尘也无模版（Scaffold）hexo new photo \"My Gallery\" 设置文章摘要以上是文章摘要 以下是余下全文 写作12hexo new page &lt;title&gt;hexo new post &lt;title&gt; 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 推送到服务器上123hexo n #写文章hexo g #生成hexo d #部署 #可与hexo g合并为 hexo d -g 报错1.找不到git部署 1ERROR Deployer not found: git 解决方法 1npm install hexo-deployer-git --save 3.部署类型设置githexo 3.0 部署类型不再是github，_config.yml 中修改 123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@***.github.com:***/***.github.io.git branch: master xcodebuild 123xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instancenpm install bcrypt RSS不显示安装RSS插件 1npm install hexo-generator-feed --save 开启RSS功能编辑hexo/_config.yml，添加如下代码： 1rss: /atom.xml #rss地址 默认即可 开启评论1.我使用多说代替自带的评论，在多说 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 short_name 1 在根目录 _config.yml 添加一行 disqus_shortname: jslite 是在多说注册时产生的复制到 themes\\landscape\\layout\\_partial\\article.ejs2 把 1234567&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;&lt;section id=\"comments\"&gt;&lt;div id=\"disqus_thread\"&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=\"//disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/section&gt;&lt;% &#125; %&gt; 改为 1234567891011121314151617181920&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt; &lt;section id=\"comments\"&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=\"ds-thread\" data-thread-key=\"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;\" data-title=\"&lt;%= post.title %&gt;\" data-url=\"&lt;%= page.permalink %&gt;\"&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=\"text/javascript\"&gt; var duoshuoQuery = &#123;short_name:'&lt;%= config.disqus_shortname %&gt;'&#125;; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/section&gt;&lt;% &#125; %&gt; hexo-git-backup12345678910111213141516安装备份插件参考网址： https://github.com/coneycode/hexo-git-backupUpdateif you install with --save, you must remove firstly when you update it.$ npm remove hexo-git-backup$ npm install hexo-git-backup --save--------------------------------------安装主题参考网址： https://github.com/chaooo/hexo-theme-BlueLakegit clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake-------------------------------------生成、部署hexo ghexo dhexo bhexo server -p 5000 【本地查看】 hexo12","tags":[]},{"title":"Hello World","date":"2017-11-30T02:44:53.743Z","path":"2017/11/30/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]